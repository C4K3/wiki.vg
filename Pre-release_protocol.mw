This page documents the changes from the [[Protocol|last stable Minecraft release]] (currently 1.2.5) to the current pre-release (or weekly release).

== New packets ==

=== Map Chunk Bulk (0x38) ===

To reduce the number of bytes this packet is used to send chunk columns together for better compression results. The packet contains up to 100 chunk columns (later this might be reduced to 50).

The data part is a zlib compressed byte array containing the chunk data. The meta data part specifies which chunks in which order the data part exists of. 

To split this packet into chunks you need to uncompress the data array. Then you can iterate through the data part. Each part is 10240 * n + 256 bytes. n is the number of chunks in the current chunk column(this is the number of flags set in the primary bitmap). 10240 is the amount of bytes for each chunk without add bitmap, 256 bytes are used for biomes. The second short in the meta data part is not yet in use. It could specify if the chunk uses the add bitmap part, because it has very high block ids, but not in the current snapshot. 

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=5 | 0x38
| class="col1 centeralign" | Chunk Column Count
| class="col2 centeralign" | short
| class="col3 centeralign" | 
| class="col4" | The number of chunk columns in this packet
|- class="row2"
| class="col1 centeralign" | Chunk data size
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | the size of the data field
|- class="row3"
| class="col1 centeralign" | Data
| class="col2 centeralign" | byte array
| class="col3 centeralign" | 
| class="col4" | compressed chunk data
|- class="row4"
| class="col1 centeralign" | meta information
| class="col2 centeralign" | chunk bulk meta information
| class="col3 centeralign" |
| class="col4 centeralign" | Chunk column count times the Meta information structure (See notes for details)
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 7 + (Chunk data size) + 12 * (Chunk Column Count) bytes
|}


====Chunk Bulk Meta Information Structure====

{| class="wikitable"
|- class="row0"
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col1 centeralign" | Chunk Column X
| class="col2 centeralign" | int
| class="col3 centeralign" | 10
| class="col4" | The X coordinate of the specific chunk column
|- class="row2"
| class="col1 centeralign" | Chunk Column Z
| class="col2 centeralign" | int
| class="col3 centeralign" | 10
| class="col4" | The Z coordinate of the specific chunk column
|- class="row3"
| class="col1 centeralign" | Chunk Primary bitmap
| class="col2 centeralign" | short
| class="col3 centeralign" | 15
| class="col4" | A bitmap which specifies which chunk is not empty in this chunk column
|- class="row4"
| class="col1 centeralign" | Chunk Add bitmap?
| class="col2 centeralign" | short
| class="col3 centeralign" | 0
| class="col4" | A bitmap which specifies which chunk need add information because of very high block ids. not yet used. needs verification
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="3" | 12 bytes
|}


=== Tab-complete (0xCB) ===

''Two-way''

Sent C->S when the user presses [tab] while writing text. The payload contains all text behind the cursor.

The server responds with an auto-completion of the last word sent to it. In the case of regular chat, this is a player username. Command names and parameters are also supported.

In the event of more than one possible completion, the server responds with the options packed into the single string field, separated by a null character. Note that as strings are UTF-16, this is two bytes wide.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0xCB
| class="col1 centeralign" | Text
| class="col2 centeralign" | string
| class="col3 centeralign" | 
| class="col4" | 
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes + length of string
|}

=== Locale and View Distance (0xCC) ===

''Client to server''

Sent when the player connects, or when settings are changed.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0xCC
| class="col1 centeralign" | Locale
| class="col2 centeralign" | string
| class="col3 centeralign" | en_GB
|- class="row2"
| class="col1 centeralign" | View distance
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4" | 0-3 for 'far', 'normal', 'short', 'tiny'.
|- class="row3"
| class="col1 centeralign" | Chat flags
| class="col2 centeralign" | byte
| class="col3 centeralign" | 8
| class="col4" | Chat settings. See notes below.
|- class="row4"
| class="col1 centeralign" | Difficulty
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4 centeralign" | Client-side difficulty from options.txt
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 8 bytes + length of string
|}

Chat flags has several values packed into one byte.

'''Chat Enabled:''' Bits 0-1. 00: Enabled.  01: Commands only.  10: Hidden.

'''Colors Enabled:''' Bit 3.  0: Disabled.  1: Enabled.

=== Client Statuses (0xCD) ===

''Client to server''

Sent when the client is ready to complete login and when the client is ready to respawn after death.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="1" | 0xCD
| class="col1 centeralign" | Payload
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4" | Bit field. 0: Initial spawn, 1: Respawn after death
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="5" | 2 bytes
|}

=== Encryption Key Response (0xFC) ===

''Two-Way''

See [[Protocol Encryption]] for information on this packet.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0xFC
| class="col1 centeralign" | Shared secret length
| class="col2 centeralign" | short
| class="col3 centeralign" | 
| class="col4 centeralign" | 
|- class="row2"
| class="col1 centeralign" | Shared secret
| class="col2 centeralign" | byte array
| class="col3 centeralign" | 
| class="col4 centeralign" |
|- class="row3"
| class="col1 centeralign" | Verify token length
| class="col2 centeralign" | short
| class="col3 centeralign" | 
| class="col4 centeralign" |  
|- class="row4"
| class="col1 centeralign" | Verify token response
| class="col2 centeralign" | byte array
| class="col3 centeralign" | 
| class="col4 centeralign" | 
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes + length of shared secret + length of token
|}

=== Encryption Key Request (0xFD) ===

''Server to client''

See [[Protocol Encryption]] for information on this packet.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0xFD
| class="col1 centeralign" | Server id
| class="col2 centeralign" | string
| class="col3 centeralign" | 
| class="col4 centeralign" | 
|- class="row2"
| class="col1 centeralign" | Public key length
| class="col2 centeralign" | short
| class="col3 centeralign" | 
| class="col4 centeralign" | 
|- class="row3"
| class="col1 centeralign" | Public key
| class="col2 centeralign" | byte array
| class="col3 centeralign" | 
| class="col4 centeralign" | 
|- class="row4"
| class="col1 centeralign" | Verify token length
| class="col2 centeralign" | short
| class="col3 centeralign" | 
| class="col4 centeralign" | 
|- class="row4"
| class="col1 centeralign" | Verify token
| class="col2 centeralign" | byte array
| class="col3 centeralign" | 
| class="col4 centeralign" | 
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 7 bytes + length of string + length of key + length of token
|}





=== Named Sound Effect (0x3E) ===

''Server to client''

Used to play a sound effect on the client.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x3E
| class="col1 centeralign" | Sound name
| class="col2 centeralign" | string
| class="col3 centeralign" | step.grass
| class="col4 centeralign" | 250
|- class="row2"
| class="col1 centeralign" | Effect position X
| class="col2 centeralign" | int
| class="col3 centeralign" | 250
| class="col4 centeralign" | effect X multiplied by 8
|- class="row3"
| class="col1 centeralign" | Effect position Y
| class="col2 centeralign" | int
| class="col3 centeralign" | 250
| class="col4 centeralign" | effect Y multiplied with 8
|- class="row4"
| class="col1 centeralign" | Effect position Z
| class="col2 centeralign" | int
| class="col3 centeralign" | 250
| class="col4 centeralign" | effect Z multiplied with 8
|- class="row5"
| class="col1 centeralign" | Volume
| class="col2 centeralign" | float
| class="col3 centeralign" | 9
| class="col4 centeralign" | 1 is 100%, can be more
|- class="row6"
| class="col1 centeralign" | Pitch
| class="col2 centeralign" | byte
| class="col3 centeralign" | 1
| class="col4 centeralign" | 63 is 100%, can be more
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 20 bytes + length of string
|}

=== Block Break Animation (0x37) ===

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=5 | 0x37
| class="col1 centeralign" | EID?
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | Entity breaking the block?
|- class="row2"
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" rowspan=3 | Block position
|- class="row2"
| class="col1 centeralign" | Y
| class="col2 centeralign" | int
| class="col3 centeralign" | 
|- class="row2"
| class="col1 centeralign" | Z
| class="col2 centeralign" | int
| class="col3 centeralign" | 
|- class="row3"
| class="col1 centeralign" | Unknown
| class="col2 centeralign" | byte
| class="col3 centeralign" | 1
| class="col4" | ?
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 4 bytes
|}

== Changed Data Type ==

=== Item Meta Data ===

The meta data for items no longer requires a table.  If an item has no meta data, the byte array is given a length of -1.

This affects at least packet 0x0F (Player Block Placement), 0x66 (Window click codec), 0x6B (Creative inventory), 0x68 (Window Set Slot), 0x05 (Entity Equipment).

== Changed packets ==

=== Login Request (0x01) ===

''Two-Way''

See [[Protocol Encryption]] for information on logging in.

'''Client to Server'''

Just 1 byte C->S

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
|- class="row1"
| class="col0 centeralign" | 0x01
|}

'''Server to Client'''

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="7" | 0x01
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1298</code>
| class="col4" | The Players Entity ID
|- class="row2"
| class="col0 centeralign" | Level Type
| class="col1 centeralign" | string
| class="col2 centeralign" | default
| class="col3" | default or SUPERFLAT; level-type in server.properties
|- class="row3"
| class="col0 centeralign" | Server mode
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | 0 for survival, 1 for creative
|- class="row4"
| class="col0 centeralign" | Dimension
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | <code>-1</code>: The Nether, <code>0</code>: The Overworld, <code>1</code>: The End
|- class="row5"
| class="col0 centeralign" | Difficulty
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>1</code>
| class="col3" | <code>0</code> thru <code>3</code> for Peaceful, Easy, Normal, Hard
|- class="row6"
| class="col0 centeralign" | Not used
| class="col1 centeralign" | unsigned byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | Only 0 observed from vanilla server, was previously world height
|- class="row7"
| class="col0 centeralign" | Max players
| class="col1 centeralign" | unsigned byte
| class="col2 centeralign" | <code>8</code>
| class="col3" | Used by the client to draw the player list
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 12 bytes + length of strings
|}

=== Handshake (0x02) ===

''Client to server''

See [[Protocol Encryption]] for information on logging in.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x02
| class="col1 centeralign" | Protocol Version
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>38</code>
| class="col4" | 
|- class="row2"
| class="col1 centeralign" | Username
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>TkTech</code>
| class="col4" | The username of the player attempting to connect
|- class="row3"
| class="col1 centeralign" | Server Host
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>localhost</code>
| class="col4" | 
|- class="row4"
| class="col1 centeralign" | Server Port
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>25565</code>
| class="col4" | 
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 10 bytes + length of strings
|}

=== Entity Equipment (0x05) ===

''Server to Client''

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x05
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | 0x00010643
| class="col4" | Named Entity ID
|- class="row2"
| class="col0 centeralign" | Slot
| class="col1 centeralign" | short
| class="col2 centeralign" | 4
| class="col3" | Equipment slot: 0=held, 1-4=armor slot 
|- class="row3"
| class="col0 centeralign" | Item
| class="col1 centeralign" | slot
| class="col2 centeralign" | 
| class="col3" | Item in slot format
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes
|}

=== Respawn (0x09) ===

''Two-Way''

Sent by the client when the player presses the "Respawn" button after dying. The server then teleports the user to the spawn point, and sends a respawn packet in response.  The client will not leave the respawn screen until it receives a respawn packet.

To change the player's dimension (overworld/nether/end), send them a respawn packet with the appropriate dimension, followed by prechunks/chunks for the new dimension, and finally a position and look packet.  You do not need to unload chunks, the client will do it automatically.

'''Client to Server'''

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
|- class="row1"
| class="col0 centeralign" | 0x09
|}

'''Server to Client'''

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x09
| class="col1 centeralign" | Dimension
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1</code>
| class="col4" | <code>-1</code>: The Nether, <code>0</code>: The Overworld, <code>1</code>: The End
|- class="row2"
| class="col1 centeralign" | Difficulty
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | <code>0</code> thru <code>3</code> for Peaceful, Easy, Normal, Hard. <code>1</code> is always sent c->s
|- class="row3"
| class="col1 centeralign" | Creative mode
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | <code>0</code> for survival, <code>1</code> for creative.
|- class="row4"
| class="col1 centeralign" | World height
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>256</code>
| class="col4" | Defaults to <code>256</code>
|- class="row5"
| class="col1 centeralign" | Level Type
| class="col2 centeralign" | string
| class="col3 centeralign" | default
| class="col4" | See [[#0x01|0x01 login]]
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes + length of string
|}

=== Player Block Placement (0x0F) ===

''Client to Server''

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="8" | 0x0F
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>32</code>
| class="col4" | Block position
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | unsigned byte
| class="col2 centeralign" | <code>64</code>
| class="col3" | Block position
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>32</code>
| class="col3 leftalign" | Block position
|- class="row4"
| class="col0 centeralign" | Direction
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>3</code>
| class="col3" | The offset to use for block/item placement (see below)
|- class="row5"
| class="col0 centeralign" | Held item
| class="col1 centeralign" | [[Slot_Data|slot]]
| class="col2 centeralign" | 
| class="col3" | 
|- class="row6"
| class="col0 centeralign" | Cursor position X
| class="col1 centeralign" | byte
| class="col2 centeralign" | 0 - 16
| class="col3" | The position of the crosshair on the block
|- class="row7"
| class="col0 centeralign" | Cursor position Y
| class="col1 centeralign" | byte
| class="col2 centeralign" | 0 - 16
| class="col3" | 
|- class="row8"
| class="col0 centeralign" | Cursor position Z
| class="col1 centeralign" | byte
| class="col2 centeralign" | 0 - 16
| class="col3" | 
|- class="row9"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes + slot data
|}

=== Spawn Named Entity (0x14) ===

''Server to Client''

{| class="wikitable"
|- class="row0"
! class="col0 centeralign" | Packet ID
! class="col1 rightalign" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="9" | 0x14
| class="col1" | EID
| class="col2" | int
| class="col3" | <code>94453</code>
| class="col4" | Player ID
|- class="row2"
| class="col0" | Player Name
| class="col1" | string
| class="col2" | <code>Twdtwd</code>
| class="col3" | Max length of 16
|- class="row3"
| class="col0" | X
| class="col1" | int
| class="col2" | <code>784</code>
| class="col3" | Player X as Absolute Integer
|- class="row4"
| class="col0" | Y
| class="col1" | int
| class="col2" | <code>2131</code>
| class="col3" | Player Y as Absolute Integer
|- class="row5"
| class="col0" | Z
| class="col1" | int
| class="col2" | <code>-752</code>
| class="col3" | Player Z as Absolute Integer
|- class="row6"
| class="col0" | Yaw
| class="col1" | byte
| class="col2" | <code>0</code>
| class="col3" | Player rotation as a packed byte
|- class="row7"
| class="col0" | Pitch
| class="col1" | byte
| class="col2" | <code>0</code>
| class="col3" | Player rotation as a packed byte
|- class="row8"
| class="col0" | Current Item
| class="col1" | short
| class="col2" | <code>0</code>
| class="col3" | The item the player is currently holding. Note that this should be 0 for "no item", unlike -1 used in other packets. A negative value crashes clients.
|- class="row9"
| class="col0" | Metadata
| class="col1" | Metadata
| class="col2" | <code>127</code>
| class="col3" | 
|- class="row10"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 22 bytes + length of strings + metadata (at least 1)
|}

=== Spawn Object/Vehicle (0x17) ===

''Server to Client''

Sent by the server when an Object/Vehicle is created. The throwers entity id is now used for fishing floats too.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="9" | 0x17
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>62</code>
| class="col4" | Entity ID of the Object
|- class="row2"
| class="col0 centeralign" | Type
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>11</code>
| class="col3" | The type of object (see [[Entities#Objects]])
|- class="row3"
| class="col0 centeralign" | X
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>16080</code>
| class="col3" | The Absolute Integer X Position of the object
|- class="row4"
| class="col0 centeralign" | Y
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>2299</code>
| class="col3" | The Absolute Integer Y Position of the object
|- class="row5"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>592</code>
| class="col3" | The Absolute Integer Z Position of the object
|- class="row6"
| class="col0 centeralign" | thrower's entity ID
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>0</code>
| class="col3" | If this is bigger than 0, this is a entity trown by a other entity and the next 3 fields are sent.
|- class="row7"
| class="col0 centeralign" | Speed X
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" | Not sent if the thrower entity ID is 0. The speed of this entity along the X axis.
|- class="row5"
| class="col0 centeralign" | Speed Y
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" | Not sent if the thrower entity ID is 0. The speed of this entity along the Y axis.
|- class="row5"
| class="col0 centeralign" | Speed Z
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" | Not sent if the thrower entity ID is 0. The speed of this entity along the Z axis.
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 22 or 28 bytes
|}


{{anchor|0x18}}

=== Spawn Mob (0x18) ===

''Server to Client''

Sent by the server when a Mob Entity is Spawned

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="12" | 0x18
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>446</code>
| class="col4" | Entity ID
|- class="row2"
| class="col0 centeralign" | Type
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>91</code>
| class="col3" | The type of mob. See [[Entities#Mobs]]
|- class="row3"
| class="col0 centeralign" | X
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>13366</code>
| class="col3" | The Absolute Integer X Position of the object
|- class="row4"
| class="col0 centeralign" | Y
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>2176</code>
| class="col3" | The Absolute Integer Y Position of the object
|- class="row5"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>1680</code>
| class="col3" | The Absolute Integer Z Position of the object
|- class="row6"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>-27</code>
| class="col3" | The yaw in steps of 2p/256
|- class="row7"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The pitch in steps of 2p/256
|- class="row8"
| class="col0 centeralign" | Head Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | 
| class="col3" | Head yaw in steps of 2p/256
|- class="row9"
| class="col0 centeralign" | Velocity Z
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" | 
|- class="row10"
| class="col0 centeralign" | Velocity X
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" | 
|- class="row11"
| class="col0 centeralign" | Velocity Y
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" | 
|- class="row12"
| class="col0 centeralign" | Metadata
| class="col1 centeralign" | Metadata
| class="col2 centeralign" | <code>127</code>
| class="col3" | Varies by mob, see [[Entities]]
|- class="row13"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 27 bytes + Metadata (at least 1)
|}


{{anchor|0x19}}

=== Destroy Entity (0x1D) ===

''Server to Client''

Sent by the server when an list of Entities is to be destroyed on the client.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 " rowspan="2" | 0x1D
| class="col1 centeralign" | Entity Count
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>3</code>
| class="col4 centeralign" | The amount of entities which should be destroyed
|- class="row21"
| class="col1 centeralign" | Entity IDs
| class="col2 centeralign" | array of int
| class="col3 centeralign" | <code>452, 546, 123</code>
| class="col4 centeralign" | The list of entity ids which should be destroyed
|- class="row32"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 + (entity count * 4) bytes
|}


{{anchor|0x1E}}

=== Chunk Data (0x33) ===

''Server to Client''

See also: [[Map Format]]

Chunks are sent a column at a time, with some sections optionally missing from each packet (those consisting only of air).

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="7" | 0x33
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | Chunk X Coordinate (*16 to get true X)
|- class="row2"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" |
| class="col3" | Chunk Z Coordinate (*16 to get true Z)
|- class="row3"
| class="col0 centeralign" | Ground-up continuous
| class="col1 centeralign" | boolean
| class="col2 centeralign" | 
| class="col3" | This is True if the packet represents all sections in this vertical column, where the primary bit map specifies exactly which sections are included, and which are air.
|- class="row4"
| class="col0 centeralign" | Primary bit map
| class="col1 centeralign" | unsigned short
| class="col2 centeralign" | 15
| class="col3" | Bitmask with 1 for every 16x16x16 section which data follows in the compressed data.
|- class="row5"
| class="col0 centeralign" | Add bit map
| class="col1 centeralign" | unsigned short
| class="col2 centeralign" | 0
| class="col3" | Same as above, but this is used exclusively for the 'add' portion of the payload
|- class="row6"
| class="col0 centeralign" | Compressed size
| class="col1 centeralign" | int
| class="col2 centeralign" | 
| class="col3" | Size of compressed chunk data.
|- class="row78"
| class="col0 centeralign" | Compressed data
| class="col1 centeralign" | unsigned byte array
| class="col2 centeralign" | <code>…</code>
| class="col3" | The chunk data is compressed using ZLib Deflate function.
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 22 bytes + Compressed chunk size
|}


=== Block Change (0x35) ===

''Server to Client''

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x35
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>502</code>
| class="col4" | Block X Coordinate
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>71</code>
| class="col3" | Block Y Coordinate
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>18</code>
| class="col3" | Block Z Coordinate
|- class="row4"
| class="col0 centeralign" | Block Type
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>78</code>
| class="col3" | The new block type for the block
|- class="row5"
| class="col0 centeralign" | Block Metadata
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The new Metadata for the block
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 13 bytes
|}

=== Block Action (0x36) ===

''Server to Client''

This packet is used for a number of things:
* <div class="li">Chests opening and closing
* Pistons pushing and pulling
* Note blocks playing

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x36
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>502</code>
| class="col4" | Block X Coordinate
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>71</code>
| class="col3" | Block Y Coordinate
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>18</code>
| class="col3" | Block Z Coordinate
|- class="row4"
| class="col0 centeralign" | Byte 1
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>3</code>
| class="col3" | Varies depending on block - see below
|- class="row5"
| class="col0 centeralign" | Byte 2
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>17</code>
| class="col3" | Varies depending on block - see below
|- class="row6"
| class="col0 centeralign" | Block ID
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>29</code>
| class="col3" | The block id this action is set for
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 13 bytes
|}

See Also: [[Block Actions]]

=== Update Tile Entity (0x84) ===

''Server to Client''

Essentially a block update on a tile entity.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x84
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | short
| class="col2 centeralign" | 
| class="col3" | 
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | 
| class="col3" | 
|- class="row4"
| class="col0 centeralign" | Action
| class="col1 centeralign" | byte
| class="col2 centeralign" | 
| class="col3" | The type of update to perform
|- class="row5"
| class="col0 centeralign" | Data length
| class="col1 centeralign" | Short
| class="col2 centeralign" | 
| class="col3" | Varies
|- class="row6"
| class="col0 centeralign" | NBT Data
| class="col1 centeralign" | Byte Array - Present if data length > 0
| class="col2 centeralign" | 
| class="col3" | Varies
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 12 + itemstack bytes
|}

'''Actions'''

* '''1''': Set mob displayed inside a mob spawner. Custom 1 contains the [[Entities#Mobs|mob type]]

=== Explosion (0x3C) ===

''Server to Client''

Sent when an explosion occurs (creepers, TNT, and ghast fireballs).

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=9 | 0x3C
| class="col1 centeralign" | X
| class="col2 centeralign" | double
| class="col3 centeralign" | 
| class="col4" | 
|- class="row1"
| class="col1 centeralign" | Y
| class="col2 centeralign" | double
| class="col3 centeralign" | 
| class="col4" | 
|- class="row1"
| class="col1 centeralign" | Z
| class="col2 centeralign" | double
| class="col3 centeralign" | 
| class="col4" | 
|- class="row1"
| class="col1 centeralign" | Radius
| class="col2 centeralign" | float
| class="col3 centeralign" | 3.0
| class="col4" | Currently unused in the client
|- class="row2"
| class="col1 centeralign" | Record count
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | This is the count, not the size. The size is 3 times this value.
|- class="row3"
| class="col1 centeralign" | Records
| class="col2 centeralign" | (byte, byte, byte) × count
| class="col3 centeralign" | 
| class="col4" | Each record is 3 bytes, which seem to be XYZ offsets of affected blocks.
|- class="row4"
| class="col1 centeralign" | Unknown
| class="col2 centeralign" | float
| class="col3 centeralign" | 
| class="col4" | 
|- class="row5"
| class="col1 centeralign" | Unknown
| class="col2 centeralign" | float
| class="col3 centeralign" | 
| class="col4" | 
|- class="row6"
| class="col1 centeralign" | Unknown
| class="col2 centeralign" | float
| class="col3 centeralign" | 
| class="col4" | 
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 45 bytes + 3*(Record count) bytes
|}

=== Player Abilities (0xCA) ===
This packet has now been compressed into 3 bytes. The latter 2 bytes are used to indicate the walking and flying sppeds respectively, while the first byte is used to determine the value of 4 booleans.
 
These booleans are whether damage is disabled (god mode), whether the player is flying, whether the player can fly, and whether the player is in creative mode.
 
To get the values of these booleans, simply AND (&) the byte with 1,2,4 and 8 respectively, to get the 0 or 1 bitwise value. To set them OR (|) them with their repspective masks.
{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=4 | 0xCA
| class="col1 centeralign" | Flags
| class="col2 centeralign" | byte
| class="col3 centeralign" | 5
| class="col4" | 
|- class="row2"
| class="col1 centeralign" | Flying speed
| class="col2 centeralign" | byte
| class="col3 centeralign" | 12
| class="col4" | 
|- class="row3"
| class="col1 centeralign" | Walking speed
| class="col2 centeralign" | byte
| class="col3 centeralign" | 25
| class="col4" | 
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 4 bytes
|}

== Removed packets ==

=== Chunk Allocation Packet (0x32) ===
The chunk Allocation Packet is not longer in use. Memory will automatically allocated with a incoming Map Chunk packet. To deallocate memory you need to send a MapChunk packet, which only contains biome data for plains(all biome bytes set to 1). So the Add and Primary bitmap must set to 0, and Ground-up continuous to true. Because the payload of this packet is compressed and static you can use a hardcoded value for it, so you don't need to compress it each time.

This is the payload which is used in the Compressed Data part to deallocate a chunk column:

0x78, 0x9C, 0x63, 0x64, 0x1C, 0xD9, 0x00, 0x00, 0x81, 0x80, 0x01, 0x01

== Protocol History ==

=== 2012-07-24 ===
* 12w30c
* Protocol version 39
* Changed packets 0x84

=== 2012-07-23 ===
* 12w30a
* Protocol version is still 38
* Changed packets 0x14 and 0x35

=== 2012-07-05 ===
* 12w27a
* Protocol version is now 38
* Added packet 0x38

=== 2012-06-21 ===
* 12w25a
* Packet 0xFC and 0xFD include a 4 byte long byte array. This is hashed with the public RSA key and sent back. See [[Protocol Encryption]] for further info.
* Packet 0x3E changed to include float rather than byte.

=== 2012-06-14 ===
* 12w24a
* Protocol version is now 36
* Changed Packet 0x01(Login Request), only used as Login Reply
* New Packet 0xCD used for Login Request and Respawn (1 byte payload)
* All items (except the empty hand) now send enchantment data

=== 2012-06-07 ===
* 12w23b
* Protocol version is now 35
* Change packet: Player Block Placement
* New Packet: Block breaking animation

=== 2012-05-24 ===
* 12w21a
* No packet changes but the algorithm was changed to AES128 with the shared key as the IV, will be described in [[Protocol Encryption]]

=== 2012-05-10 ===
* 12w19a
* No packet changes, but an other encryption algorythm is used, described in [[Protocol Encryption]]
* The items which are not enchantable in 12w18a are now readded
* Fishing floats, spawned by a 0x17 packet do now use the extra fields

=== 2012-05-03 ===
* 12w18a
* Protocol version is now 32
* New packet: 0x3D Name Sound Effect
* Changed packet: 0x01 Login Request
* Changed packet: 0x02 Handshake
* Changed packet: 0xCA Player Abilities
* Changed packet: 0xCC Locale and View Distance
* Changed packet: 0x09 Respawn
* Removed packet: 0x32 Map Column Allocation
* This items are not enchantable in this version: 0x103, 0x105, 0x15A, 0x167, 0x10C, 0x10D, 0x10E, 0x10F, 0x122, 0x110, 0x111, 0x112, 0x113, 0x123, 0x10B, 0x100, 0x101, 0x102, 0x124, 0x114, 0x115, 0x116, 0x117, 0x125, 0x11B, 0x11C, 0x11D, 0x11E, 0x126

=== 2012-04-26 ===
* 12w17a
* Protocol version is now 31
* RC4 based encryption, described in [[Protocol Encryption]]
* Changed packet: 0x01 Login Request
* Changed packet: 0x02 Handshake
* Changed packet: 0xCC Locale and View Distance
* Changed packet: 0xCA Player Abilities 
* New packet: 0xFC Encryption Key Response
* New packet: 0xFD Encryption Key Request
* New Item: Book & Quills (0x182) is enchantable
* New Item: Written Book (0x183) is enchantable

=== 2012-04-19 ===
* 12w16a
* Protocol version is now 30
* New packet: 0xCB Tab-complete
* New packet: 0xCC Locale and View Distance

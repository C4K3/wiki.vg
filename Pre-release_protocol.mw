This page documents the changes from the [[Protocol|last stable Minecraft release]] (currently 1.1) to the current pre-release

== New packets ==

=== Entity Head Look (0x23) ===

Changes the direction an entity's head is facing.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x23
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | Head Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | 
| class="col3" | Head yaw in steps of 2π/256
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 6 bytes
|}

=== Update Tile Entity (0x84) ===

Essentially a block update on a tile entity.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="7" | 0x84
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | short
| class="col2 centeralign" | 
| class="col3" | 
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | 
| class="col3" | 
|- class="row4"
| class="col0 centeralign" | Action
| class="col1 centeralign" | byte
| class="col2 centeralign" | 
| class="col3" | The type of update to perform
|- class="row5"
| class="col0 centeralign" | Custom 1
| class="col1 centeralign" | int
| class="col2 centeralign" | 
| class="col3" | Varies
|- class="row6"
| class="col0 centeralign" | Custom 2
| class="col1 centeralign" | int
| class="col2 centeralign" | 
| class="col3" | Varies
|- class="row7"
| class="col0 centeralign" | Custom 3
| class="col1 centeralign" | int
| class="col2 centeralign" | 
| class="col3" | Varies
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 24 bytes
|}

==== Actions ====

* '''1''': Set mob displayed inside a mob spawner. Custom 1 contains the [[Entities#Mobs|mob type]]

== Changed packets ==

=== [[Protocol#Login_Request_.280x01.29|Login Request (0x01)]] ===

World height was changed to an integer. -- Please verify, I found world height to still be a byte but set to 0.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="9" | 0x01
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1298</code>
| class="col4" | The Players Entity ID
|- class="row2"
| class="col0 centeralign" | Not used
| class="col1 centeralign" | string
| class="col2 centeralign" | (empty string)
| class="col3" | Not used
|- class="row3"
| class="col0 centeralign" | Map Seed
| class="col1 centeralign" | long
| class="col2 centeralign" | <code>971768181197178410</code>
| class="col3" | The server's map seed. Must be sent in respawn packets by the client.
|- class="row4"
| class="col0 centeralign" | Level Type
| class="col1 centeralign" | string
| class="col2 centeralign" | DEFAULT
| class="col3" | DEFAULT or SUPERFLAT; level-type in server.properties
|- class="row5"
| class="col0 centeralign" | Server mode
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>0</code>
| class="col3" | 0 for survival, 1 for creative
|- class="row6"
| class="col0 centeralign" | Dimension
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | <code>-1</code>: The Nether, <code>0</code>: The Overworld, <code>1</code>: The End
|- class="row7"
| class="col0 centeralign" | Difficulty
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>1</code>
| class="col3" | <code>0</code> thru <code>3</code> for Peaceful, Easy, Normal, Hard
|- class="row8"
| class="col0 centeralign" | World height
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>256</code>
| class="col3" | Defaults to <code>256</code>
|- class="row9"
| class="col0 centeralign" | Max players
| class="col1 centeralign" | unsigned byte
| class="col2 centeralign" | <code>8</code>
| class="col3" | Used by the client to draw the player list
|- class="row10"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 28 bytes + length of strings
|}

=== [[Protocol#Handshake_.280x02.29|Handshake (0x02)]] ===

==== Client to Server ====

The hostname and port were added to this packet, most likely to allow [http://en.wikipedia.org/wiki/Virtual_hosting virtual hosting] .([https://github.com/sadimusi/MVHP/blob/master/mvhp.py sample implementation])

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x02
| class="col1 centeralign" | UsernameAndHost
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>TkTech;localhost:25565</code>
| class="col4" | The username of the player attempting to connect, and the host he is connecting to, seperated by a semicolon.
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes + length of strings
|}

=== [[Protocol#Respawn_.280x09.29|Respawn (0x09)]] ===

Dimension is now an int, slightly bizarrely. I wonder if they intended to make world_height an int, in line with 0x01 login?

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x09
| class="col1 centeralign" | Dimension
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1</code>
| class="col4" | <code>-1</code>: The Nether, <code>0</code>: The Overworld, <code>1</code>: The End
|- class="row2"
| class="col1 centeralign" | Difficulty
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | <code>0</code> thru <code>3</code> for Peaceful, Easy, Normal, Hard. <code>1</code> is always sent c->s
|- class="row2"
| class="col1 centeralign" | Creative mode
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | <code>0</code> for survival, <code>1</code> for creative.
|- class="row1"
| class="col1 centeralign" | World height
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>128</code>
| class="col4" | Defaults to <code>128</code>
|- class="row1"
| class="col1 centeralign" | Map Seed
| class="col2 centeralign" | long
| class="col3 centeralign" | <code>-3815848935435401459</code>
| class="col4" | The server's map seed.
|- class="row1"
| class="col1 centeralign" | Level Type
| class="col2 centeralign" | string
| class="col3 centeralign" | DEFAULT
| class="col4" | See 0x01 login
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 19 bytes + length of string
|}

=== [[Protocol#Mob_Spawn_.280x18.29|Mob Spawn (0x18)]] ===

New byte field: head yaw

This needs confirmation!

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="9" | 0x18
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>446</code>
| class="col4" | Entity ID
|- class="row2"
| class="col0 centeralign" | Type
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>91</code>
| class="col3" | The type of mob. See [[Entities#Mobs]]
|- class="row3"
| class="col0 centeralign" | X
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>13366</code>
| class="col3" | The Absolute Integer X Position of the object
|- class="row4"
| class="col0 centeralign" | Y
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>2176</code>
| class="col3" | The Absolute Integer Y Position of the object
|- class="row5"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>1680</code>
| class="col3" | The Absolute Integer Z Position of the object
|- class="row6"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>-27</code>
| class="col3" | The yaw in steps of 2π/256
|- class="row7"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The pitch in steps of 2π/256
|- class="row8"
| class="col0 centeralign" | '''Head Yaw'''
| class="col1 centeralign" | byte
| class="col2 centeralign" | 
| class="col3" | Head yaw in steps of 2π/256
|- class="row9"
| class="col0 centeralign" | Metadata
| class="col1 centeralign" | Metadata
| class="col2 centeralign" | <code>127</code>
| class="col3" | Varies by mob, see [[Entities]]
|- class="row10"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 21 bytes + Metadata (at least 1)
|}

=== [[Protocol#Map_Chunk_.280x33.29|Map Chunk (0x33)]] ===

This is currently a ''best guess''

Here's a packet capture: https://gist.github.com/1835702

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="8" | 0x33
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | Chunk X Coordinate (x16 to get true X) '''Confirmed!'''
|- class="row2"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" |
| class="col3" | Chunk Z Coordinate (x16 to get true Z) '''Confirmed!'''
|- class="row3"
| class="col0 centeralign" | Complete
| class="col1 centeralign" | boolean
| class="col2 centeralign" | 
| class="col3" | (unconfirmed) If true all vertical chunks not included is assumed to be air. Seems to be True when Unknown Short #1 is 2^n - 1
|- class="row4"
| class="col0 centeralign" | Height bit map
| class="col1 centeralign" | short
| class="col2 centeralign" | 15
| class="col3" | Bitmask with 1 for every chunk which data follows in Compressed data.
|- class="row5"
| class="col0 centeralign" | Unknown Short #2
| class="col1 centeralign" | short
| class="col2 centeralign" | 0
| class="col3" | I've only seen <code>0</code>
|- class="row6"
| class="col0 centeralign" | Compressed size
| class="col1 centeralign" | int
| class="col2 centeralign" | 
| class="col3" | Size of compressed region data. '''Confirmed!'''
|- class="row7"
| class="col0 centeralign" | Unknown Int
| class="col1 centeralign" | int
| class="col2 centeralign" | 0
| class="col3" | Doesn't seem to be used by the client. Always 0. I expect this is Mod API stuff.
|- class="row8"
| class="col0 centeralign" | Compressed data
| class="col1 centeralign" | unsigned byte array
| class="col2 centeralign" | <code>…</code>
| class="col3" | The region data is compressed using ZLib Deflate function. '''Confirmed!'''
|- class="row9"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 22 bytes + Compressed chunk size
|}

(Unconfirmed, guess) '''Height bit map''' where each bit indicates which vertical chunk it contain.
Counting the number of binary 1's indicate the number of vertical chunks(16x16x16) of the uncompressed

N = number of vertical chunks.

{| class="wikitable"
|- class="row0"
! class="col0" | Size
! class="col1" | Name
! class="col2" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 16*16*16*N
| class="col1 centeralign" | Block ID
| class="col2" | 7(bedrock)
| class="col4" | 1 byte per block.
|- class="row2"
| class="col0 centeralign" | 16*16*16*N
| class="col1 centeralign" | Add Block ID
| class="col2" | 0
| class="col4" | (unconfirmed)1 byte per block.
|- class="row2"
| class="col0 centeralign" | 16*16*8*N
| class="col1 centeralign" | Unknown
| class="col2" | 255
| class="col3" | (unconfirmed) Biome? Skylight?
|- class="row9"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="3" | 16*16*16*N*2 + 16*16*8*N bytes (uncompressed)
|}

That would make the boolean mean "Contiguous?". Possibly a memory optimisation? The bit shifting in the chunk loading code makes this idea seem likely to me - good thought! [[User:Barneygale|Barneygale]] 08:37, 15 February 2012 (MST)
: It could be an indicator that non included chunks are assumed to be empty/air, a guess --[[User:Ceiru|Ceiru]] 09:14, 15 February 2012 (MST)

:(edit conflict, lol)
:The first part of the uncompressed data is the chunk block ids (I think), which as you say are loaded based on the bitmask. Each chunk is 4096 bytes. 
:Three near identical loops follow, iterating over the column of chunks. They all set the .a property of a qi - and I'm not sure what this is. I'm guessing it's a handler for chunk attributes like metadata, skylight and blocklight.
:Next there's a loop that bears a striking similarity to the first, but uses the second short as a bitmask. For each chunk, if it's mentioned in the mask, it will initialise or use the existing .e (another qi) of that chunk and copy data to it. Here's where the bool comes in. If the chunks are contiguous, and the current chunk is both loaded and has .e set, it will set .e to null.
:Then there's some chunk initialisation stuff I don't understand.

== Other changes ==

Protocol version is now 27.

== Protocol History ==

=== 2012-02-15 ===
* 12w07a
* Protocol version is now 27
* Updated packets: 0x01, 0x09, 0x33

=== 2012-02-09 ===
* 12w06a
* Protocol version is now 25
* New packet: 0x84

=== 2012-01-26 ===
* 12w04a
* Protocol version has not been changed
* Handshake Packet by client (0x02) now contains the server host and port
* Window Open Packet (0x64): WindowTitle is now longer than accepted by older clients. Contains a keyword such as "container.furnace"

=== 2012-01-19 ===
* 12w03a
* Protocol version is now 24
* New packet: 0x23
* MobSpawn: new field, 1 byte inserted before metadata.

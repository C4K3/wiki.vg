==Negotiation==
Extended clients should use magic number of <code>0x42</code> for the padding byte of the [[Classic_Protocol#Client_.E2.86.92_Server_packets|Player Identification packet]]. All standard/non-extended clients pad this packet with <code>0x00</code>, so extended servers should be able to easily notice extended clients. All standard/non-extended servers will ignore the modified padding byte, preserving compatibility.

When the server sees that padding byte is <code>0x42</code>, it should immediately reply with an '''ExtInfo''' packet, followed by zero or more '''ExtEntry''' packets, and await a response ('''ExtInfo''' packet) from the client.

After the client has sent its identification packet, it should await a response. If the server responds with an '''ExtInfo''' packet, it should parse it and any '''ExtEntry''' packets that follow. Client should then compare its locally-supported set of extensions with the list of extensions provided by the server, and find an intersection of these sets. These are the mutually-supported extensions.

At this time, client should send '''ExtInfo''' packet of its own, followed by the list of mutually-supported extensions. After receiving the last of '''ExtEntry''' packets, server should activate the mutually-supported extensions, and resume normal login procedure.

:<h3>ExtInfo Packet</h3>
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x10
| class="col1 centeralign" | AppName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>MyServer</code>
| class="col4" | Client or server software name
|- class="row2"
| class="col0 centeralign" | ExtensionCount
| class="col1 centeralign" | short
| class="col2 centeralign" | 1
| class="col3" | Between 0 and 32767
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 67 bytes
|}

:<h3>ExtEntry Packet</h3>
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x11
| class="col1 centeralign" | ExtName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>MyExtension</code>
| class="col4" | Name of a supported extension
|- class="row2"
| class="col0 centeralign" | Version
| class="col1 centeralign" | int
| class="col2 centeralign" | 1
| class="col3" |
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 69 bytes
|}

==Extensions==
===ClickDistance===
:Used to extend or restrict the distance at which client may click blocks, controlled by the server. Click range is given in player-space units (32 units per block). Upon receiving a '''SetClickDistance''' packet, client should immediately apply the change.
:<h4>SetClickDistance packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x20
| class="col1 centeralign" | Distance
| class="col2 centeralign" | short
| class="col3 centeralign" | 160
| class="col4" |
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes
|}

===HeldBlock===
:Provides a way for the client to notify the server about the blocktype that it is currently holding, and for the server to change the currently-held block type. When this extension is mutually supported, client should use the ''Player ID'' field of the [[Classic_Protocol#Client_.E2.86.92_Server_packets|Position and Orientation packet]] (currently unused) to indicate which blocktype the client is currently holding.

:The server can use '''HoldThis''' packet to force the client to hold the desired block type.

:<h4>HoldThis packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x21
| class="col1 centeralign" | BlockToHold
| class="col2 centeralign" | byte
| class="col3 centeralign" | Obsidian
| class="col4" |
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}

===EmoteFix===
:This extension indicates that the client can render emotes in chat properly, without padding or suffixes that are required for vanilla client. When this extension is mutually supported, server should not pad or suffix emotes in chat. This extension does not define any new packets.

===Weather===
:'''TODO'''

===HotKey===
:This extension allowed the server to define "hotkeys" for certain actions. Keys that are not normally used by Minecraft clients can be used to trigger server-side events. The server should enumerate and name hotkeys that it intends to use, using '''SetHotKey''' packet. The client should then send '''KeyEvent''' packets any time that the hotkey is pressed. Only a specific list of keys, listed below, may be used as a hotkey. '''KeyEvent''' packets should not be sent while the player is typing in chat.

:List of keys that may be used as hotkeys: '''TODO'''

:<h4>SetHotKey packet</h4>
:''Server to Client''
:'''TODO'''

:<h4>KeyEvent packet</h4>
:''Client to Server''
:'''TODO'''

===ExtAddEntity===
:This extension augments the [[Classic_Protocol#Server_.E2.86.92_Client_packets|Spawn Player]] packet to support more players and provide more flexibility in naming of players and loading of skins.
:This extension turns PlayerID byte from a signed to an unsigned byte. It allows up to 250 players/entities to be uniquely numbered on one map (with IDs between 0 and 249). ID 250-254 are reserved for future use. ID 255 ("-1" signed) should still refer to "self."
:<h4>ExtAddEntity Packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x22
| class="col1 centeralign" | PlayerID
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>5</code>
| class="col4" | Between 0 and 249
|- class="row2"
| class="col1 centeralign" | PlayerName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Notch</code>
| class="col4" | Raw player name, without any formatting, to be used for autocompletion.
|- class="row3"
| class="col1 centeralign" | ListName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>&c[Op]Notch</code>
| class="col4" | Player name to be shown in the player list (tab-list).
|- class="row4"
| class="col1 centeralign" | InGameName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>&cNotch</code>
| class="col4" | Player name to be shown in-game, hovering above player model.
|- class="row5"
| class="col1 centeralign" | SkinName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Notch</code>
| class="col4" | Player name whose skin should be used by the client.
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 67 bytes
|}

===EnvColors===
:This extension allows server to change some of the colors used in world rendering, to give worlds unique feel (time-of-day, climate, etc).
:<h3>EnvSetColor Packet</h3>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x23
| class="col1 centeralign" | VariableToSet
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | Enumeration of environmental variables
*0 = reset everything
*1 = sky color
*2 = cloud color
*3 = fog color
*4 = diffuse light (blocks in shadow) color
*5 = sunlight (blocks in sun) color
|- class="row2"
| class="col1 centeralign" | Red
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0xF9</code>
| class="col4" |
|- class="row3"
| class="col1 centeralign" | Green
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0x3C</code>
| class="col4" |
|- class="row4"
| class="col1 centeralign" | Blue
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0x50</code>
| class="col4" |
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes
|}

==Negotiation==
Extended clients should use magic number of <code>0x42</code> for the padding byte of the [[Classic_Protocol#Client_.E2.86.92_Server_packets|Player Identification packet]]. All standard/non-extended clients pad this packet with <code>0x00</code>, so extended servers should be able to easily notice extended clients. All standard/non-extended servers will ignore the modified padding byte, preserving compatibility.

When the server sees that padding byte is <code>0x42</code>, it should immediately reply with an '''ExtInfo''' packet, followed by zero or more '''ExtEntry''' packets, and await a response ('''ExtInfo''' packet) from the client.

After the client has sent its identification packet, it should await a response. If the server responds with an '''ExtInfo''' packet, it should parse it and any '''ExtEntry''' packets that follow. Client should then compare its locally-supported set of extensions with the list of extensions provided by the server, and find an intersection of these sets. These are the mutually-supported extensions.

At this time, client should send '''ExtInfo''' packet of its own, followed by the list of mutually-supported extensions. After receiving the last of '''ExtEntry''' packets, server should activate the mutually-supported extensions, and resume normal login procedure.

:<h3>ExtInfo Packet</h3>
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x10
| class="col1 centeralign" | AppName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>MyServer</code>
| class="col4" | Client or server software name
|- class="row2"
| class="col0 centeralign" | ExtensionCount
| class="col1 centeralign" | short
| class="col2 centeralign" | 1
| class="col3" | Between 0 and 32767
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 67 bytes
|}

:<h3>ExtEntry Packet</h3>
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x11
| class="col1 centeralign" | ExtName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>MyExtension</code>
| class="col4" | Name of a supported extension
|- class="row2"
| class="col0 centeralign" | Version
| class="col1 centeralign" | int
| class="col2 centeralign" | 1
| class="col3" |
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 69 bytes
|}

==Extensions==
===ClickDistance===
:Used to extend or restrict the distance at which client may click blocks, controlled by the server. Click range is given in player-space units (32 units per block). Upon receiving a '''SetClickDistance''' packet, client should immediately apply the change.
:<h4>SetClickDistance packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x20
| class="col1 centeralign" | Distance
| class="col2 centeralign" | short
| class="col3 centeralign" | 160
| class="col4" |
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes
|}

===HeldBlock===
:Provides a way for the client to notify the server about the blocktype that it is currently holding, and for the server to change the currently-held block type. When this extension is mutually supported, client should use the ''Player ID'' field of the [[Classic_Protocol#Client_.E2.86.92_Server_packets|Position and Orientation packet]] (currently unused) to indicate which blocktype the client is currently holding.

:The server can use '''HoldThis''' packet to force the client to hold the desired block type.

:<h4>HoldThis packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x21
| class="col1 centeralign" | BlockToHold
| class="col2 centeralign" | byte
| class="col3 centeralign" | Obsidian
| class="col4" |
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}

===EmoteFix===
:This extension indicates that the client can render emotes in chat properly, without padding or suffixes that are required for vanilla client. When this extension is mutually supported, server should not pad or suffix emotes in chat. This extension does not define any new packets.

===TextHotKey===
:This extension allows the server to define "hotkeys" for certain commands. The server should send a definition of each hotkey ('''SetTextHotKey''' packet) once per connection. Client should not try to persist previously-defined hotkeys between sessions. When a defined hotkey is activated by the user, client should open up a text prompt and type in contents of the "Action" field. A newline character ("\n") in the ''Action'' field indicates that whatever is currently typed-in should be sent to the server. If ''Action'' does not end with a newline, text prompt should be left open, for the user to complete.

:<h4>SetTextHotKey packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x22
| class="col1 centeralign" | Action
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>/Copy </code>
| class="col4" | Text to type in
|- class="row2"
| class="col1 centeralign" | KeyCode
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>113</code>
| class="col4" | [http://wiki.libsdl.org/moin.cgi/SDLKeycodeLookup SDL keycode] of the key
|- class="row3"
| class="col1 centeralign" | KeyMods
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4" | Key modifier flags, may be combined:
* 0 = None
* 1 = Ctrl
* 2 = Shift
* 4 = Alt
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 70 bytes
|}

===ExtPlayerList===
:This extension augments the [[Classic_Protocol#Server_.E2.86.92_Client_packets|Spawn Player]] packet to support more players and provide more flexibility in naming of players and loading of skins, autocompletion, and player tab-list display. It also turns PlayerID byte from a signed to an unsigned, allowing up to 250 players/entities to be uniquely numbered on one map). IDs 0-254 should be used to identify other players. ID 255 ("-1" signed) should still refer to "self."

:This extension separates tracking of entities from tracking of names, to allow listing and autocompleting names of players on worlds/maps other than client's own. It also allows organizing player names into groups, making the player tab-list easier to read.

:<h4>Client Behavior</h4>
:When '''ExtAddPlayerName''' packet is received for an unrecognized ''PlayerID'', a new entry should be added to the autocompletion list and player tab-list. When receiving '''ExtAddPlayerName''' packet for an already-listed ''PlayerID'', client should just update ''ListName'', ''GroupName'', and ''GroupRank''.

:Player names should be grouped by ''GroupName'' in the player tab-list. Players within a ''GroupName'' should be sorted by ''GroupRank'' (in ascending order). Players within the same ''GroupName'' and ''GroupRank'' should be sorted alphabetically by ''ListName''. Color codes should be either drawn or stripped in ''ListName'', ''GroupName'', and ''InGameName''. Lists should persist when client changes worlds/maps.

:When an '''ExtAddEntity''' packet is received, it should be treated as the [[Classic_Protocol#Server_.E2.86.92_Client_packets|Spawn Player]] packet. ''InGameName'' should be shown above the player's heads in-game. Skin should be loaded from minecraft.net using the given ''SkinName'' for a player name. Client should still be ready to treat [[Classic_Protocol#Server_.E2.86.92_Client_packets|Spawn Player]] packets normally.

:When a standard [[Classic_Protocol#Server_.E2.86.92_Client_packets|Despawn Player]] packet is received, player model should be removed from a world, but player name should stay on the autocompletion list and tab-list until '''ExtRemovePlayerName''' packet is received for the ''PlayerID''.

:When '''ExtRemovePlayerName''' packet is received for a recognized ''PlayerID'', they should be removed from autocompletion list and player tab-list. If ExtAddEntity packet was used to spawn a player with the same ID, it should be despawned (treated as [[Classic_Protocol#Server_.E2.86.92_Client_packets|Despawn Player]] packet). When '''ExtRemovePlayerName''' is received for an unrecognized ''PlayerID'', no action should be taken.

:<h4>Server Behavior</h4>
:When a new player connects, '''ExtAddPlayerName''' should be sent. ''GroupName'' can be used in any way, for example to group players by map/world or rank. Server should re-send '''ExtAddPlayerName''' packet, using the identical ''PlayerName'', when player's ''ListName'', ''GroupName'', or ''GroupRank'' change. Server should reliably send an '''ExtRemovePlayerName''' when the player disconnects. Color codes are permitted in ''ListName'', ''GroupName'', and ''InGameName''.

:<h4>ExtAddPlayerName Packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x23
| class="col1 centeralign" | PlayerID
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>5</code>
| class="col4" | Between 0 and 254
|- class="row2"
| class="col1 centeralign" | PlayerName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Notch</code>
| class="col4" | Player name used for autocompletion
|- class="row3"
| class="col1 centeralign" | ListName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>&c[Op]Notch</code>
| class="col4" |
|- class="row4"
| class="col1 centeralign" | GroupName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Staff</code>
| class="col4" |
|- class="row5"
| class="col1 centeralign" | GroupRank
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4" | Rank of a player within the group.
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 193 bytes
|}

:<h4>ExtAddEntity Packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x24
| class="col1 centeralign" | PlayerID
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>5</code>
| class="col4" | Between 0 and 249
|- class="row2"
| class="col1 centeralign" | InGameName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>&cNotch</code>
| class="col4" | Player name to be shown in-game, hovering above player model.
|- class="row3"
| class="col1 centeralign" | SkinName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Notch</code>
| class="col4" | Player name whose skin should be used by the client.
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 258 bytes
|}

:<h4>ExtRemovePlayerName Packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x25
| class="col1 centeralign" | PlayerName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Notch</code>
| class="col4" | Matches PlayerName of the ExtAddPlayerName packet
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 65 bytes
|}

===EnvColors===
:This extension allows server to change some of the colors used in world rendering, to give worlds unique feel (time-of-day, climate, etc).
:<h4>EnvSetColor Packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x26
| class="col1 centeralign" | VariableToSet
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | Enumeration of environmental variables
*0 = reset everything
*1 = sky color
*2 = cloud color
*3 = fog color
*4 = diffuse light (blocks in shadow) color
*5 = sunlight (blocks in sun) color
|- class="row2"
| class="col1 centeralign" | Red
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0xF9</code>
| class="col4" |
|- class="row3"
| class="col1 centeralign" | Green
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0x3C</code>
| class="col4" |
|- class="row4"
| class="col1 centeralign" | Blue
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0x50</code>
| class="col4" |
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes
|}

===ExtPlayer===
:Should be sent by the server after a Spawn Player packet, to identify other players using clients that support the extended protocol.
:<h4>ExtPlayer packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x30
| class="col1 centeralign" | PlayerID
| class="col2 centeralign" | byte
| class="col3 centeralign" | 5
| class="col4" |
|- class="row2"
| class="col0 centeralign" | AppName
| class="col1 centeralign" | string
| class="col2 centeralign" | <code>MyClient</code>
| class="col3" |
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 66 bytes
|}

People very, very often have questions regarding the Minecraft Modern [[Protocol]], so we'll try to address some of the most common ones on this document. If you're still having trouble, join us on IRC, channel #mcdevs on irc.freenode.net.

===Is the protocol documentation complete?===
<blockquote>
Depending on your definition, '''yes'''! All packet types are known and their layout documented. Some finer details are missing, but everything you need to make functional programs is present. We [[MC-Ver|have a script]] that monitors for new versions of the client and notifies us, allowing us to quickly document new packets.
</blockquote>

===What's the normal login sequence for a client?===

See [[Authentication]] for communication with minecraft.net

<blockquote>
The recommended login sequence looks like this, where C is the client and S is the server:<br /><br />

#Client connects to server
#'''C->S''' 0x02 handshake
#'''S->C''' 0xFD encryption request - server sends its public key and 4 random bytes
#Client generates symmetric key (shared secret)
#Client authenticates via session.minecraft.net
#Client encrypts these 4 bytes with the servers public key.
#'''C->S''' 0xFC encryption response - client encrypts shared secret with server's public key and sends along with encrypted 4 bytes
#Server checks that the encrypted bytes match
#Server decrypts shared secret with its private key
#Server checks player authenticity via session.minecraft.net
#'''S->C''' 0xFC encryption response - empty payload meaning two zero length byte arrays and two zero shorts
#Server enables AES stream encryption
#Client enables AES stream encryption
#'''C->S''' 0xCD - Payload of 0 (byte)
#'''S->C''' : Either kicks (invalid login) or sends a login response
#'''S->C''' : Sends chunks and entities
#'''S->C''' : Sends spawn position
#'''S->C''' : Sends inventory [Need to verify this since inventory changed] (beta 1.1_02: looks like Window items with type=0, then a Set slot with window id = -1 and slot = -1)
#'''S->C''' : Tell the client they're ready to spawn by sending a position + look packet. '''Note''': The stance and Y should be swapped when the server sends it to the client (See [[protocol#player_position_look_0x0d|Protocol Page]])!
#'''C->S''' : Sends a position + look packet to confirm the spawn position, with the stance and Y swapped back to the correct positions
</blockquote>

===I think I've done everything right, but…===

====…my player isn't spawning!====
<blockquote>
After sending the common-sense packets ([[protocol#handshake_0x02|Handshake]], [[protocol#login_request_0x01|Login]], [[protocol#player_inventory_0x05|Inventory]], [[protocol#spawn_position_0x06|Compass]] and [[protocol#map_chunk_0x33|Chunks]]) you need to finally send the player their [[protocol#player_position_look_0x0d|initial position]] for them to leave the "Loading Map" screen.
</blockquote>

'''Note that if the following steps are taken, a Minecraft client will spawn the player:'''

1) Do Handshake (See [[Protocol_Encryption|Protocol Encryption]])<br />
2) Send [[protocol#spawn_position_0x06|Spawn Position]] PDU<br />
3) Send [[protocol#player_position_look_0x0d|Player Position and Look]] PDU<br />

While the above steps are sufficient for Minecraft 1.4.5, it is good form to send PDUs that inform the client about the world around the player before allowing the player to spawn.

====…my client isn't receiving complete map chunks!====
''Main article: [[How to Write a Client]]''
<blockquote>
The standard Minecraft server sends full chunks only when your client is sending player status update packets (any of [[protocol#Player (0x0A)|Player (0x0A)]] through [[protocol#Player Position & Look (0x0D)|Player Position & Look (0x0D)]]).
</blockquote>

====…all connecting clients spasm and jerk uncontrollably!====
<blockquote>
For newer clients, your server needs to send 49 chunks ahead of time, not just one. Send a 7x7 square of chunks, centered on the connecting client's position, '''before''' spawning them.
</blockquote>

[[Category:Protocol Details]]
[[Category:Minecraft Modern]]

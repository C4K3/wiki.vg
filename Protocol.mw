This page presents a dissection of the new [http://minecraft.net/game/ Minecraft Beta] protocol.  Credit goes to the Great Old Ones, and the citizens of [irc://irc.freenode.net/#mcdevs <nowiki>#mcdevs</nowiki>] who helped by providing packet dumps and insight. If you're having trouble, check out the [[Protocol_FAQ|FAQ]].

'''Note:''' While you may use the contents of this page without restriction to create servers, clients, bots, etc… you still need to provide the attribution above if you copy any of the contents of this page for publication elsewhere.

== Data Types ==

All types in Java (and as such Minecraft) are [http://en.wikipedia.org/wiki/Endianness#Big-endian big-endian], that is, the most significant byte comes first. The majority of everyday computers are little endian, and using most programming languages will require converting big endian values to little endian.

{| class="wikitable"
|- class="row0"
| class="col0" |
! class="col1" | Size
! class="col2" | Range
! class="col3" | Notes
|- class="row1"
! class="col0 centeralign" | byte
| class="col1 centeralign" | 1
| class="col2" | -128 to 127
| class="col3" | Signed, two's complement
|- class="row2"
! class="col0 centeralign" | short
| class="col1 centeralign" | 2
| class="col2" | -32768 to 32767
| class="col3" | Signed, two's complement
|- class="row3"
! class="col0 centeralign" | int
| class="col1 centeralign" | 4
| class="col2" | -2147483648 to 2147483647
| class="col3" | Signed, two's complement
|- class="row4"
! class="col0 centeralign" | long
| class="col1 centeralign" | 8
| class="col2" | -9223372036854775808 to 9223372036854775807
| class="col3" | Signed, two's complement
|- class="row5"
! class="col0 centeralign" | float
| class="col1 centeralign" | 4
| class="col2" |
See [http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.2.3 this]
| class="col3" | Single-precision 32-bit IEEE 754 floating point
|- class="row6"
! class="col0 centeralign" | double
| class="col1 centeralign" | 8
| class="col2" |
See [http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.2.3 this]
| class="col3" | Double-precision 64-bit IEEE 754 floating point
|- class="row7"
! class="col0 centeralign" | string
| class="col1 centeralign" | …
| class="col2" | N/A
| class="col3" | UTF-8 string. Prefixed by a short containing the length of the string
|- class="row8"
! class="col0 centeralign" | bool
| class="col1 centeralign" | 1
| class="col2" | 0 or 1
| class="col3" | Value can be either True (0x01) or False (0x00)
|- class="row9"
! class="col0 centeralign" | Metadata
| class="col1 centeralign" | [Unknown]
| class="col2" | See below
| class="Col3" | See below
|}

=== Metadata ===

The Metadata type provides extra information about an entity, such as sheep color.  Metadata was introduced in Beta 1.2.  Currently, it takes the following form:

  let x = 0 of type byte
  while (x = read byte from stream) does not equal 127:
      select based on value of (x >> 5):
          case 0: read byte from stream
          case 1: read short from stream
          case 2: read int from stream
          case 3: read float from stream
          case 4: read string from stream
          case 5: read short, byte, short from stream
      end select
  end while
The last 5 bits of x (x & 0x1F) are either an index or bitmask.  Currently, only "byte" type metadata has been seen from the server.

== Terminology ==

This is a fairly lengthy page, and to make it more readable certain terminology must be understood. Terms used on this page and their definition are provided below.

{| class="wikitable"
|- class="row0"
| class="col0" |
! class="col1" | Definition
|- class="row1"
! class="col0 centeralign" | Player
| class="col1" | When used in in the singular, Player always refers to the client connected to the server
|- class="row2"
! class="col0 centeralign" | Entity
| class="col1" | Entity refers to any item, player or mob in the world. This definition is subject to change as Notch extends the protocol
|- class="row3"
! class="col0 centeralign" | EID
| class="col1" | An EID - or Entity ID - is a unique 4-byte integer used to identify a specific entity
|- class="row4"
! class="col0 centeralign" | XYZ
| class="col1" | In this document, the axis names are the same as those used by Notch. Y is always the upwards coordinate, while X and Z are parallel to the ground
|- class="row5"
! class="col0 centeralign" | MOTD
| class="col1" | Message Of The Day
|}

== Units of Measurement ==

There are several different units of measurement used in the protocol depending on what is being described. For example, it wouldn't make much sense to send the position of a block (which is a constant multiple of 32) in a floating point double.

A block represents 1 meter x 1 meter x 1 meter. There are 32 pixels per meter, and chunks are 16m x 128m x 16m.

{| class="wikitable"
|- class="row0"
| class="col0" |
! class="col1 centeralign" | Type
! class="col2" | Represents
|- class="row1"
! class="col0" | Absolute
| class="col1 centeralign" | double
| class="col2" | Represents an objects '''exact''' location in the world, specified in block coordinates.
|- class="row2"
! class="col0" | Absolute Integer
| class="col1 centeralign" | int
| class="col2" | Represents an objects '''approximate''' location in the world, specified in pixels. <br /> This is the Absolute position cast to an integer, thus losing precision.
|- class="row3"
! class="col0" | Block
| class="col1 centeralign" | int '''or''' byte
| class="col2" | Represents a blocks '''exact''' location in the world. Block = Absolute / 32.
|- class="row4"
! class="col0" | Chunk
| class="col1 centeralign" | int '''or''' short
| class="col2" | Represents the '''exact''' position of a chunk. Chunk = Block / 16.
|}

== Packets ==

All packets begin with a single "Packet ID" byte.  Listed packet size includes this byte.  Packets are either "server to client", "client to server", or both.  If not specified, assume that the packet can be sent both ways.  There is no "length" field; for variable length packets, you must parse to the end to determine the length.

=== Keep Alive (0x00) ===

This packet may be sent to keep the connection alive, or may be a relic of UDP testing. No one is really sure. What we do know is that the Beta server will disconnect a client if it doesn't receive at least one packet before 1200 in-game ticks, and the Beta client will time out the connection under the same conditions.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
|- class="row1"
| class="col0 centeralign" | 0x00
|}

=== Login Request (0x01) ===

==== Client to Server ====

Sent by the client after the handshake to finish logging in. If the version is outdated or any field is invalid, the server will disconnect the client with a [[#Disconnect.2FKick_.280xFF.29|kick]]. If the client is started in offline mode, the player's username will default to <code>Player</code>, making LAN play with more than one player impossible (without authenticating) as the server will prevent multiple users with the same name.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x01
| class="col1 centeralign" | Protocol Version
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>8</code>
| class="col4" | The latest version of the protocol is 8
|- class="row2"
| class="col0 centeralign" | Username
| class="col1 centeralign" | string
| class="col2 centeralign" | <code>TkTech</code>
| class="col3" | The name of the user attempting to login
|- class="row3"
| class="col0 centeralign" | Password
| class="col1 centeralign" | string
| class="col2 centeralign" | <code>Password</code>
| class="col3" | Used to login to password-protected servers
|- class="row4"
| class="col0 centeralign" | Map Seed
| class="col1 centeralign" | long
| class="col2 centeralign" | <code>0</code>
| class="col3" | This value is not required for the client
|- class="row5"
| class="col0 centeralign" | Dimension
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | This value is not required for the client
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 18 bytes + length of strings
|}

==== Server to Client ====

Sent by the server if it accepts the clients [[#Login_Request_.280x01.29|login request]]. If it didn't, it'll send a [[#Disconnect.2FKick_.280xFF.29|kick]] instead.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x01
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1298</code>
| class="col4" | The Players Entity ID
|- class="row2"
| class="col0 centeralign" | Unknown
| class="col1 centeralign" | string
| class="col2 centeralign" | n/a
| class="col3" | Not yet used (Possibly the server name?)
|- class="row3"
| class="col0 centeralign" | Unknown
| class="col1 centeralign" | string
| class="col2 centeralign" | n/a
| class="col3" | Not yet used (Possibly the MOTD? )
|- class="row4"
| class="col0 centeralign" | Map Seed
| class="col1 centeralign" | long
| class="col2 centeralign" | <code>971768181197178410</code>
| class="col3" | Used for map generation (Possibly biome determination?)
|- class="row5"
| class="col0 centeralign" | Dimension
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | Used for specifying the players dimension -1 for hell, 0 otherwise
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 18 bytes + length of strings
|}

=== Handshake (0x02) ===

==== Client to Server ====

This is the first packet sent when the client connects and is used for [[Authentication]].

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x02
| class="col1 centeralign" | Username
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>TkTech</code>
| class="col4" | The username of the player attempting to connect
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes + length of strings
|}

==== Server to Client ====

This is the first packet sent when the client connects and is used for [[Authentication]]. If the hash is '-', then the client continues without doing name authentication. If the hash is a '+', the client sends the server password in the [[#Login_Request_.280x01.29|login request]]. (Note that this hash, as of the latest version of the Beta server, is a randomly generated long in hexadecimal form, and has nothing to do with the client or the server he is connected to)

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x02
| class="col1 centeralign" | Connection Hash
| class="col2 centeralign" | string
| class="col3 rightalign" | <code>2e66f1dc032ab5f0</code>
| class="col4" | A unique, per-connection hash, '''or''' '-', '''or''' '+'
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes + length of strings
|}

=== Chat Message (0x03) ===

A message from the client to the server, or the server to the client. The actual handling of chat messages is variable and depends on the server and client; there are no ''de facto'' standards yet.

The Alpha server will check the message to see if it begins with a '/'. If it doesn't, the username of the sender is prepended and sent to all other clients (including the original sender). If it does, the server assumes it to be a command and attempts to process it. A message longer than 100 characters will cause the server to kick the client. This limits the chat message packet length to 103 bytes. Note that this limit does not apply to incoming chat messages as the server may have prepended other information, not limited to, but usually including, a username.

For more information, see [[Chat]].

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x03
| class="col1 centeralign" | Message
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>&lt;Bob&gt; Hello World!</code>
| class="col4" | User input '''must''' be sanitized server-side
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes + length of strings
|}

=== Time Update (0x04) ===

'''Server to Client only'''

The default SMP server increments the time by <code>20</code> every second.
The current time ranges from 0 to 24000.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x04
| class="col1 centeralign" | Time
| class="col2 centeralign" | long
| class="col3 centeralign" | <code></code>
| class="col4 centeralign" | The world (or region) time in minutes
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 9 bytes
|}

=== Entity Equipment (0x05) ===

After each "Named Entity Spawn", there will be five of these packets for the equipped item and armor.  If there are changes in visible equipment, another one of these is sent.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x05
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | 0x00010643
| class="col4" | Named Entity ID
|- class="row2"
| class="col0 centeralign" | Slot
| class="col1 centeralign" | short
| class="col2 centeralign" | 4
| class="col3" | Equipment slot: 0=held, 1-4=armor slot 
|- class="row3"
| class="col0 centeralign" | Item ID
| class="col1 centeralign" | short
| class="col2 centeralign" | -1
| class="col3" | Equipped item (-1 for empty slot)
|- class="row4"
| class="col0 centeralign" | ???
| class="col1 centeralign" | short
| class="col2 centeralign" | 
| class="col3" | Damage?
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes
|}

=== Spawn Position (0x06) ===

'''Server to Client only'''

Sent by the server after login to specify the coordinates of the spawn point (the point at which players spawn at, and which the compass points to). It can be sent at any time to update the point compasses point at.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x06
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>117</code>
| class="col4 centeralign" | Spawn X in block coordinates
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>70</code>
| class="col3 centeralign" | Spawn Y in block coordinates
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>-46</code>
| class="col3 centeralign" | Spawn Z in block coordinates
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 13 bytes
|}

=== Use Entity? (0x07) ===
This packet is new to version 4 of the protocol, and is believed to be Use Entity.

(This packet data values are not fully verified)

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x07
| class="col1 centeralign" | User
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1298</code>
| class="col4" |
The entity of the player (ignored by the server)
|- class="row2"
| class="col0 centeralign" | Target
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>1805</code>
| class="col3" |
The entity the player is interacting with
|- class="row3"
| class="col0 centeralign" | Left-click?
| class="col1 centeralign" | bool
| class="col2 centeralign" | <code>true</code>
| class="col3" |
Seems to be <code>true</code> when the player is pointing at an entity and left-clicking and <code>false</code> when right-clicking.
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 10 bytes
|}

=== Update Health (0x08) ===

'''Server to Client only'''

Sent by the server to update/set the health of the player it is sent to. Added in protocol version 5.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x08
| class="col1 centeralign" | Health
| class="col2 centeralign" | short
| class="col3 centeralign" | 20
| class="col4" | 0 = dead, 20 = full HP
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes
|}

=== Respawn (0x09) ===

Sent by the client when the player presses the "Respawn" button after dying. The server then teleports the user to the spawn point, and sends a respawn packet in response.  The client will not leave the respawn screen until it receives a respawn packet.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
|- class="row1"
| class="col0 centeralign" | 0x09
|- class="row2"
! class="col0" | Total Size:  1 bytes
|}

=== Player (0x0A) ===

'''Client to Server only'''

This packet is used to identify the state of the client, with the idea being to send one each game-tick to detect speed hackers. Notch will be optimizing/removing this in the future. This packet was previously referred to as Flying

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x0A
| class="col1 centeralign" | On Ground
| class="col2 centeralign" | bool
| class="col3 centeralign" | <code>1</code>
| class="col4" | <code>True</code> if the client is on the ground, <code>False</code> otherwise
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}

=== Player Position (0x0B) ===

'''Client to Server''' (player-controlled movement).

Updates the players XYZ position on the server. If <code>Stance - Y</code> is less than <code>0.1</code> or greater than <code>1.65</code>, the stance is illegal and the client will be kicked with the message “Illegal Stance”.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x0B
| class="col1 centeralign" | X
| class="col2 centeralign" | double
| class="col3 rightalign" | <code>102.809</code>
| class="col4" | Absolute position
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>70.00</code>
| class="col3" | Absolute position
|- class="row3"
| class="col0 centeralign" | Stance
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>71.62</code>
| class="col3" | Used to modify the players bounding box when going up stairs, crouching, etc…
|- class="row4"
| class="col0 centeralign" | Z
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>68.30</code>
| class="col3" | Absolute position
|- class="row5"
| class="col0 centeralign" | On Ground
| class="col1 centeralign" | bool
| class="col2 centeralign" | <code>1</code>
| class="col3" |
Derived from packet [[#Player_.280x0A.29|0x0A]]
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 34 bytes
|}

=== Player Look (0x0C) ===

'''Client to Server''' (player-controlled movement).

[[File:Minecraft-trig-yaw.png|thumb|The unit circle for yaw]]

Updates the direction the player is looking in.

Yaw is measured in degrees, and does not follow classical trigonometry rules. The unit circle of yaw on the xz-plane starts at (0, 1) and turns backwards towards (-1, 0), or in other words, it turns clockwise instead of counterclockwise. Additionally, yaw is not clamped to between 0 and 360 degrees; any number is valid, including negative numbers and numbers greater than 360.

Pitch is measured in degrees.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x0C
| class="col1 centeralign" | Yaw
| class="col2 centeralign" | float
| class="col3 centeralign" | <code>0.00</code>
| class="col4" | Absolute rotation on the X Axis, in degrees
|- class="row2"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | float
| class="col2 centeralign" | <code>0.00</code>
| class="col3" | Absolute rotation on the Y Axis, in degrees
|- class="row3"
| class="col0 centeralign" | On Ground
| class="col1 centeralign" | bool
| class="col2 centeralign" | <code>1</code>
| class="col3" |
Derived from packet [[#Player_.280x0A.29|0x0A]]
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 10 bytes
|}

=== Player Position &amp; Look (0x0D) ===

A combination of [[#Player_Look_.280x0C.29|Player Look]] and [[#Player_Position_.280x0B.29|Player position]].

==== Client to Server ====

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="7" | 0x0D
| class="col1 centeralign" | X
| class="col2 centeralign" | double
| class="col3 centeralign" | <code>6.5</code>
| class="col4" | Absolute position
|- class="row2"
| class="col0 centeralign" | Stance
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>67.240000009536743</code>
| class="col3" | Used to modify the players bounding box when going up stairs, crouching, etc…
|- class="row3"
| class="col0 centeralign" | Y
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>65.620000004768372</code>
| class="col3" | Absolute position
|- class="row4"
| class="col0 centeralign" | Z
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>7.5</code>
| class="col3" | Absolute position
|- class="row5"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | float
| class="col2 centeralign" | <code>0.0</code>
| class="col3" | Absolute rotation on the X Axis
|- class="row6"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | float
| class="col2 centeralign" | <code>0.0</code>
| class="col3" | Absolute rotation on the Y Axis
|- class="row7"
| class="col0 centeralign" | On Ground
| class="col1 centeralign" | bool
| class="col2 centeralign" | <code>0</code>
| class="col3" |
Derived from packet [[#Player_.280x0A.29|0x0A]]
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 42 bytes
|}

==== Server to Client ====

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="7" | 0x0D
| class="col1 centeralign" | X
| class="col2 centeralign" | double
| class="col3 centeralign" | <code>6.5</code>
| class="col4" | Absolute position
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>65.620000004768372</code>
| class="col3" | Absolute position
|- class="row3"
| class="col0 centeralign" | Stance
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>67.240000009536743</code>
| class="col3" | Used to modify the players bounding box when going up stairs, crouching, etc…
|- class="row4"
| class="col0 centeralign" | Z
| class="col1 centeralign" | double
| class="col2 centeralign" | <code>7.5</code>
| class="col3" | Absolute position
|- class="row5"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | float
| class="col2 centeralign" | <code>0.0</code>
| class="col3" | Absolute rotation on the X Axis
|- class="row6"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | float
| class="col2 centeralign" | <code>0.0</code>
| class="col3" | Absolute rotation on the Y Axis
|- class="row7"
| class="col0 centeralign" | On Ground
| class="col1 centeralign" | bool
| class="col2 centeralign" | <code>0</code>
| class="col3" |
Derived from packet [[#Player_.280x0A.29|0x0A]]
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 42 bytes
|}

[[File:Icon_exclaim.gif|:!:]] This packet differs from client Player Position &amp; Look packet, the Stance and Y are sent in a different order, however because of the different order this is sent the client will actually use the X,Y,Stance,Z client layout.

[[File:Icon_exclaim.gif|:!:]] When you connect to the official server, it will push a 0x0D packet.  If you do not immediately respond with a 0x0D (or maybe 0x0A-0x0C) packet with similar and valid information, it will have unexpected results, such as map chunks not loading and future 0x0A-0x0D packets being ignored.

=== Player Digging (0x0E) ===

Sent repeatedly as the player mines a block.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x0E
| class="col1 centeralign" | Status
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | The action the player is taking against the block (see below)
|- class="row2"
| class="col0 centeralign" | X
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>32</code>
| class="col3" | Block position
|- class="row3"
| class="col0 centeralign" | Y
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>64</code>
| class="col3" | Block position
|- class="row4"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>32</code>
| class="col3 leftalign" | Block position
|- class="row5"
| class="col0 centeralign" | Face
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>3</code>
| class="col3" | The face being hit (see below)
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 12 bytes
|}

Status can (currently) be one of four values:

{| class="wikitable"
|- class="row0"
! class="col0" | Meaning
! class="col1" | Value
|- class="row1"
| class="col0 leftalign" | Started digging
| class="col1 centeralign" | <code>0</code>
|- class="row2"
| class="col0 leftalign" | Digging
| class="col1 centeralign" | <code>1</code>
|- class="row3"
| class="col0 leftalign" | Stopped digging
| class="col1 centeralign" | <code>2</code>
|- class="row4"
| class="col0 leftalign" | Block broken
| class="col1 centeralign" | <code>3</code>
|- class="row5"
| class="col0 leftalign" | Drop item
| class="col1 centeralign" | <code>4</code>
|}

When the Status value is 4 (Drop item), the coordinates and Face are 0.

The face can be one of six values, representing the face being hit:

{| class="wikitable"
|- class="row0"
! class="col0 leftalign" | Value
| class="col1 centeralign" | 0
| class="col2 centeralign" | 1
| class="col3 centeralign" | 2
| class="col4 centeralign" | 3
| class="col5 centeralign" | 4
| class="col6 centeralign" | 5
|- class="row1"
! class="col0 leftalign" | Offset
| class="col1" | -Y
| class="col2" | +Y
| class="col3" | -Z
| class="col4" | +Z
| class="col5" | -X
| class="col6" | +X
|}

=== Player Block Placement (0x0F) ===

Sent when the player places a block or (probably) an item. The coordinates sent in this packet are actually the block being built against, which combined with the direction offset tell you where the block should be placed. This is required to correctly position furnaces, torches, etc…

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="7" | 0x0F
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>32</code>
| class="col4" | Block position
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>64</code>
| class="col3" | Block position
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>32</code>
| class="col3 leftalign" | Block position
|- class="row4"
| class="col0 centeralign" | Direction
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>3</code>
| class="col3" | The offset to use for block/item placement (see below)
|- class="row5"
| class="col0 centeralign" | Block '''or''' Item ID
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>1</code>
| class="col3" | The block or item to be placed
|- class="row6"
| class="col0 centeralign" | Amount (opt)
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>34</code>
| class="col3" | The amount of the item in the players hand
|- class="row7"
| class="col0 centeralign" | Damage (opt)
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>83</code>
| class="col3" | How much damage the item has taken
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 13 bytes or 16 bytes
|}

If the Block/ItemID field is greater than or equal to 0, then the last 2 bytes (amount and damage) are read. Otherwise, they are not read.
When 'placing' (Or more accurately, using) your empty hand, the client sends -1 as the Block/ItemID

The direction can be one of six values, representing the face the block/item is being placed against:

{| class="wikitable"
|- class="row0"
! class="col0 leftalign" | Value
| class="col1 centeralign" | 0
| class="col2 centeralign" | 1
| class="col3 centeralign" | 2
| class="col4 centeralign" | 3
| class="col5 centeralign" | 4
| class="col6 centeralign" | 5
|- class="row1"
! class="col0 leftalign" | Offset
| class="col1" | -Y
| class="col2" | +Y
| class="col3" | -Z
| class="col4" | +Z
| class="col5" | -X
| class="col6" | +X
|}

This packet has a special case where X, Y, Z, and Direction are all -1. This special packet indicates that the currently held item for the player should have its state updated.

The block or item ID corresponds to whatever the client is currently holding, and the Alpha client sends one of these packets any time a right-click is issued on a surface, so no assumptions can be made about the safety of the ID.

=== Holding Change (0x10) ===

Sent when the player changes the slot selection

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x10
| class="col1 centeralign" | Slot ID
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>1</code>
| class="col4" | The slot which the player has selected (0-8)
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes
|}

=== Animation (0x12) ===

Sent whenever an entity should change animation.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x12
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>55534</code>
| class="col4" | Player ID
|- class="row2"
| class="col0 centeralign" | Animate
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>1</code>
| class="col3" | Can be <code>0</code> (no animation), <code>1</code> (swing arm), <code>2</code> (damage animation), <code>104</code> (crouch), or <code>105</code> (uncrouch). Getting <code>102</code> somewhat often, too.
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 6 bytes
|}

=== Entity Action ??? (0x13) ===

Sent at least when crouching

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x13
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>55534</code>
| class="col4" | Player ID
|- class="row2"
| class="col0 centeralign" | Action
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>1</code>
| class="col3" | Can be <code>1</code> (crouch), or <code>2</code> (uncrouch).
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 6 bytes
|}

=== Named Entity Spawn (0x14) ===

'''Server to Client only'''

The only named entities (at the moment) are players (either real or NPC/Bot). This packet is sent by the server when a player comes into visible range, '''not''' when a player joins.

{| class="wikitable"
|- class="row0"
! class="col0 centeralign" | Packet ID
! class="col1 rightalign" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="8" | 0x14
| class="col1" | EID
| class="col2" | int
| class="col3" | <code>94453</code>
| class="col4" | Player ID
|- class="row2"
| class="col0" | Player Name
| class="col1" | string
| class="col2" | <code>Twdtwd</code>
| class="col3" |
|- class="row3"
| class="col0" | X
| class="col1" | int
| class="col2" | <code>784</code>
| class="col3" | Player X as Absolute Integer
|- class="row4"
| class="col0" | Y
| class="col1" | int
| class="col2" | <code>2131</code>
| class="col3" | Player Y as Absolute Integer
|- class="row5"
| class="col0" | Z
| class="col1" | int
| class="col2" | <code>-752</code>
| class="col3" | Player Z as Absolute Integer
|- class="row6"
| class="col0" | Rotation
| class="col1" | byte
| class="col2" | <code>0</code>
| class="col3" | Player rotation as a packed byte
|- class="row7"
| class="col0" | Pitch
| class="col1" | byte
| class="col2" | <code>0</code>
| class="col3" | Player rotation as a packed byte
|- class="row8"
| class="col0" | Current Item
| class="col1" | short
| class="col2" | <code>0</code>
| class="col3" | The item the player is currently holding
|- class="row9"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 23 bytes + length of strings
|}

=== Pickup Spawn (0x15) ===

A pickup spawn is sent by the server whenever an item on the ground (say a pickaxe thrown on the ground) comes into range of the player. It used to be sent by the client when an item is dropped from a tile (chest or furnace) or from inventory, but that is now done with the new packets for server-side inventory (see [[#Window click (0x66)|0x66]]).

It is completely acceptable for servers to ignore the EID issued by the client in this packet and instead create a new packet with a server-controlled EID when sending this packet out to clients.

{| class="wikitable"
|- class="row0"
! class="col0 centeralign" | Packet ID
! class="col1 rightalign" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="10" | 0x15
| class="col1" | EID
| class="col2" | int
| class="col3" | <code>157617</code>
| class="col4" | Unique entity ID
|- class="row2"
| class="col0" | Item
| class="col1" | short
| class="col2" | <code>4</code>
| class="col3" | The item ID
|- class="row3"
| class="col0" | Count
| class="col1" | byte
| class="col2" | <code>1</code>
| class="col3" | The number of items
|- class="row4"
| class="col0" | Damage ?
| class="col1" | short
| class="col2" | 
| class="col3" | New field in beta 1.2 update
|- class="row5"
| class="col0" | X
| class="col1" | int
| class="col2" | <code>133</code>
| class="col3" | Item X as Absolute Integer
|- class="row6"
| class="col0" | Y
| class="col1" | int
| class="col2" | <code>913</code>
| class="col3" | Item Y as Absolute Integer
|- class="row7"
| class="col0" | Z
| class="col1" | int
| class="col2" | <code>63552</code>
| class="col3" | Item Z as Absolute Integer
|- class="row8"
| class="col0" | Rotation
| class="col1" | byte
| class="col2" | <code>252</code>
| class="col3" | Item rotation as a packed byte
|- class="row9"
| class="col0" | Pitch
| class="col1" | byte
| class="col2" | <code>25</code>
| class="col3" | Item pitch as a packed byte
|- class="row10"
| class="col0" | Roll
| class="col1" | byte
| class="col2" | <code>12</code>
| class="col3" | Item roll as a packed byte
|- class="row11"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 25 bytes
|}

=== Collect Item (0x16) ===

'''Server to Client only'''

Sent by the server when someone picks up an item lying on the ground - its sole purpose appears to be the animation of the item flying towards you. It doesn't destroy the entity in the client memory ([[#Destroy_Entity_.280x1D.29|0x1D]] does that), and it doesn't add it to your inventory ([[#Window_items_.280x68.29|0x67]] does that).


{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x16
| class="col1 centeralign" | Collected EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>38</code>
| class="col4 leftalign" |
|- class="row2"
| class="col0 centeralign" | Collector EID
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>20</code>
| class="col3 leftalign" |
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 9 bytes
|}

=== Add Object/Vehicle (0x17) ===

'''Server to Client only'''

Sent by the server when an Object/Vehicle is created.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x17
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>62</code>
| class="col4" | Entity ID of the Object
|- class="row2"
| class="col0 centeralign" | Type
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>11</code>
| class="col3" | The type of object (see below)
|- class="row3"
| class="col0 centeralign" | X
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>16080</code>
| class="col3" | The Absolute Integer X Position of the object
|- class="row4"
| class="col0 centeralign" | Y
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>2299</code>
| class="col3" | The Absolute Integer Y Position of the object
|- class="row5"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>592</code>
| class="col3" | The Absolute Integer Z Position of the object
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 18 bytes
|}

Object Types

{| class="wikitable"
|- class="row0"
! class="col0" | Type ID
! class="col1" | Type Name
|- class="row1"
| class="col0" | 1
| class="col1" | Boats
|- class="row2"
| class="col0" | 10
| class="col1" | Minecart
|- class="row3"
| class="col0" | 11
| class="col1" | Storage Cart
|- class="row4"
| class="col0" | 12
| class="col1" | Powered Cart
|- class="row5"
| class="col0" | 50
| class="col1" | Activated TNT
|- class="row6"
| class="col0" | 60
| class="col1" | Arrow <!-- Player- and skeleton- fired arrows.-->
|- class="row7"
| class="col0" | 61
| class="col1" | Thrown Snowball
|- class="row8"
| class="col0" | 62
| class="col1" | Thrown Egg 
|- class="row9"
| class="col0" | 70
| class="col1" | Falling Sand
|- class="row10"
| class="col0" | 71
| class="col1" | Falling Gravel
|- class="row11"
| class="col0" | 90
| class="col1" | Fishing Float
|}

=== Mob Spawn (0x18) ===

'''Server to Client only'''

Sent by the server when a Mob Entity is Spawned

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="8" | 0x18
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>446</code>
| class="col4" | Entity ID
|- class="row2"
| class="col0 centeralign" | Type
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>91</code>
| class="col3" | The type of Mob Entity Type
|- class="row3"
| class="col0 centeralign" | X
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>13366</code>
| class="col3" | The Absolute Integer X Position of the object
|- class="row4"
| class="col0 centeralign" | Y
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>2176</code>
| class="col3" | The Absolute Integer Y Position of the object
|- class="row5"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>1680</code>
| class="col3" | The Absolute Integer Z Position of the object
|- class="row6"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>-27</code>
| class="col3" | The X Axis rotation as a fraction of 360
|- class="row7"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The Y Axis rotation as a fraction of 360
|- class="row8"
| class="col0 centeralign" | Data Stream
| class="col1 centeralign" | Metadata
| class="col2 centeralign" | <code>127</code>
| class="col3" | Indexed metadata for Mob (STILL DECODING!). Terminated by 0xf7.
|- class="row9"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 20 bytes + Metadata (at least 1)
|}

Mob Types (Incomplete)

{| class="wikitable"
|- class="row0"
! class="col0" | Type ID
! class="col1" | Type Name
! class="col2" | Metadata
|- class="row1"
| class="col0" | 50
| class="col1" | Creeper
| class="col2" | 
|- class="row2"
| class="col0" | 51
| class="col1" | Skeleton
| class="col2" | 
|- class="row3"
| class="col0" | 52
| class="col1" | Spider
| class="col2" | 
|- class="row4"
| class="col0" | 53
| class="col1" | Giant Zombie
| class="col2" | 
|- class="row5"
| class="col0" | 54
| class="col1" | Zombie
| class="col2" | 
|- class="row6"
| class="col0" | 55
| class="col1" | Slime (random size?)
| class="col2" | 
|- class="row7"
| class="col0" | 56
| class="col1" | Ghast
| class="col2" | 
|- class="row8"
| class="col0" | 57
| class="col1" | Zombie Pigman
| class="col2" | 
|- class="row9"
| class="col0" | 90
| class="col1" | Pig
| class="col2" | 
|- class="row10"
| class="col0" | 91
| class="col1" | Sheep
| class="col2" | Wool color (TODO)
|- class="row11"
| class="col0" | 92
| class="col1" | Cow
| class="col2" | 
|- class="row12"
| class="col0" | 93
| class="col1" | Hen
| class="col2" | 
|- class="row13"
| class="col0" | 94
| class="col1" | Squid
| class="col2" | 
|}

=== Entity: Painting (0x19) ===

This packet shows location, name, and type of painting.

TODO: Verify "Type" field and coordinate type.
{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x19
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>0x00000326</code>
| class="col4 centeralign" | Unique entity ID
|- class="row2"
| class="col1 centeralign" | Title
| class="col2 centeralign" | String
| class="col3 centeralign" | <code>Creepers</code>
| class="col4 centeralign" | Name of the painting
|- class="row3"
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>50</code>
| class="col4 centeralign" | Block? coordinate
|- class="row4"
| class="col1 centeralign" | Y
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>66</code>
| class="col4 centeralign" | Block? coordinate
|- class="row5"
| class="col1 centeralign" | Z
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>-50</code>
| class="col4 centeralign" | Block? coordinate
|- class="row6"
| class="col1 centeralign" | Type
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | (?) Indicate which graphic to use
|}

=== Entity Velocity? (0x1C) ===
This packet is new to version 4 of the protocol, and is believed to be Entity Velocity/Motion.

Velocity is believed to in block velocity * 32000 with regards to the speed being server ticks, 200ms

e.g. -1343 would move (-1343 / 32000) = -0.04196875 blocks per tick (or -0.20984375 blocks per second)

Each axis Velocity is capped between -0.9 and 0.9 blocks per tick (Velocity -28800 to 28800)

(This packet data values are not fully verified)

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x1C
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1805</code>
| class="col4" |
The entity ID
|- class="row2"
| class="col0 centeralign" | Velocity X
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>-1343</code>
| class="col3" |
Velocity on the X axis
|- class="row3"
| class="col0 centeralign" | Velocity Y
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" |
Velocity on the Y axis
|- class="row4"
| class="col0 centeralign" | Velocity Z
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" |
Velocity on the Z axis
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes
|}

=== Destroy Entity (0x1D) ===

'''Server to Client only'''

Sent by the server when an Entity is to be destroyed on the client.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x1D
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>446</code>
| class="col4 centeralign" | Entity ID
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes
|}

=== Entity (0x1E) ===

'''Server to Client only'''

Most entity-related packets are subclasses of this packet. When sent from the server to the client, it may initialize the entry.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x1E
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>446</code>
| class="col4 centeralign" | Entity ID
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes
|}

=== Entity Relative Move (0x1F) ===

'''Server to Client only'''

This packet is sent by the server when an entity moves less then 4 blocks; if an entity moves more then 4 blocks [[#Entity_Teleport_.280x22.29|Entity Teleport]] should be sent instead.

This packet allows at most four blocks movement in any direction, because byte range is from -128 to 127. Movement is an offset of Absolute Int; to convert relative move to block coordinate offset, divide by 32.


{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x1F
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>459</code>
| class="col4" | Entity ID
|- class="row2"
| class="col0 centeralign" | dX
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>1</code>
| class="col3" | X axis Relative movement as an Absolute Integer
|- class="row3"
| class="col0 centeralign" | dY
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>-7</code>
| class="col3" | Y axis Relative movement as an Absolute Integer
|- class="row4"
| class="col0 centeralign" | dZ
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>5</code>
| class="col3" | Z axis Relative movement as an Absolute Integer
|- class="row5"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 8 bytes
|}

=== Entity Look (0x20) ===

'''Server to Client only'''

This packet is sent by the server when an entity rotates.  Example: "Yaw" field 64 means a 90 degree turn.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x20
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>459</code>
| class="col4" | Entity ID
|- class="row2"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>126</code>
| class="col3" | The X Axis rotation as a fraction of 360
|- class="row3"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The Y Axis rotation as a fraction of 360
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 7 bytes
|}

=== Entity Look and Relative Move (0x21) ===

'''Server to Client only'''

This packet is sent by the server when an entity rotates and moves.
Since a byte range is limited from -128 to 127, and movement is offset of Absolute Int,
this packet allows at most four blocks movement in any direction. (-128/32 == -4)

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x21
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>459</code>
| class="col4" | Entity ID
|- class="row2"
| class="col0 centeralign" | dX
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>1</code>
| class="col3" | X axis Relative movement as an Absolute Integer
|- class="row3"
| class="col0 centeralign" | dY
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>-7</code>
| class="col3" | Y axis Relative movement as an Absolute Integer
|- class="row4"
| class="col0 centeralign" | dZ
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>5</code>
| class="col3" | Z axis Relative movement as an Absolute Integer
|- class="row5"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>126</code>
| class="col3" | The X Axis rotation as a fraction of 360
|- class="row6"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The Y Axis rotation as a fraction of 360
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 10 bytes
|}

=== Entity Teleport (0x22) ===

'''Server to Client only'''

This packet is sent by the server when an entity moves more than 4 blocks.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x22
| class="col1 centeralign" | EID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>459</code>
| class="col4" | Entity ID
|- class="row2"
| class="col0 centeralign" | X
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>14162</code>
| class="col3" | X axis position as an Absolute Integer
|- class="row3"
| class="col0 centeralign" | Y
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>2176</code>
| class="col3" | Y axis position as an Absolute Integer
|- class="row4"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>1111</code>
| class="col3" | Z axis position as an Absolute Integer
|- class="row5"
| class="col0 centeralign" | Yaw
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>126</code>
| class="col3" | The X Axis rotation as a fraction of 360
|- class="row6"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The Y Axis rotation as a fraction of 360
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 19 bytes
|}

=== Entity Status? (0x26) ===

'''Server to Client only'''

[[File:Icon_exclaim.gif|:!:]] This command is not fully understood.

This packet is new in version 6 of the protocol, and is believed to be indication of entity damage, death and explosion

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x26
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | Int
| class="col3 centeralign" | 34353
| class="col4" | 
|- class="row3"
| class="col1 centeralign" | Entity Status?
| class="col2 centeralign" | Byte
| class="col3 centeralign" | 0x03
| class="col4" | Possible values: 2, 3 (entity dead?), 4, 5
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 6 bytes
|}

=== Attach Entity? (0x27) ===
This packet is new to version 4 of the protocol, and is believed to be Attach Entity.

This packet is sent when a player has been attached to an entity (e.g. Minecart)

(This packet data values are not fully verified)

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x27
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>1298</code>
| class="col4" |
The player entity ID being attached
|- class="row2"
| class="col0 centeralign" | Vehicle ID
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>1805</code>
| class="col3" |
The vehicle entity ID attached to (-1 for unattaching)
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 9 bytes
|}

=== Entity Metadata (0x28) ===
{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x28
| class="col1 centeralign" | Entity ID
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>0x00000326</code>
| class="col4 centeralign" | Unique entity ID to update.
|- class="row2"
| class="col0 centeralign" | Entity Metadata
| class="col1 centeralign" | Metadata
| class="col2 centeralign" | <code>0x00 0x01 0x7F</code>
| class="col3 centeralign" | Metadata varies by mob... Needs type description
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes + Metadata
|}

=== Pre-Chunk (0x32) ===

'''Server to Client only'''

This packet is sent by the server to notify the client to initialize (Mode=1) or unload (Mode=0) a chunk. The client is expected to allocate space for a full chunk (currently 16 x 128 x 16 blocks). One or more 0x33 packets will follow, specifying actual data to fill the chunk with.

[[File:Icon_exclaim.gif|:!:]] Whenever you send this packet the client will clear any previous chunk at that spot if one has previously been sent. Clients don't like being in or next to an unloaded chunk, so try not to unload it if players are nearby. If the player appears to be twitching and stuck in place after joining the world, there is probably an unloaded chunk too close to them.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x32
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>-9</code>
| class="col4" | Chunk X Coordinate
|- class="row2"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>12</code>
| class="col3" | Chunk Z Coordinate
|- class="row3"
| class="col0 centeralign" | Mode
| class="col1 centeralign" | bool
| class="col2 centeralign" | <code>1</code>
| class="col3" | If mode is 0 the client will unload the chunk, otherwise the client will initialize the chunk
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 10 bytes
|}

=== Map Chunk (0x33) ===

'''Server to Client only'''

The client will overwrite all '''or part''' of a chunk using the region of data contained in this packet. The server specifies the region to write using a block position and size in X,Y,Z. Note that this region will always be inside a single chunk. (At least using the vanilla server. Unknown if the client has this limitation.)

A server '''can''' send a 0x32 packet prior, allowing the client to initialize the chunk. However this doesn't always happen in practice. Thus the client should initialize the chunk on-demand.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="8" | 0x33
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>128</code>
| class="col4" | Block X Coordinate
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>0</code>
| class="col3" | Block Y Coordinate
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>-192</code>
| class="col3" | Block Z Coordinate
|- class="row4"
| class="col0 centeralign" | Size_X
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>15</code>
| class="col3" | Size_X is Actual X Size -1
|- class="row5"
| class="col0 centeralign" | Size_Y
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>127</code>
| class="col3" | Size_Y is Actual Y Size -1
|- class="row6"
| class="col0 centeralign" | Size_Z
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>15</code>
| class="col3" | Size_Z is Actual Z Size -1
|- class="row7"
| class="col0 centeralign" | Compressed size
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>3663</code>
| class="col3" | Size of compressed region data
|- class="row8"
| class="col0 centeralign" | Compressed data
| class="col1 centeralign" | byte array
| class="col2 centeralign" | <code>…</code>
| class="col3" | The region data is compressed using ZLib Deflate function.
|- class="row9"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 18 bytes + Compressed chunk size
|}

=====X, Y, Z=====
This is the start position of the region, in '''world''' block coordinates.

To find which chunk is affected, in the same coordinates given by packet 0x32: 
  ChunkX = X >> 4 
  ChunkY = Y >> 7
  ChunkZ = Z >> 4

And conversely, which local block in the chunk to start at:
  StartX = X & 15
  StartY = Y & 127  (not always 0!)
  StartZ = Z & 15

=====SizeX, SizeY, SizeZ=====
This is the size of the region, in blocks. The server will subtract one from the sizes and then cast them to a byte before sending. This is so that chunks as large as 256 are possible (the maximum size of a byte is 255; 256 - 1 = 255). 

=====Compressed data=====

The data is compressed using the deflate() function in [http://www.zlib.net/ zlib]. After uncompressing, the data consists of four sequential sections, in order:

* <div class="li"> Block type array (1 byte per block)</div>
* <div class="li"> Block metadata array (half byte/nibble per block)</div>
* <div class="li"> Block Light array (half byte/nibble per block)</div>
* <div class="li"> Sky Light array (half byte/nibble per block)</div>

The data is exactly <code>(Size_X+1) * (Size_Y+1) * (Size_Z+1) * 2.5</code> bytes long. Nibbles are not rounded either direction, which means that at least one dimension of the chunk must be even.

The arrays are not interlaced.

In other words, there are Size_X number of '''x planes''', each plane made up of Size_Z number of '''z rows''', each row made up of Size_Y blocks indexed by y coordinate in order.

The block type array is indexed with:
  index = y + (z * (Size_Y+1)) + (x * (Size_Y+1) * (Size_Z+1))

The other arrays are similar but you need to divide the index by two after calculating the above. Then each byte contains data for '''two''' blocks.

If you have a FULL map chunk (Size_X = 15, Size_Y = 127, Size_Z = 15, you can calculate index coordinates:
  x = X + ( index >> 11 )
  y = index & 0x7F
  z = Z + ( (index & 0x780) >> 7 )

=== Multi Block Change (0x34) ===

Further investigation shows that this is a multiple-block-change command; if you take the three arrays, and put together elements with the same index, and then decompose the short into coordinates (top 4 bits is X, next 4 bits is Z, bottom 8 bits is Y), you get things like [((8, 7, 4), 11, 0), ((7, 13, 6), 11, 0), ((13, 1, 8), 11, 0), ((7, 6, 6), 11, 0)].

See the Block Change command for description of the general format of a block change.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x34
| class="col1 centeralign" | Chunk X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>-9</code>
| class="col4" | Chunk X Coordinate
|- class="row2"
| class="col0 centeralign" | Chunk Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>12</code>
| class="col3" | Chunk Z Coordinate
|- class="row3"
| class="col0 centeralign" | Array size
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>2</code>
| class="col3" | The total number of elements per array
|- class="row4"
| class="col0 centeralign" | Coordinate array
| class="col1 centeralign" | short array
| class="col2 centeralign" | <code>…</code>
| class="col3" | The coordinates of the blocks to change
|- class="row5"
| class="col0 centeralign" | Type array
| class="col1 centeralign" | byte array
| class="col2 centeralign" | <code>…</code>
| class="col3" | The type for each block change
|- class="row6"
| class="col0 centeralign" | Metadata array
| class="col1 centeralign" | byte array
| class="col2 centeralign" | <code>…</code>
| class="col3 leftalign" | The Metadata for each block changed
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes + Arrays
|}

=== Block Change (0x35) ===

[[File:Icon_exclaim.gif|:!:]] Block metadata varies by block type - it should be <code>0x00</code> for most blocks with a few exceptions, shown in the table below.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x35
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>502</code>
| class="col4" | Block X Coordinate
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>71</code>
| class="col3" | Block Y Coordinate
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>18</code>
| class="col3" | Block Z Coordinate
|- class="row4"
| class="col0 centeralign" | Block Type
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>78</code>
| class="col3" | The new block type for the block
|- class="row5"
| class="col0 centeralign" | Block Metadata
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | The new Metadata for the block
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 12 bytes
|}

=== Play Note Block (0x36) ===

'''Server to Client only'''

This packet is sent to the client when a note block is played. It shows the note particle being emitted from the block as well as playing the tone.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x35
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | <code>502</code>
| class="col4" | Block X Coordinate
|- class="row2"
| class="col0 centeralign" | Y
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>71</code>
| class="col3" | Block Y Coordinate
|- class="row3"
| class="col0 centeralign" | Z
| class="col1 centeralign" | int
| class="col2 centeralign" | <code>18</code>
| class="col3" | Block Z Coordinate
|- class="row4"
| class="col0 centeralign" | Instrument Type
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>3</code>
| class="col3" | The instrument type (see the table below).
|- class="row5"
| class="col0 centeralign" | Pitch
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>17</code>
| class="col3" | The pitch of the note (between 0-24 inclusive where 0 is the lowest and 24 is the highest).
|- class="row6"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 13 bytes
|}

Instrument Types

{| class="wikitable"
|- class="row0"
! class="col0" | Type ID
! class="col1" | Type Name
|- class="row1"
| class="col0" | 1
| class="col1" | Double Bass
|- class="row2"
| class="col0" | 2
| class="col1" | Snare Drum
|- class="row3"
| class="col0" | 3
| class="col1" | Clicks/Sticks
|- class="row4"
| class="col0" | 4
| class="col1" | Bass Drum
|- class="row5"
| class="col0" | 5
| class="col1" | Harp
|}

More information about how the pitch values correspond to notes in real life are available on the [http://www.minecraftwiki.net/wiki/Note_Block official Minecraft wiki].

=== Explosion (0x3C) ===

[[File:Icon_exclaim.gif|:!:]] This command is not fully understood.

Seems to be sent when an explosion occurs (both creepers and TNT).

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=6 | 0x3C
| class="col1 centeralign" | X
| class="col2 centeralign" | double
| class="col3 centeralign" | 
| class="col4" | 
|- class="row1"
| class="col1 centeralign" | Y
| class="col2 centeralign" | double
| class="col3 centeralign" | 
| class="col4" | 
|- class="row1"
| class="col1 centeralign" | Z
| class="col2 centeralign" | double
| class="col3 centeralign" | 
| class="col4" | 
|- class="row1"
| class="col1 centeralign" | Unknown
| class="col2 centeralign" | float
| class="col3 centeralign" | 3.0
| class="col4" | radius?
|- class="row2"
| class="col1 centeralign" | Record count
| class="col2 centeralign" | int
| class="col3 centeralign" | 
| class="col4" | This is the count, not the size. The size is 3 times this value.
|- class="row3"
| class="col1 centeralign" | Records
| class="col2 centeralign" | byte array
| class="col3 centeralign" | 
| class="col4" | Each record is 3 bytes, which seem to be XYZ offsets of affected blocks.
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 33 bytes + 3*(Record count) bytes
|}

=== Open window (0x64) ===

[[File:Icon_exclaim.gif|:!:]] This command is not fully understood.

This is sent to the client when it should open an inventory, such as a chest, workbench, or furnace.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=4 | 0x64
| class="col1 centeralign" | Window id
| class="col2 centeralign" | byte
| class="col3 centeralign" | 123
| class="col4" | The id of the window to display.
|- class="row1"
| class="col1 centeralign" | Inventory Type
| class="col2 centeralign" | byte
| class="col3 centeralign" | 2
| class="col4" | Check below
|- class="row1"
| class="col1 centeralign" | Window title
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Chest</code>
| class="col4" | The title of the window
|- class="row1"
| class="col1 centeralign" | Number of Slots
| class="col2 centeralign" | byte
| class="col3 centeralign" | 54
| class="col4" | Number of slots in the window (excluding the number of slots in the player inventory). For example, 3 for a furnace.
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 4 bytes + 1 string
|}

Inventory types: 0 = basic, 1 = workbench, 2 = furnace, 3 = dispenser

=== Close window (0x65) ===

'''Client to Server only'''

This packet is sent by the client when closing a window.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0x65
| class="col1 centeralign" | Window id
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4" | This is the id of the window that was closed. (Note: Test whether this packet is sent when a chest is destroyed, or when player moves out of range.)
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}

=== Window click (0x66) ===

'''Client to Server only'''

[[File:Icon_exclaim.gif|:!:]] This command is not fully understood.

This packet is sent by the player when it clicks on a slot in a window.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=7 | 0x66
| class="col1 centeralign" | Window id
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4" | The id of the window which was clicked. 0 for player inventory.
|- class="row2"
| class="col0 centeralign" | Slot
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>36</code>
| class="col3" | The clicked slot (-999 is outside of inventory)
|- class="row3"
| class="col0 centeralign" | Right-click?
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>1</code>
| class="col3" | Seems to be 1 when right-clicking and otherwise 0
|- class="row4"
| class="col0 centeralign" | Action number
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>12</code>
| class="col3" | A unique number for the action, used for transaction handling (See the Transaction packet).
|- class="row5"
| class="col0 centeralign" | Item ID
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>3</code>
| class="col3" | ID of Item that was in the slot or -1 if no item. If -1, this is the last field in the packet.
|- class="row6"
| class="col0 centeralign" | Item count
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>64</code>
| class="col3" | Number of items that were in the slot
|- class="row7"
| class="col0 centeralign" | Item uses
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>10</code>
| class="col3" | Number of times the item was used that was in the slot
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 9 bytes (+3 for item ID != -1)
|}

=== Set slot (0x67) ===

'''Server to Client only'''

[[File:Icon_exclaim.gif|:!:]] This command is not fully understood.

Sent by the server when an item in a slot (in a window) is added/removed.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=5 | 0x67
| class="col1 centeralign" | Window id
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4" | The window which is being updated. 0 for player inventory. Note that all known window types include the player inventory. This packet will only be sent for the currently opened window while the player is performing actions, even if it affects the player inventory. After the window is closed, a number of these packets are sent to update the player's inventory window (0).
|- class="row2"
| class="col0 centeralign" | Slot
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>36</code>
| class="col3" | The slot that should be updated
|- class="row3"
| class="col0 centeralign" | Item ID
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>-1</code>
| class="col3" | When -1, this is the last value in this packet. -1 means no item.
|- class="row4"
| class="col0 centeralign" | Item Count
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>64</code>
| class="col3" | Number of items in a stack
|- class="row5"
| class="col0 centeralign" | Item uses
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>3</code>
| class="col3" | 
|- class="row8"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 6 bytes (+3 for item ID != -1)
|}

Note that if window ID and slot are both -1, it means the item currently attached to the cursor.

Slots: [http://gyazo.com/9d52e1fd4dc14790ec66eab4a9aee00e.png]

=== Window items (0x68) ===

'''Server to Client only'''

[[File:Inventory-slots.png|thumb|The inventory slots]]

Sent by the server when an item in a slot (in a window) is added/removed. This includes the main inventory, equipped armour and crafting slots. 

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x68
| class="col1 centeralign" | Window id
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4" | The id of window which items are being sent for. 0 for player inventory.
|- class="row2"
| class="col0 centeralign" | Count
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>4</code>
| class="col3" | The number of items (see below)
|- class="row3"
| class="col0 centeralign" | Payload
| class="col1 centeralign" | …
| class="col2 centeralign" | <code></code>
| class="col3" | The payload (see below)
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 4 bytes + size of payload
|}

This packet is a bit trickier to parse than most others because the size of its payload is variable. The payload is an array of shorts (item ID) optionally followed by a byte-short pair (count and uses) as long as the item ID does not equal <code>-1</code>, which signifies an empty slot.

Uses is the number of times an item has been used (the value starts at 0 and counts up.) Note that an invalid use of an item may count as 2 uses.

<syntaxhighlight lang="python">
 offset = 0
 
 for slot in count:
     item_id = payload[offset] as short
     offset += 2
     if item_id is not equal to -1:
         count = payload[offset] as byte
         offset += 1
         uses = payload[offset] as short
         offset += 2
         inventory[slot] = new item(item_id, count, uses)
     else:
         inventory[slot] = None
</syntaxhighlight>

=== Update progress bar (0x69) ===

'''Server to Client only'''

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=3 | 0x69
| class="col1 centeralign" | Window id
| class="col2 centeralign" | byte
| class="col3 centeralign" | 2
| class="col4" | The id of the window that the progress bar is in.
|- class="row1"
| class="col1 centeralign" | Progress bar
| class="col2 centeralign" | short
| class="col3 centeralign" | 1
| class="col4" | Which of the progress bars that should be updated. (For furnaces, 0 = progress arrow, 1 = fire icon)
|- class="row1"
| class="col1 centeralign" | Value
| class="col2 centeralign" | short
| class="col3 centeralign" | 650
| class="col4" | The value of the progress bar. The maximum values vary depending on the progress bar. Presumably the values are specified as in-game ticks. Some progress bar values increase, while others decrease. For furnaces, 0 is empty, full progress arrow = about 180, full fire icon = about 250)
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 6 bytes
|}

=== Transaction (0x6A) ===

'''Server to Client only'''

A packet from the server indicating whether a request from the client was accepted, or whether there was a conflict (due to lag).

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=3 | 0x6A
| class="col1 centeralign" | Window id
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4" | The id of the window that the action occurred in.
|- class="row1"
| class="col1 centeralign" | Action number
| class="col2 centeralign" | short
| class="col3 centeralign" | 12
| class="col4" | Every action that is to be accepted has a unique number. This field corresponds to that number.
|- class="row1"
| class="col1 centeralign" | Accepted?
| class="col2 centeralign" | boolean
| class="col3 centeralign" | true
| class="col4" | Whether the action was accepted.
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes
|}

=== Update Sign (0x82) ===

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan=7 | 0x82
| class="col1 centeralign" | X
| class="col2 centeralign" | int
| class="col3 centeralign" | 128
| class="col4" | Block X Coordinate
|- class="row1"
| class="col1 centeralign" | Y
| class="col2 centeralign" | short
| class="col3 centeralign" | 0
| class="col4" | Block Y Coordinate
|- class="row1"
| class="col1 centeralign" | Z
| class="col2 centeralign" | int
| class="col3 centeralign" | -128
| class="col4" | Block Z Coordinate
|- class="row1"
| class="col1 centeralign" | Text1
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>First line</code>
| class="col4" | First line of text in the sign
|- class="row1"
| class="col1 centeralign" | Text2
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Second line</code>
| class="col4" | Second line of text in the sign
|- class="row1"
| class="col1 centeralign" | Text3
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Third line</code>
| class="col4" | Third line of text in the sign
|- class="row1"
| class="col1 centeralign" | Text4
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Fourth line</code>
| class="col4" | Fourth line of text in the sign
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes + 4 strings
|}

=== Disconnect/Kick (0xFF) ===

Sent by the server before it disconnects a client, or by the client before it disconnects from the server. The receiver of this packet assumes that the sender has already closed the connection by the time the packet arrives.

{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | 0xFF
| class="col1 centeralign" | Reason
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>The server is full!</code>
| class="col4" | Displayed to the client when the connection terminates
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes + length of strings
|}

== Protocol History ==

Provided below is a changelog of the server protocol starting on 2010-08-20.  The wiki history feature may also be used to investigate changes.

=== 2011-1-13 ===
* <div class="li">Beta 1.2 released.</div>
* More packet changes ([http://pastebin.com/HHW52Awn pastebin]): 0x05, 0x0F, 0x13, 0x15, 0x18, 0x19, 0x28, 0x36, 0x66, 0x67.

=== 2010-12-20 ===
* <div class="li">Notch released Beta on time! Amazing! Refactored the page to be slightly smaller and easier to navigate.</div>
* A whole host of packet changes. 0x05, 0x08, 0x10, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, and 0x82. Packets 0x11 and 0x3b removed.

=== 2010-12-01 ===
* <div class="li"> Protocol version changed to 6</div>
* <div class="li"> Packet 0x12 ([[#Animation_.280x12.29|Animation]]) got a lot more new values</div>
* <div class="li"> Packet 0x26 changed, now indicates entity damage, death and explosion (for creepers, TNT not tested)</div>
* <div class="li"> Packet 0x3B now being sent from client</div>
* <div class="li"> Packet 0x3C added</div>
* (need info on other changes)

=== 2010-11-24 ===
* <div class="li"> Protocol version changed to 5</div>
* <div class="li"> Packet 0x07 ([[#Use_Entity.3F_.280x07.29|Use Entity]]) got a new field (byte)</div>
* <div class="li"> Packet 0x08 ([[#Update Health (0x08)|Update Health]]) added</div>
* <div class="li"> Packet 0x09 ([[#Respawn (0x09)|Respawn]]) added</div>
* <div class="li"> Packet 0x12 ([[#Animation_.280x12.29|Animation]]) started getting non-boolean values for the Animation field</div>
* <div class="li"> Packet 0x26 (Entity Death) added</div>

=== 2010-11-10 ===
* <div class="li"> Protocol version changed to 4</div>
* <div class="li"> Packet 0x01 ([[#Login_Request_.280x01.29|login request]]) changed</div>
* <div class="li"> Packet 0x07 ([[#Use Entity? (0x07)|Use Entity?]]) added</div>
* <div class="li"> Packet 0x1C ([[#Entity Velocity? (0x1C)|Entity Velocity?]]) added</div>
* <div class="li"> Packet 0x27 ([[#Attach Entity? (0x27)|Attach Entity?]]) added</div>

=== 2010-10-31 ===
* <div class="li"> Protocol version changed to 3</div>
* <div class="li"> Packet 0x01 ([[#Login_Request_.280x01.29|login request]]) changed</div>

=== 2010-09-10 ===
* <div class="li"> Protocol version changed to 2</div>
* <div class="li"> Packets 0x05, 0x06, 0x3B added</div>
* <div class="li"> Server-side inventory (no verification)</div>
* <div class="li"> Vanilla adds experimental monsters (only damaged by fire)</div>

=== 2010-08-20 ===
* <div class="li"> Protocol version reset from 14 to 1</div>
* <div class="li"> Packet 0x04 ([[#Time_Update_.280x04.29|time update]]) added</div>

[[Category:Protocol Details]]
[[Category:Minecraft Alpha]]

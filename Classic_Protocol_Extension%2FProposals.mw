=Template=
Add your proposal at the end of the page. Please use [[Classic_Protocol_Extension#Extensions|existing extensions]] as your guide to formatting. Please sign your proposals and comments by ending it with <code><nowiki>~~~~</nowiki></code>.
<pre><nowiki>===ExtensionName===
:Proposed by ~~~~
:Brief summary of the extension.
:'''Motivation''': Explain why this is needed or how it is useful.
:'''Client Behavior''': Detailed description of all new behavior that game clients need to implement in order to support this extension. Consider interaction with other extensions.
:'''Server Behavior''': Detailed description of all new behavior that game servers need to implement in order to support this extension. Consider interaction with other extensions.
:(Packet definitions, remarks, illustrations, and data tables go here)
:(Comments go here, please sign them)
</nowiki></pre>
=Proposals=
===PlaySound===
:Proposed by !!!WARLOCK!!!
:This extension allows server to play custom sound and musics on client.
:'''Motivation''': Servers can play custom musics or sound effects just in time or when something changes. Useful for gamemodes such as zombie survival, Servers can play zombie moaning sound while zombies are close to players. Player join and leave sounds, Kill streak sounds for games such as CTF, Radio and DJ class for players and sound effects for explosions and player deaths.
:'''Client Behavior''': Client must download and load, or load the sound directly from the URL with the ID. Client must be able to download any time after MapFinalize has sent. If the URL is empty then the Client must unload the sound with that ID. Client must unload the sound and load a new one if there's a sound with existing ID. Client must be able to play the sound right after receiving the PlaySound packet. The last playing sound can not be ignored or stopped when a new sound is going to be played. Files type must be in .WAV, otherwise they're ignored. Client must ignore downloading the existing files from Server if they're saved in drive. Client must not change the volume of all environments (Place/Destroy, Walk sounds) on SetVolume packet. Client must change a local variable for volume of next playing sound on SetVolume packet.
:'''Server Behavior''': Server must ignore sending the same url multiple times. Server can not send quick loops of sound due to network speed and client crash possibility. It's better to load all of required sounds after map load for better performance. Server must not send high sized file cause of time and speed it takes for download. Files type must be in .WAV, otherwise they're ignored. Server can change the volume before playing a sound. For a better networking, It's suggested to not send PlaySound instead of changing volume to zero.
:<h4>LoadSound packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | ID
| class="col2 centeralign" | byte
| class="col3 centeralign" | 143
| class="col4 centeralign" | Gives the URL an ID.
|- class="row2"
| class="col1 centeralign" | URL
| class="col2 centeralign" | string
| class="col3 centeralign" | http://site.com/firstblood.wav
| class="col4 centeralign" | Address to a .WAV file, put this empty for unload.
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 66 bytes
|}
:<h4>PlaySound packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | ID
| class="col2 centeralign" | byte
| class="col3 centeralign" | 125
| class="col4 centeralign" | Plays the sound saved as ID.
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}
:<h4>SetVolume packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Percent
| class="col2 centeralign" | byte
| class="col3 centeralign" | 87
| class="col4 centeralign" | Set the next playing sound(s) volume to a Percentage.
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}

===ClientRedirection===
:Proposed by [[User:Sysr q|Sysr q]] ([[User talk:Sysr q|talk]]) 10:17, 12 May 2014 (UTC)
:This extension allows servers to give clients a ''redirection'' to a separate, possibly "private" server.
:'''Motivation''': Allowing servers to redirect clients would be useful in several cases. Allowing a singular "hub" server to redirect players to various external (but related) servers depending on the gamemode they wish to play would allow tightly integrated networks. If servers are using an external "balancer" or some sort of Minecraft-aware proxy, the server could signal the proxy move its connection on the client's behalf to another server.
:'''Client Behavior''': Clients should be ready to receive a '''''ClientRedirection''''' packet any time after they receive a '''''LevelFinalize''''' packet. When clients receive a '''''ClientRedirection''''' packet, they should prompt the user with a message indicating the server they're being redirected too, and allow the user to continue or quit. Non-player clients (e.g., proxies) have the option of silently reconnecting on the client's behalf. Clients should then open a new connection to the newly redirected server, and begin standard negotiation protocol.
:'''Server Behavior''': Servers should only send a '''''ClientRedirection''''' packet after the they have sent a '''''LevelFinalize''''' packet. They should ensure the new server the client is being redirected to exists, and preferably is online and available.
:<h4>ClientRedirection packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Address
| class="col2 centeralign" | string
| class="col3 centeralign" | mc.example.org
| class="col4 centeralign" | Can be an IP address (IPv4/IPv6) or a hostname.
|- class="row2"
| class="col1 centeralign" | Port
| class="col2 centeralign" | int
| class="col3 centeralign" | 25565
| class="col4 centeralign" |
|- class="row3"
| class="col1 centeralign" | Name
| class="col2 centeralign" | string
| class="col3 centeralign" | Joe Blogg's Freebuild
| class="col4 centeralign" | ''(optional)'' User-friendly name to be displayed in user prompt.
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 133 bytes
|}

===ColorCodeControl===
:Proposed by [[User:F|F]] ([[User talk:F|talk]]) 22:00, 28 August 2014 (UTC)
:Gives servers an option to allow players to type in color codes, and a way to render <code>&</code> character in chat.
:'''Motivation''': Allow players to type in color codes and to use & in chat.
:'''Client Behavior''': When this extension is mutually supported, treat character sequence <code>&&</code> as meaning "draw an <code>&</code> character", without modifying current color. Do not allow <code>&</code> to be typed or pasted into chat unless '''''ColorCodeControl''''' packet has been received with ''AllowColorCodes'' set to <code>1</code>.
:'''Server Behavior''': When this extension is mutually supported, server may send '''''ColorCodeControl''''' packet to allow client to type or paste color codes. Server should treat <code>&&</code> as described above.
<h4>ColorCodeControl packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | ??
| class="col1 centeralign" | AllowColorCodes
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4 centeralign" | 0 = disallow
1 = allow
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}
===UnicodeChat===
:Proposed by [[User:F|F]] ([[User talk:F|talk]]) 22:48, 28 August 2014 (UTC)
:Expands character encoding beyond ASCII. There are three ways to go about this:
:# Expand charset to 256 characters using '''[http://en.wikipedia.org/wiki/Windows-1252 Win-1252]'''.
:#* <span style="color:#060">'''Pro'''</span>: Easiest to implement in clients (few changes to FontRenderer needed) and servers (no multibyte character support needed).
:#* <span style="color:#060">'''Pro'''</span>: No new packets needed.
:#* <span style="color:#060">'''Pro'''</span>: Easy to create custom fonts.
:#* <span style="color:#060">'''Pro'''</span>: Easy for servers to maintain compatibility with legacy clients, since only 128 characters need to be remapped, most of which have decent ASCII matches.
:#* <span style="color:#060">'''Pro'''</span>: Low resource use (low RAM and VRAM use, no additional CPU use, small font file).
:#* <span style="color:#c00">'''Con'''</span>: Still only 256 characters. Only covers Latin-derived (English and Western/Central European) languages and common symbols.
:# Expand charset to Unicode [http://en.wikipedia.org/wiki/Basic_Multilingual_Plane#Basic_Multilingual_Plane Basic Multilingual Plane] (BMP) with '''UCS-2''' fixed-length encoding.
:#* <span style="color:#060">'''Pro'''</span>: Lots of characters (~65k) covering most languages and symbols.
:#* <span style="color:#060">'''Pro'''</span>: Not too hard to implement (characters still fixed-width, native support in WinAPI / Java / C#).
:#* <span style="color:#060">'''Pro'''</span>: Free fonts available that covers all characters.
:#* <span style="color:#c00">'''Con'''</span>: New renderer (possibly third-party library) needed for rendering.
:#* <span style="color:#c00">'''Con'''</span>: Higher resource use (higher RAM and VRAM use, more CPU use, large font file).
:#* <span style="color:#c00">'''Con'''</span>: Very hard to create custom fonts.
:#* <span style="color:#c00">'''Con'''</span>: Still does not cover all characters.
:#* <span style="color:#c00">'''Con'''</span>: Hard for servers to maintain compatibility with legacy clients.
:#* <span style="color:#c00">'''Con'''</span>: Always uses 2 bytes per character for transmission (twice as much as ASCII/CP-1252).
:# Expand charset to Unicode [http://en.wikipedia.org/wiki/Basic_Multilingual_Plane#Basic_Multilingual_Plane Basic Multilingual Plane] (BMP) with '''UTF-8''' variable-length encoding.
:#* <span style="color:#060">'''Pro'''</span>: Lots of characters (~65k) covering most languages and symbols.
:#* <span style="color:#060">'''Pro'''</span>: Not too hard to implement (characters can be freely converted to/from UCS-2, which is natively support in WinAPI / C#).
:#* <span style="color:#060">'''Pro'''</span>: Free fonts available that covers all characters.
:#* <span style="color:#060">'''Pro'''</span>: Uses 1 byte per character for transmission, most of the time.
:#* <span style="color:#c00">'''Con'''</span>: New renderer (possibly third-party library) needed for rendering.
:#* <span style="color:#c00">'''Con'''</span>: Higher resource use (higher RAM and VRAM use, more CPU use, large font file).
:#* <span style="color:#c00">'''Con'''</span>: Hard to create custom fonts (unless some fallback rules are implemented).
:#* <span style="color:#c00">'''Con'''</span>: Still does not cover all characters.
:#* <span style="color:#c00">'''Con'''</span>: Hard for servers to maintain compatibility with legacy clients.
:# Expand charset to full Unicode with '''UTF-8''' variable-length encoding. Includes all the supplemental Unicode planes.
:#* <span style="color:#060">'''Pro'''</span>: Widely used in other software.
:#* <span style="color:#060">'''Pro'''</span>: Theoretically covers all languages and symbols.
:#* <span style="color:#060">'''Pro'''</span>: Uses 1 byte per character for transmission, most of the time.
:#* <span style="color:#c00">'''Con'''</span>: Does not ''actually'' cover all languages and symbols due to non-existence of 100% fonts.
:#* <span style="color:#c00">'''Con'''</span>: Hard to find free fonts that extend beyond the BMP.
:#* <span style="color:#c00">'''Con'''</span>: Harder to work with strings (due to variable-width characters).
:#* <span style="color:#c00">'''Con'''</span>: Third-party library needed for rendering.
:#* <span style="color:#c00">'''Con'''</span>: Highest resource use (highest RAM and VRAM use, most CPU use, largest font files).
:#* <span style="color:#c00">'''Con'''</span>: Hardest to implement (no native support in WinAPI / C#).
:#* <span style="color:#c00">'''Con'''</span>: Hard to create custom fonts (unless some fallback rules are implemented).
:#* <span style="color:#c00">'''Con'''</span>: Hard for servers to maintain compatibility with legacy clients.

===ColorControl===
:Proposed by !!!WARLOCK!!!
:Changes the color alpha (A) of Messagetypes to a custom number.
:'''Motivation''': Allows servers to make gradient/glass like text messages at Message Type's IDs.
:'''Client Behavior''': If this packet is received, Client should directly change the alpha color of the specified chat message into a custom number. If the default message ID `0` is received, client should be changing the alpha code of the all incoming and received chat lines into the specified number. The alpha code remains until the client disconnects from the server, and should be functional with all incoming and already received messages. Client should be able to receive this message after the Initial map load.
:'''Server Behavior''': Server can send this packet to clients right after client finished loading the initial map. Message type can be any of stated/defined numbers on the packet (Message Type).
<h4>ColorControl packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Message Type
| class="col2 centeralign" | byte
| class="col3 centeralign" | 11
| class="col4 centeralign" | Message Type ID.
|- class="row2"
| class="col1 centeralign" | Alpha Code
| class="col2 centeralign" | byte
| class="col3 centeralign" | 154
| class="col4 centeralign" | Alpha code of color (From 0 - 255).
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes
|}

===SelectionCuboid v2===
:Proposed by FabTheZen, classic1234 and Rayne
:'''Motivation''': Allows the server to not only highlight parts of a world, but also determine whether those regions are walk through or not. This could be used to disallow players to walk inside restricted areas or zones which they are not allowed to build in. It could also be used as a jail when accompanied with the '-hax' option.
:'''Client behavior''': The client must receive the SelectionCuboid extension with version 2. It must also determine whether any selections on the map walk through or not.
:'''Server behavior''': The server behaves the same way SelectionCuboid v1 does.

:<h4>MakeSelection packet v2</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="13" |0x??
(??)
| class="col1 centeralign" | SelectionID
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4" | Numeric ID of the selection. Between 0 and 127.
|- class="row2"
| class="col1 centeralign" | Label
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>SomeZone</code>
| class="col4" | Text label associated with the selection
|- class="row3"
| class="col1 centeralign" | StartX
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>1</code>
| class="col4" | X coordinate of the starting point
|- class="row4"
| class="col1 centeralign" | StartY
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>2</code>
| class="col4" | Y coordinate of the starting point
|- class="row5"
| class="col1 centeralign" | StartZ
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>3</code>
| class="col4" | Z coordinate of the starting point
|- class="row6"
| class="col1 centeralign" | EndX
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>5</code>
| class="col4" | X coordinate of the ending point
|- class="row7"
| class="col1 centeralign" | EndY
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>6</code>
| class="col4" | Y coordinate of the ending point
|- class="row8"
| class="col1 centeralign" | EndZ
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>7</code>
| class="col4" | Z coordinate of the ending point
|- class="row9"
| class="col1 centeralign" | Red
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>255</code>
| class="col4" |Between 0 and 255.
|- class="row10"
| class="col1 centeralign" | Green
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>34</code>
| class="col4" |Between 0 and 255.
|- class="row11"
| class="col1 centeralign" | Blue
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>128</code>
| class="col4" |Between 0 and 255.
|- class="row12"
| class="col1 centeralign" | Opacity
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>255</code>
| class="col4" | 0 = fully transparent
255 = fully opaque
|- class="row13"
| class="col1 centeralign" | Walkthrough
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4" | 0 = Not walkthrough
1 = Walkthrough
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 87 bytes
|}

===Player Animation===
:Proposed by ByteBit
:Let the player to do certain actions/animations on the client
:'''Motivation''': Other players will be able to see the block another is holding or whether one placed a block or not. It makes the game's feel more realistic, because blocks don't pop out a no where.
:'''Client Behavior''': On recieve the client should perform the actions required for the animation.
:'''Server Behavior''': The server may send the packet if needed any time after the map is send.
<h4>AnimatePlayer packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0xAC
(172)
| class="col1 centeralign" | Animation Type
| class="col2 centeralign" | byte
| class="col3 centeralign" | 1
| class="col4 centeralign" | Specifies what animation to perform (0: Hold block; 1: Set block; 2: Destroy block; 3: Player name visibility)
|- class="row2"
| class="col1 centeralign" | Player ID
| class="col2 centeralign" | byte
| class="col3 centeralign" | 1
| class="col4 centeralign" | What player to perform this animation on
|- class="row3"
| class="col1 centeralign" | Additional byte
| class="col2 centeralign" | byte
| class="col3 centeralign" | 49 (Obsidian)
| class="col4 centeralign" | Needed for specific animations (Block type for 0,1 and 2; for 3: true(1)/false(0))
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes
|}

===PlayerHealth===
:Proposed by [[User:Apotter96|Apotter96]] ([[User talk:Apotter96|talk]]) 02:29, 26 July 2015 (UTC)alex96
:Gives players life count that is controlled by the server and reflected by the client at the top left of the game screen. The server.
:'''Motivation''': RPG and Gun games can go more extensive if they wish with lives.
:'''Client Behavior''': Display player's lives at the top left of screen when the server sends the packet. On player connect, the server needs to tell the client the max amount of lives the player can have, in between 5 and 20. May also dictate how many lives the server is allowed to send. Both need to check with the other end so they can comply together.
:'''Server Behavior''': At any time the server can send the packet telling the client the amount of lives the player has. Once a player connects, the server needs to tell the client how many lives the player is allowed to have, in between 5 and 20. Both need to check with the other end so they can comply together.
:<h4>UpdateLives packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Lives
| class="col2 centeralign" | int
| class="col3 centeralign" | 15
| class="col4 centeralign" | How many lives the player has
|- class="row2"
| class="col1 centeralign" | MaxLives
| class="col2 centeralign" | int
| class="col3 centeralign" | 15
| class="col4 centeralign" | The Max amount of lives
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}
:<h4>UpdateLives packet</h4>
:''Client to server''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x??
(??)
| class="col1 centeralign" | MaxLives
| class="col2 centeralign" | int
| class="col3 centeralign" | 15
| class="col4 centeralign" | The Max amount of lives
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}
:(Comments go here, please sign them)


===EnvMapAppearance v2===
:Proposed by UnknownShadow200
:This extension allows the server to specify custom texture packs, and tweak appearance of map edges.
:'''Motivation''': To provide more ways to customize map appearance, including functionality that's currently provided by [http://files.worldofminecraft.com/texturing/ World of Minecraft's scheme].
:'''Client behavior:''' Client must be able to receive '''''EnvSetMapAppearance v2''''' packets any time during level load (after the first '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelDataChunk]]''''' packet is received and until the '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelFinalize]]''''' packet is received). If the ''TexturePackURL'' field is blank or if the given file could not be loaded for any reason, then the texture pack should be reset to the client's default. If an unsupported block ID is given for ''SideBlock'' or ''EdgeBlock'', it should be ignored. The given ''SideLevel'' value should be adjusted to fit between <code>0</code> and <code>MapDepth</code>, if necessary. Client should keep using these appearance parameters for future maps, unless specified otherwise by the server.
:'''Server behavior:''' Server may send '''''EnvSetMapAppearance v2''''' packets after the last '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelDataChunk]]''''' packet is sent for a level. Server should not use any custom block IDs unless the client declared the appropriate ''CustomBlocks'' support level. To reset the texture pack to the client's default one, server should send an '''''EnvSetMapAppearance v2''''' packet with empty string for ''TexturePackURL''. To reset other fields, server should simply use the default values (listed below).
:'''Block type restrictions:''' Only solid blocks are allowed to be used for ''SideBlock'' and ''EdgeBlock''. Sprites (Sapling, Dandelion, Rose, BrownMushroom, RedMushroom, Rope, Fire) partial-height blocks (Slab, CobblestoneSlab, Snow), and transparent blocks (Air, Leaves, Glass) cannot be used for those fields.

:<h4>EnvSetMapAppearance v2 packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x1E
(30)
| class="col1 centeralign" | TexturePackURL
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>http://example.com/mypack.zip</code>
| class="col4" | Texture pack's full URL.
Must be a HTTP/HTTPS URL, in .zip format, and served with <code>application/zip</code> mime type.
|- class="row2"
| class="col1 centeralign" | SideBlock
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>7</code>
| class="col4" | Block ID. Default value is 7 (Admincrete).
|- class="row3"
| class="col1 centeralign" | EdgeBlock
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>8</code>
| class="col4" | Block ID. Default value is 8 (Water).
|- class="row4"
| class="col1 centeralign" | SideLevel
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>31</code>
| class="col4" | Elevation from bottom of the map, in blocks.
Value should be between <code>0</code> and <code>MapDepth</code>.
Default value is <code>MapDepth/2</code>.
|- class="row5"
| class="col1 centeralign" | CloudLevel
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>31</code>
| class="col4" | Elevation from bottom of the map, in blocks.
Value should be between <code>-32768</code> and <code>32767</code>.
Default value is <code>MapDepth + 2</code>.
|- class="row6"
| class="col1 centeralign" | MaximumViewDistance
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>16</code>
| class="col4" | The maximum view distance the client is allowed to see, in blocks.
Default is 0. (Client has no limit on view distance.)
|- class="row7"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 73 bytes
|}

:<h4>Texture pack .zip format</h4>
:'''Note:''' It is up to clients which files (except for terrain.png) they support in a texture pack. These clients are still considered to be compliant with the specification.
:'''Note:''' Texture packs may also contain other files that are not listed below. If clients recognise these other files, then they may perform whatever is desired with them. Otherwise, clients must ignore these other files.
:'''Note:''' If a texture pack does not contain a certain texture, clients should continue to use the existing texture from the previous texture pack.
:'''Note:''' Servers are highly advised to avoid texture pack .zips over 4 MB, as these may be rejected by clients.
:{| class="wikitable"
|- class="row0"
! class="col0" | File name
! class="col2" | Details
|- class="row1"
| class="col0 centeralign" | terrain.png
| class="col2 centeralign" | Texture atlas that contains the textures that are applied to blocks.
'''Note:''' Clients ''must'' support this texture to be considered compliant with the specification.
|- class="row2"
| class="col0 centeralign" | animations.png
| class="col2 centeralign" | Texture atlas that contains the textures used for animations.
|- class="row3"
| class="col0 centeralign" | animations.txt
| class="col2 centeralign" | File that specifies how the textures in animations.png should be applied to the terrain.png texture atlas.
|- class="row3"
| class="col0 centeralign" | char.png
| class="col2 centeralign" | Default skin for humanoid models.
|- class="row4"
| class="col0 centeralign" | clouds.png
| class="col2 centeralign" | Texture applied to clouds rendered by the client.
|- class="row5"
| class="col0 leftalign" colspan="2" | ''The following may be utilised by clients if EnvWeatherType is mutually supported:''
|- class="row6"
| class="col0 centeralign" | rain.png
| class="col2 centeralign" | Texture applied to rain rendered by the client.
|- class="row7"
| class="col0 centeralign" | snow.png
| class="col2 centeralign" | Texture applied to snow rendered by the client.
|- class="row8"
| class="col0 leftalign" colspan="2" | ''The following may be utilised by clients if ChangeModel is mutually supported:''
'''Note:''' The default texture for humanoid models is specified by ''char.png''. Block models use textures from ''terrain.png''.
|- class="row9"
| class="col0 centeralign" | x.png
| class="col2 centeralign" | Default texture applied to a model for model string ''x''.
For example, the Crocodile model has the model string ''croc''. The default texture that would be applied is specified by ''croc.png''. 
|}

:<h4>animations.txt format</h4>
:{| class="wikitable" style="display:block; max-width:1000px"
|Each line is in the format: <TileX> <TileY> <FrameX> <FrameY> <Frame size> <Frames count> <Tick delay>
:- ''TileX'' and ''TileY'' indicate the coordinates of the tile in terrain.png that will be replaced by the animation frames. These range from 0 to 15. (inclusive of 15)
:- ''FrameX'' and ''FrameY'' indicates the pixel coordinates of the first animation frame in animations.png. The top left pixel coordinate is (0, 0)
:- ''Frame size'' indicates the size in pixels of an animation frame.
:- ''Frames count'' indicates the number of used frames.  The first frame is located at (FrameX, FrameY), second frame at (FrameX + FrameSize, FrameY) and so forth.
:- ''Tick delay'' is the number of ticks a frame doesn't change. For instance, a value of 0 means that the frame would be changed every tick, while a value of 2 would mean 'replace with frame 1, don't change frame, don't change frame, replace with frame 2'.
|}

===ExtPlayerList v3===
:Proposed by Cheesse
:This extension builds upon the current version and adds the ability to change the visibility of name tags.
:'''Motivation''': Provides more flexibility in naming of players and loading of skins, autocompletion, and player tab-list display. Separates tracking of in-game entities (spawned player models) and names on the player list. '''''ExtAddPlayerName'''''/'''''ExtRemovePlayerName''''' packets take over managing the player names list (tab-list), and '''''ExtAddEntity3'''''/'''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|DespawnPlayer]]''''' packets are used only to manage in-game entities.Provides more flexibility in naming of players and loading of skins, autocompletion, and player tab-list display. Separates tracking of in-game entities (spawned player models) and names on the player list. '''''ExtAddPlayerName'''''/'''''ExtRemovePlayerName''''' packets take over managing the player names list (tab-list), and '''''ExtAddEntity3'''''/'''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|DespawnPlayer]]''''' packets are used only to manage in-game entities.
:'''Client Behavior''': When '''''ExtAddPlayerName''''' packet is received for an unused ''NameID'', a new name must be added to the player-name list. When receiving '''''ExtAddPlayerName''''' packet for an already-listed ''NameID'', client must update its ''ListName'', ''GroupName'', and ''GroupRank''. Names on the player-name list should be grouped by ''GroupName'' in the player-name list. Names within a ''GroupName'' should be sorted by ''GroupRank'' (in ascending order). Names with the same ''GroupName'' and ''GroupRank'' should be sorted alphabetically by ''ListName''. Color codes may be either drawn or stripped from ''ListName'', ''GroupName'', and ''InGameName''. Player-name list must persist when client changes worlds/maps.

:When an '''''ExtAddEntity3''''' packet is received, it must be treated as the '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|SpawnPlayer]]''''' packet. A player model must be spawned in-game at the given location, with ''InGameName'' text drawn above it. Skin should be loaded using the given ''SkinName'' for a player name. If ''SkinName'' appears to be a player name, skin should be downloaded from the default skin server. If ''SkinName'' appears to be a full URL to a PNG image (starts with <code>http://</code> or <code>https://</code> and ends with <code>.png</code>) then skin should be downloaded from that URL. If image is correctly sized/proportioned to use as a skin for the current model, it should be used. If a blank or unrecognized value is given for ''SkinName'', or if given image could not be downloaded or used, then the default skin should be used. The client must also set the visibility according to ''NameVisibility'' and the collision ability of the entity according to ''CanCollide''. When client receives '''''ExtAddEntity3''''' packet for an already-spawned player, a duplicate entity must not be spawned and existing entity's position must not be changed. Instead their ''InGameName'',  ''SkinName'', ''NameVisibility'', and ''CanCollide'' attributes must be updated. If a negative ''EntityID'' is given for '''''ExtAddEntity3''''', client must update player's own spawn point, ''InGameName'', and ''SkinName''. If any undefined value is given in the ''NameVisibility'' or ''CanCollide'' fields, the client should ignore these fields. The client must ignore regular '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|SpawnPlayer]]''''' packets, if any are received.

:When a standard '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|DespawnPlayer]]''''' packet is received for a recognized ''EntityID'', player model must be removed from a world. When '''''ExtRemovePlayerName''''' packet is received for a recognized ''NameID'', their name must be removed from player-name list. Packets with out-of-range or unrecognized ''NameID''s must be ignored.

:In-game entities must never be affected by '''''ExtAddPlayerName''''' or '''''ExtRemovePlayerName''''' packets. Player name list must never be affected by '''''ExtAddEntity3''''' or '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|DespawnPlayer]]''''' packets.
:'''Server Behavior''': Unique ''NameID'' between 0 and 255 should be assigned to every online player or every player on a map for each map. When a new player connects to the server or joins a new map, '''''ExtAddPlayerName''''' must be sent. ''GroupName'' and ''GroupRank'' can be used in any way, for example to group players by map/world or rank/class/faction. Server must use '''''ExtAddEntity3''''' in place of standard '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|SpawnPlayer]]''''' packet. Server should re-send '''''ExtAddPlayerName''''' packet, using the identical ''NameID'', when player's ''ListName'', ''GroupName'', or ''GroupRank'' change. Server must reliably send an '''''ExtRemovePlayerName''''' packet when the player disconnects. Color codes are permitted in ''ListName'', ''GroupName'', and ''InGameName''.

:''This extension only replaces the ExtAddEntity2 packet of the ExtPlayerList extension version 2. Thus, only the ExtAddEntity3 packet is shown here.''
:<h4>ExtAddEntity3 packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="10" | 0x??
(??)
| class="col1 centeralign" | EntityID
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>5</code>
| class="col4 centeralign" | Between 0 and 127
|- class="row2"
| class="col1 centeralign" | InGameName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>&cNotch</code>
| class="col4 centeralign" | Player name to be shown in-game hovering above the player.
|- class="row3"
| class="col1 centeralign" | SkinName
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Notch</code>
| class="col4 centeralign" | Name of the skin that should be used by the client. Could also be a URL to a PNG image.
|- class="row4"
| class="col1 centeralign" | SpawnX
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>1</code>
| class="col4 centeralign" | X coordinate (32 units per block) of entity's spawn location.
|- class="row5"
| class="col1 centeralign" | SpawnY
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>2</code>
| class="col4 centeralign" | Y coordinate (32 units per block) of entity's spawn location.
|- class="row6"
| class="col1 centeralign" | SpawnZ
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>3</code>
| class="col4" | Z coordinate (32 units per block) of entity's spawn location.
|- class="row7"
| class="col1 centeralign" | SpawnYaw
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>4</code>
| class="col4 centeralign" | Orientation (left-right) at the entity's spawn location.
|- class="row8"
| class="col1 centeralign" | SpawnPitch
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>5</code>
| class="col4" | Orientation (up-down) at the entity's spawn location.
|- class="row9"
| class="col1 centeralign" | NameVisibility
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>6</code>
| class="col4 centeralign" | Visibility of the InGameName of the entity. Obstacles can be blocks or other entities.
*0 = (Default) Visible only by hovering the cursor over the entity within view. Ignores any obstacles in the way.
*1 = Visible only by hovering the cursor over the entity within view. Invisible when obstacles block the entity.
*2 = Always visible within view (name tag shrinks over distance). Ignores any obstacles in the way.
*3 = Always visible within view (name tag shrinks over distance). Invisible when obstacles block the entity.
*4 = Always visible anywhere (name tag does not shrink over distance). Ignores any obstacles in the way.
*5 = Always visible anywhere (name tag does not shrink over distance). Invisible when obstacles block the entity.
*6 = Never visible.
|- class="row10"
| class="col1 centeralign" | CanCollide
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | 
*0 = (default) Can collide with the player.
*1 = Cannot collide with the player.
|- class="row11"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 140 bytes
|}
:(Comments go here, please sign them)

===HackControl v2===
:Proposed by Cheesse
:This extension allows more control over the abilities of players.
:'''Motivation''': To gain control over the movement and action abilities of players.
:'''Client Behavior''': Client must be able to receive '''''HackControl2''''' packets at any time and apply the changes defined in the packet immediately. Any value may be given in any field to allow or adjust an ability. If a negative value is given in any field, the client should set that value to its default. If <code>0</code> is given in any field, the client must deactivate that ability and prevent its use by the player unless otherwise stated.
:'''Server Behavior''': Server may send '''''HackControl2''''' packets to successfully connected clients at any time.
:<h4>HackControl2 packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="8" | 0x??
(??)
| class="col1 centeralign" | FlySpeed
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | Defines the speed of flight in player units per quarter-second. A value of 0 or less means the player is not allowed to fly.
|- class="row2"
| class="col1 centeralign" | NoClip
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | 
*0 = Prevent no-clipping
*1 = Allow no-clipping
|- class="row3"
| class="col1 centeralign" | WalkSpeed
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>64</code>
| class="col4 centeralign" | Defines the normal speed of walking in player units per quarter-second. Any negative value allows the player to travel at any speed and overrides any value set by RunSpeed.
|- class="row4"
| class="col1 centeralign" | RunSpeed
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>16</code>
| class="col4 centeralign" | Helps define the ratio of the running speed to the walking speed. This value is then divided by 32 and added to 1 to get the ratio. A value less than or equal to 0 means the player is not allowed to run.
|- class="row5"
| class="col1 centeralign" | AllowRespawn
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4 centeralign" | 
*0 = Prevent respawning
*1 = Allow respawning
|- class="row6"
| class="col1 centeralign" | PointOfView
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | 
*0 = First-person view
*1 = Third-person behind view
*2 = Third-person front view

Setting this field to a defined value will prevent the player from changing their point of view. Setting it to an undefined value will allow the player to switch points of view.
|- class="row7"
| class="col1 centeralign" | JumpHeight
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>40</code>
| class="col4 centeralign" | Maximum height in player units of the player's normal jump.
|- class="row8"
| class="col1 centeralign" | SuperJumpHeight
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>9001</code>
| class="col4 centeralign" | Maximum height in player units of any other jump abilities the player has, like using speed to get a higher jump. A SuperJumpHeight value of 0 means the player is not allowed to superjump. Any negative SuperJumpHeight will override any value in JumpHeight and allow the player to jump to any height.
|- class="row9"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 11 bytes
|}
:(Comments go here, please sign them)

===EnvWeatherType v2===
:Proposed by Cheesse
:This extension allows the server to change the weather conditions and amount of fog.
:'''Motivation''': To allow the server to create a setting, scene or mood on a map; or to limit the players vision for things like smoke bombs in games. (Fog/View Distance is placed here because the EnvSetMapAppearance2 packet would be too big to include such a versatile feature.)
:'''Client Behavior''': Client must be able to receive '''''EnvSetWeatherType2''''' packets at any time and apply the changes defined in the packet immediately. If an undefined value is used in the ''WeatherType'' or ''WeatherStrength'' fields, the client should ignore that value. If a negative value is given in the ''MaxFog'' field, the client should set that value to its own default. The client should make smooth changes between different strengths of weather and fog distances.
:'''Server Behavior''': Server may send '''''EnvSetWeatherType2''''' packets to successfully connected clients at any time.
:<h4>EnvSetWeatherType2 packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | WeatherType
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | 
*0 = Sunny
*1 = Rainy
*2 = Snowy
|- class="row2"
| class="col1 centeralign" | WeatherStrength
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>120</code>
| class="col4 centeralign" | These values should be scaled such that a value of 120 should correspond to 100%. From 0-120.
|- class="row3"
| class="col1 centeralign" | MaxFog
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>128</code>
| class="col4 centeralign" | The distance in blocks of the wall of fog away from the player
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 5 bytes
|}
:(Comments go here, please sign them)

===MessageTypes v2===
:Proposed by Cheesse
:This extension adds new ways of presenting information to the player.
:'''Motivation''': To allow the server to send messages in different places and for limited times.
:'''Client Behavior''': Client must interpret the ''PlayerID'' field of the standard [[Classic_Protocol#Server_.E2.86.92_Client_packets|'''''Message''''']] packet as the ''Message Type'' field. Certain values in this field correspond to different locations for messages on the screen. Any undefined values in this field should be ignored and presented as regular chat messages. Without mutual server-client support for this extension, this field should be ignored.
:'''Server Behavior''': Server may use the ''PlayerID'' field of the [[Classic_Protocol#Server_.E2.86.92_Client_packets|'''''Message''''']] packet to have that message placed at a certain location on the player's screen.
:{| class="wikitable"
|- class="row0"
! class="col0" | MessageType Value
! class="col1" | Meaning
! class="col2" | Message Placement
|- class="row1"
| class="col0 centeralign" | 0
| class="col1 centeralign" | Chat
| class="col2 centeralign" | In the chatbox.
|- class="row2"
| class="col0 centeralign" | 1
| class="col1 centeralign" | Status1
| class="col2 centeralign" | At the top right of the screen.
|- class="row3"
| class="col0 centeralign" | 2
| class="col1 centeralign" | Status2
| class="col2 centeralign" | At the top right of the screen below Status1.
|- class="row4"
| class="col0 centeralign" | 3
| class="col1 centeralign" | Status3
| class="col2 centeralign" | At the top right of the screen below Status2.
|- class="row5"
| class="col0 centeralign" | 11
| class="col1 centeralign" | BottomRight1
| class="col2 centeralign" | At the bottom right of the screen.
|- class="row6"
| class="col0 centeralign" | 12
| class="col1 centeralign" | BottomRight2
| class="col2 centeralign" | At the bottom right of the screen above BottomRight1.
|- class="row7"
| class="col0 centeralign" | 13
| class="col1 centeralign" | BottomRight3
| class="col2 centeralign" | At the bottom right of the screen above BottomRight2.
|- class="row8"
| class="col0 centeralign" | 45
| class="col1 centeralign" | LeftHotbar
| class="col2 centeralign" | On top of the hotbar aligned to the left.
|- class="row9"
| class="col0 centeralign" | 54
| class="col1 centeralign" | RightHotbar
| class="col2 centeralign" | On top of the hotbar aligned to the right.
|- class="row10"
| class="col0 centeralign" | 100
| class="col1 centeralign" | BigAnnouncement
| class="col2 centeralign" | In large font slightly above the center of the screen.
|- class="row11"
| class="col0 centeralign" | 200
| class="col1 centeralign" | SmallAnnouncement
| class="col2 centeralign" | Near the center of the screen below BigAnnouncement.
|}
This extension does not define any new packets.
:(Comments go here, please sign them)

===ExtMapInfo===
:Proposed by Cheesse
:This extension allows the server to send the client some of the map's metadata and other information
:'''Motivation''': To allow clients to save metadata with the maps they choose to save. This extension can also be modified to add more features to maps.
:'''Client Behavior''': Client must be able to receive '''''FinalMapInfo''''' packets at any time after a '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelInitialize]]''''' packet has been received and before a '''''FinalMapInfo''''' packet has been received. Client should store the values in these fields in memory to be used later. The metadata defined in these fields come from those defined in the ClassicWorld file definitions. Client should ignore any '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelFinalize]]''''' packets recieved.
:'''Server Behavior''': Server must send '''''FinalMapInfo''''' packets with the correct values after it has finished sending the client the raw block data after sending a '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelInitialize]]''''' packet. The server should not send this packet at any other time. The server should never send any '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelFinalize]]''''' packets to the client.
:<h4>FinalMapInfo packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="11" | 0x??
(??)
| class="col1 centeralign" | "FormatVersion
  
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>1</code>
| class="col4 centeralign" | The FormatVersion is currently set to 1.
|- class="row2"
| class="col1 centeralign" | "MapName"
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>main</code>
| class="col4 centeralign" | The name of the map.
|- class="row3"
| class="col1 centeralign" | "UUID"
| class="col2 centeralign" | byte array [16]
| class="col3 centeralign" | <code>abcdefghijklmnop</code>
| class="col4 centeralign" | The UUID of the map.
|- class="row4"
| class="col1 centeralign" | "XSize"
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>128</code>
| class="col4 centeralign" | The length of the map in the X dimension.
|- class="row5"
| class="col1 centeralign" | "YSize"
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>128</code>
| class="col4 centeralign" | The length of the map in the Y dimension.
|- class="row6"
| class="col1 centeralign" | "ZSize"
| class="col2 centeralign" | short
| class="col3 centeralign" | <code>128</code>
| class="col4 centeralign" | The length of the map in the Z dimension.
|- class="row7"
| class="col1 centeralign" | "CreatedBy"
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Cheesse</code>
| class="col4 centeralign" | The name of the author of the map. This should be an existing Classicube username.
|- class="row8"
| class="col1 centeralign" | "MapGenSoftware"
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Mapbuilder</code>
| class="col4 centeralign" | The name of the software used to generate the map.
|- class="row9"
| class="col1 centeralign" | "MapGenName"
| class="col2 centeralign" | string
| class="col3 centeralign" | <code>Flat</code>
| class="col4 centeralign" | The name of the generator function used to generate the map.
|- class="row10"
| class="col1 centeralign" | "TimeCreated"
| class="col2 centeralign" | long
| class="col3 centeralign" | <code>1234567890</code>
| class="col4 centeralign" | The UTC Unix timestamp of the time the map was generated.
|- class="row11"
| class="col1 centeralign" | "TimeLastModified"
| class="col2 centeralign" | long
| class="col3 centeralign" | <code>1234567890</code>
| class="col4 centeralign" | The UTC Unix timestamp of the time the map was last modified.
|- class="row12"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 298 bytes
|}
:(Comments go here, please sign them)

===BulkBlockUpdate===
:Proposed by Buzz, UnknownShadow200
:Allows servers to send a single packet that contains 256 block updates.
:'''Motivation''': Reduce bandwidth usage and hence increase responsiveness to clients during times of heavy block updates, e.g. for large cuboids or lava survival servers.
:'''Client Behavior''': When this extension is mutually supported, treat the packet in the same manner as a list of up to 256 [[Classic_Protocol#Client_.E2.86.92_Server_packets|'''''SetBlock''''']] packets.
:'''Server Behavior''': When this extension is mutually supported, server may send '''''BlockBulkUpdate''''' packet to the client after the '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelFinalize]]''''' packet for the current level has been sent to the client.
<h4>BulkBlockUpdate packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x26
(38)
| class="col1 centeralign" | Count
  
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | The number of block updates used in this packet - 1. (e.g. a value of 0 means 1 block update is used).
|- class="row2"
| class="col1 centeralign" | Indices
| class="col2 centeralign" | byte array[1024]
| class="col3 centeralign" | [52, 3443]
| class="col4 centeralign" | A packed list of the indices within the current level of the blocks that are to be updated. 
Each element is a 32 bit integer in big endian order.
|- class="row3"
| class="col1 centeralign" | Blocks
| class="col2 centeralign" | byte array[256]
| class="col3 centeralign" | [5, 10]
| class="col4 centeralign" | A packed list of the new blocks to set at each corresponding index in the indices array.
|- class="row12"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 1282 bytes
|}
:(Comments go here, please sign them)

===TextColors===
:Proposed by UnknownShadow200
:This extension allows the server to define custom text colors.
:'''Motivation''': To allow parts of chat to be more distinctive, allow for more colorful chat, etc.
:'''Client Behavior''': Client must be able to receive '''''SetTextColor''''' packets at any time. Client must then draw text using the color specified in the packet, when the color code specified by the packet is encountered in any '''''Message''''' packet. An alpha/opacity of 0 is treated as removing the custom colour code from the client's list of custom color codes.
:'''Server Behavior''': Server may send '''''SetTextColor''''' packets at any time.
:'''Compatibility''': Clients may choose to always draw text fully opaque, even if the custom text colour specifies a non fully-opaque color. These clients shall still be considered as compliant with the specification.
: The color code in the ''SetTextColor'' must be greater than 0x20 and less than 0x7F. Additionally, the color code must not be in the range 0x2F-0x39, 0x41-0x46, or 0x61-0x66, as they are used by the standard hex color codes.
:<h4>SetTextColor packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="11" | 39
| class="col1 centeralign" | Red
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>255</code>
| class="col4 centeralign" | Red component of the text color.
|- class="row2"
| class="col1 centeralign" | Green
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>0</code>
| class="col4 centeralign" | Green component of the text color.
|- class="row3"
| class="col1 centeralign" | Blue
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>127</code>
| class="col4 centeralign" | Blue component of the text color.
|- class="row4"
| class="col1 centeralign" | Alpha
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>255</code>
| class="col4 centeralign" | Alpha/Opacity of the text colour, with 255 being fully opaque.
|- class="row5"
| class="col1 centeralign" | Code
| class="col2 centeralign" | unsigned byte
| class="col3 centeralign" | <code>63</code>
| class="col4 centeralign" | ASCII character colour code.
|- class="row12"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 298 bytes
|}
"''Example:'' Suppose the server sends a '''''SetTextColor''''' packet of color #123456 and color code 0x67(lowercase g). When the client receives a '''''Message''''' packet with the text ''&fFoo&gBar.'', ''Foo'' is drawn using the color #FFFFFF and  ''Bar'' is drawn using the color #123456.
:(Comments go here, please sign them)

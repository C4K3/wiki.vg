=Template=
Add your proposal at the end of the page. Please use [[Classic_Protocol_Extension#Extensions|existing extensions]] as your guide to formatting. Please sign your proposals and comments by ending it with <code><nowiki>~~~~</nowiki></code>.
<pre><nowiki>===ExtensionName===
:Proposed by ~~~~
:Brief summary of the extension.
:'''Motivation''': Explain why this is needed or how it is useful.
:'''Client Behavior''': Detailed description of all new behavior that game clients need to implement in order to support this extension. Consider interaction with other extensions.
:'''Server Behavior''': Detailed description of all new behavior that game servers need to implement in order to support this extension. Consider interaction with other extensions.
:(Packet definitions, remarks, illustrations, and data tables go here)
:(Comments go here, please sign them)
</nowiki></pre>
=Proposals=
===PlaySound===
:Proposed by !!!WARLOCK!!!
:This extension allows server to play custom sound and musics on client.
:'''Motivation''': Servers can play custom musics or sound effects just in time or when something changes. Useful for gamemodes such as zombie survival, Servers can play zombie moaning sound while zombies are close to players. Player join and leave sounds, Kill streak sounds for games such as CTF, Radio and DJ class for players and sound effects for explosions and player deaths.
:'''Client Behavior''': Client must download and load, or load the sound directly from the URL with the ID. Client must be able to download any time after MapFinalize has sent. If the URL is empty then the Client must unload the sound with that ID. Client must unload the sound and load a new one if there's a sound with existing ID. Client must be able to play the sound right after receiving the PlaySound packet. The last playing sound can not be ignored or stopped when a new sound is going to be played. Files type must be in .WAV, otherwise they're ignored. Client must ignore downloading the existing files from Server if they're saved in drive. Client must not change the volume of all environments (Place/Destroy, Walk sounds) on SetVolume packet. Client must change a local variable for volume of next playing sound on SetVolume packet.
:'''Server Behavior''': Server must ignore sending the same url multiple times. Server can not send quick loops of sound due to network speed and client crash possibility. It's better to load all of required sounds after map load for better performance. Server must not send high sized file cause of time and speed it takes for download. Files type must be in .WAV, otherwise they're ignored. Server can change the volume before playing a sound. For a better networking, It's suggested to not send PlaySound instead of changing volume to zero.
:<h4>LoadSound packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | ID
| class="col2 centeralign" | byte
| class="col3 centeralign" | 143
| class="col4 centeralign" | Gives the URL an ID.
|- class="row2"
| class="col1 centeralign" | URL
| class="col2 centeralign" | string
| class="col3 centeralign" | http://site.com/firstblood.wav
| class="col4 centeralign" | Address to a .WAV file, put this empty for unload.
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 66 bytes
|}
:<h4>PlaySound packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | ID
| class="col2 centeralign" | byte
| class="col3 centeralign" | 125
| class="col4 centeralign" | Plays the sound saved as ID.
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}
:<h4>SetVolume packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Percent
| class="col2 centeralign" | byte
| class="col3 centeralign" | 87
| class="col4 centeralign" | Set the next playing sound(s) volume to a Percentage.
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}

===ClientRedirection===
:Proposed by [[User:Sysr q|Sysr q]] ([[User talk:Sysr q|talk]]) 10:17, 12 May 2014 (UTC)
:This extension allows servers to give clients a ''redirection'' to a separate, possibly "private" server.
:'''Motivation''': Allowing servers to redirect clients would be useful in several cases. Allowing a singular "hub" server to redirect players to various external (but related) servers depending on the gamemode they wish to play would allow tightly integrated networks. If servers are using an external "balancer" or some sort of Minecraft-aware proxy, the server could signal the proxy move its connection on the client's behalf to another server.
:'''Client Behavior''': Clients should be ready to receive a '''''ClientRedirection''''' packet any time after they receive a '''''LevelFinalize''''' packet. When clients receive a '''''ClientRedirection''''' packet, they should prompt the user with a message indicating the server they're being redirected too, and allow the user to continue or quit. Non-player clients (e.g., proxies) have the option of silently reconnecting on the client's behalf. Clients should then open a new connection to the newly redirected server, and begin standard negotiation protocol.
:'''Server Behavior''': Servers should only send a '''''ClientRedirection''''' packet after the they have sent a '''''LevelFinalize''''' packet. They should ensure the new server the client is being redirected to exists, and preferably is online and available.
:<h4>ClientRedirection packet</h4>
:''Server to client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Address
| class="col2 centeralign" | string
| class="col3 centeralign" | mc.example.org
| class="col4 centeralign" | Can be an IP address (IPv4/IPv6) or a hostname.
|- class="row2"
| class="col1 centeralign" | Port
| class="col2 centeralign" | int
| class="col3 centeralign" | 25565
| class="col4 centeralign" |
|- class="row3"
| class="col1 centeralign" | Name
| class="col2 centeralign" | string
| class="col3 centeralign" | Joe Blogg's Freebuild
| class="col4 centeralign" | ''(optional)'' User-friendly name to be displayed in user prompt.
|- class="row4"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 133 bytes
|}

===PlayerClick===
:Proposed by umby24
:This extension is used to alert server owners that a player has clicked on something.
:'''Motivation''': The motivation for this extension is to allow for the creation of more interactive maps.
:'''Client Behavior''': Whenever a client clicks on something (right, middle or left click) the client should send a PlayerClicked packet to the server.
:'''Server Behavior''': Server should be ready to accept PlayerClicked packet at any time after level sending has completed. At which point, handling of this packet is entirely up to the server developer.
<h4>PlayerClicked packet</h4>
:''Client to Server''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Button
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4 centeralign" | 0 = Left click, 1 = Middle click, 2 = Right Click
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}
:(Comments go here, please sign them)

===BlockDefinitions===
:Proposed by Rayne and Hetal on behalf of the MCForge team, with contributions by fragmer.
:This extension allows servers to define new block types with custom IDs and appearance.
:'''Motivation''': To allow defining block types without client modifications. To make full use of custom textures.
:'''Client Behavior''': This extension depends on [[Classic_Protocol_Extension#EnvMapAppearance|EnvMapAppearance extension]], and must only be enabled if BOTH extensions are mutually supported. Client should be able receive any number of '''''DefineBlock''''' and '''''RemoveBlockDefinition''''' packets during the level loading process (after receiving '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelInitialize]]''''' and until receiving '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelFinalize]]''''' packets). Client must keep track of all defined blocks between level changes or until they are individually removed with '''''RemoveBlockDefinition'''''.
:Client must be able to accept and render blocks as specified in '''''DefineBlock''''' packets. Clients must accept any valid definitions with ''BlockID'' between 128 and 255, inclusive. If a new definition is accepted for an already-defined ''BlockID'', the old definition should be replaced. If '''''RemoveBlockDefinition''''' is received for a non-defined ''BlockID'', it should be ignored.

:'''Texturing''': New textured are defined by altering <code>terrain.png</code> and specifying it with '''''[[Classic_Protocol_Extension#EnvSetMapAppearance_packet|EnvSetMapAppearance]]''''' packet. '''''DefineBlock''''' fields ''TopTextureID'', ''SideTextureID'', and ''BottomTextureID'' refer to a tile number within <code>terrain.png</code>. Tiles are numbered 0 (top-left corner) through 255 (bottom-right corner), increasing left-to-right within each row. Tiles 0-127 are reserved for standardized blocks. Refer to table 1 for a list of standard tiles ('''TODO'''). Block definitions can use these tiles, but texture makers should be careful not to accidentally overwrite tiles in this range (top half of <code>terrain.png</code>) to avoid changing appearance of standardized blocks that use them. Positions 128-255 (the bottom half of <code>terrain.png</code>) can be textured and used in any way.

:'''Server Behavior''': Server may send any number of '''''DefineBlock''''' packets when client expects it. Server should only use IDs of currently-defined blocks in block data sent in '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|LevelDataChunk]]''''' packets, '''''[[Classic_Protocol#Server_.E2.86.92_Client_packets|SetBlock]]''''' packets, or any other packets that expect block IDs.

:'''Compatibility''': TODO: Define what the server should do for non-supporting clients. Define how the client should store map files with block definitions. Maybe integrate this with ClassicWorld definition?

:<h5>DefineBlock Packet</h5>
:''Server to Client''
:{| class="wikitable"
|-
! Packet ID
! Field Name
! Field Type
! Example
! Notes
|-
| class="centeralign" rowspan="13" | ???
| class="centeralign" | BlockID
| class="centeralign" | byte
| class="centeralign" | <code>128</code>
| Between 128 and 255 (unsigned).
|-
| class="centeralign" | Shape
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| Shape of the block model:
#Cube
#Slab
#UpsideDownSlab
|-
| class="centeralign" | Name
| class="centeralign" | String
| class="centeralign" | <code>Cactus</code>
| Short, unique, player-friendly name for the block.
|- 
| class="centeralign" | Solidity
| class="centeralign" | byte
| class="centeralign" | <code>1</code>
| Specified collision mode for this block type.
Blocks may be walk-through (0), swim-through (1), or solid (2).
* Walk-through blocks do not collide with the player, and do not interfere with jumping. Players fall through these blocks.
* Swim-through blocks allow the player to descend or ascend slowly (at ''WalkSpeed''), as if they were swimming.
* Solid blocks collide with the player. Players may walk on these.
|-
| class="centeralign" | MovementSpeed
| class="centeralign" | byte
| class="centeralign" | <code>1</code>
| Player movement speed modifier, defined relative to regular walk speed. Ratio to normal speed is computed with this formula:
y = 2<sup>(x-128)/64</sup>
Thus a value of <code>0</code> translates to 0.25 ratio (25% speed), <code>128</code> to 1.00 ratio (100% speed), and <code>255</code> to 3.96 (396% speed).
* If ''Solidity'' is set to 0 or 1, speed is modified while player is inside (i.e. colliding with) the block.
* If ''Solidity'' is set to 2, speed is modified while players is standing on the block.
If player is affected by several tiles, the *lowest* of all modifiers is used.
|-
| class="centeralign" | TopTextureID
| class="centeralign" | byte
| class="centeralign" | <code>1</code>
| Refers to a <code>terrain.png</code> tile.
Between 0 and 255 (unsigned).
Can be same as other texture IDs.
|-
| class="centeralign" | SideTextureID
| class="centeralign" | byte
| class="centeralign" | <code>2</code>
| Refers to a <code>terrain.png</code> tile.
Between 0 and 255 (unsigned).
Can be same as other texture IDs.
|-
| class="centeralign" | BottomTextureID
| class="centeralign" | byte
| class="centeralign" | <code>3</code>
| Refers to a <code>terrain.png</code> tile.
Between 0 and 255 (unsigned).
Can be same as other texture IDs.
|-
| class="centeralign" | MaskedTransparency
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| Can be <code>0</code> (no masked transparency) or <code>1</code> (masked transparency).
Blocks with masked transparency enabled use the texture's alpha channel (like leaves).
|-
| class="centeralign" | Opacity
| class="centeralign" | byte
| class="centeralign" | <code>255</code>
| Full-tile opacity value. Between 0 (fully transparent) and 255 (fully opaque).
|-
| class="centeralign" | TransmitsLight
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| Whether this block allows the sunlight to go through, for level-lighting purposes.
|-
| class="centeralign" | WalkSound
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| ID of a sound that client may play when player "steps" on, "walks" through, or "swims" through this tile.
Must be one of sound IDs defined in Table #2 '''TODO'''.
|-
| class="centeralign" | BreakSound
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| ID of breaking sound that client should play when player breaks this block.
Must be one of sound IDs defined in Table #2 '''TODO'''.
|-
! Total Size:
| class="rightalign" colspan="4" | 73 bytes
|}

:<h5>DefineLiquid Packet</h5>
:''Server to Client''
:{| class="wikitable"
|-
! Packet ID
! Field Name
! Field Type
! Example
! Notes
|-
| class="centeralign" rowspan="14" | ???
| class="centeralign" | BlockID
| class="centeralign" | byte
| class="centeralign" | <code>128</code>
| Between 128 and 255 (unsigned).
|-
| class="centeralign" | Name
| class="centeralign" | String
| class="centeralign" | <code>Cactus</code>
| Short, unique, player-friendly name for the block.
|-
| class="centeralign" | Solidity
| class="centeralign" | byte
| class="centeralign" | <code>1</code>
| Specifies collision mode for this block type.
Blocks may be walk-through (0), swim-through (1), or solid (2).
|-
| class="centeralign" | MovementSpeed
| class="centeralign" | byte
| class="centeralign" | <code>1</code>
| Player movement speed modifier, defined relative to regular walk speed. Ratio to normal speed is computed with this formula:
y = 2<sup>(x-128)/64</sup>

Thus a value of <code>0</code> translates to 0.25 ratio (25% speed), <code>128</code> to 1.00 ratio (100% speed), and <code>255</code> to 3.96 (396% speed).
* If ''Solidity'' is set to 0 or 1, speed is modified while player is inside (i.e. colliding with) the tile.
* If ''Solidity'' is set to 2, speed is modified while players is standing on the tile.
If player is affected by several tiles, the *lowest* of all modifiers is used.
|-
| class="centeralign" | TopTextureID
| class="centeralign" | byte
| class="centeralign" | <code>1</code>
| Refers to a <code>terrain.png</code> tile.
Between 0 and 255 (unsigned).
Can be same as other texture IDs.
|-
| class="centeralign" | SideTextureID
| class="centeralign" | byte
| class="centeralign" | <code>2</code>
| Refers to a <code>terrain.png</code> tile.
Between 0 and 255 (unsigned).
Can be same as other texture IDs.
|-
| class="centeralign" | BottomTextureID
| class="centeralign" | byte
| class="centeralign" | <code>3</code>
| Refers to a <code>terrain.png</code> tile.
Between 0 and 255 (unsigned).
Can be same as other texture IDs.
|-
| class="centeralign" | Opacity
| class="centeralign" | byte
| class="centeralign" | <code>255</code>
| Full-tile opacity value. Between 0 (fully transparent) and 255 (fully opaque).
|-
| class="centeralign" | TransmitsLight
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| Whether this block allows the sunlight to go through, for level-lighting purposes.
|-
| class="centeralign" | FogDensity
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| Density of fog while client's camera is inside this liquid.
Value of <code>0</code> means "do not change fog" -- level's default settings are used.
Values between 1 and 255 are mapped to OpenGL's GL_FOG_DENSITY value for GL_EXP2 style fog with the following formula:

GL_FOG_DENSITY = (x+1)/128

Thus value of <code>1</code> means density of ~0.0156, value of <code>127</code> means 1.0000, and <code>255</code> means 2.0000
|-
| class="centeralign" | FogR
| class="centeralign" | byte
| class="centeralign" | <code>255</code>
| Red component of the aforementioned fog. Only applies if ''FogDensity'' is above <code>0</code>.
|-
| class="centeralign" | FogG
| class="centeralign" | byte
| class="centeralign" | <code>255</code>
| Green component of the aforementioned fog. Only applies if ''FogDensity'' is above <code>0</code>.
|-
| class="centeralign" | FogB
| class="centeralign" | byte
| class="centeralign" | <code>255</code>
| Blue component of the aforementioned fog. Only applies if ''FogDensity'' is above <code>0</code>.
|-
| class="centeralign" | WalkSound
| class="centeralign" | byte
| class="centeralign" | <code>0</code>
| ID of a sound that client may play when player "steps" on, "walks" through, or "swims" through this tile.
Must be one of sound IDs defined in Table #2 '''TODO'''.
|-
! Total Size:
| class="rightalign" colspan="4" | 73 bytes
|}

:<h5>RemoveBlockDefinition Packet</h5>
:''Server to Client''
:{| class="wikitable"
|-
! Packet ID
! Field Name
! Field Type
! Example
! Notes
|-
| class="centeralign" | ???
| class="centeralign" | BlockID
| class="centeralign" | byte
| class="centeralign" | <code>128</code>
| Between 128 and 255
|-
! Total Size:
| class="rightalign" colspan="4" | 2 bytes
|}

:'''Future References''': The client developers will be able to add more base blocks but then the server developers will have to change their Ids sent if the block is being occupied as a base block. If any of the fields are incorrectly configured, the client shall disconnect with an error message briefly describing why it crashed ("Invalid Custom Block located at Id : ID").
:'''Example''': Let's say I have a block called bullet being launched from a block (the block launching the bullet is not required for this situation). I could add that block's Id to the client using ADD_CUSTOM_BLOCK by AddCustomBlock((byte)66/*BulletBlockId*/, (byte)2);, and if my textureUrl in the EnvMapAppearance sent afterwards was actually containing a bullet in the correct slot, the block would inherit actual bullet textures making it realistic and yet again fun.
:'''TABLE 1''': TODO: list of tiles already defined in terrain.png, for both standard and CustomBlocks level 1 blocks.
:'''TABLE 2''': TODO: list of sounds available for footstep and breaking sounds

===LongerMessages===
:Proposed by [[User:F|F]] ([[User talk:F|talk]]) 21:43, 28 August 2014 (UTC)
:This extension allows clients to accept messages longer than 64 characters, and send them to the server in parts.
:'''Motivation''': To allow players to write longer messages!
:'''Client Behavior''': When a regular-length message is sent, a single [[Classic_Protocol#Server_.E2.86.92_Client_packets|'''''Message''''']] packet is sent, with the unused ''PlayerID'' (aka ''MessageType'') byte set to <code>0</code>. When an extra-long message is sent, multiple [[Classic_Protocol#Server_.E2.86.92_Client_packets|'''''Message''''']] packets are sent. All packets except the last one should have the unused byte set to <code>1</code>, meaning "this message continues in the next Message packet".
:'''Server Behavior''': Server should check the unused ''PlayerID'' (aka ''MessageType'') byte of every incoming [[Classic_Protocol#Server_.E2.86.92_Client_packets|'''''Message''''']] packet. If the value is non-zero, it should treat it as a partial message. Partial messages should be stored and prepended to the next message received from this player, until a message with a <code>0</code> byte is received.
:No new packets are defined, but treatment of [[Classic_Protocol#Server_.E2.86.92_Client_packets|'''''Message''''']] packet is altered.
===ColorCodeControl===
:Proposed by [[User:F|F]] ([[User talk:F|talk]]) 22:00, 28 August 2014 (UTC)
:Gives servers an option to allow players to type in color codes, and a way to render <code>&</code> character in chat.
:'''Motivation''': Allow players to type in color codes and to use & in chat.
:'''Client Behavior''': When this extension is mutually supported, treat character sequence <code>&&</code> as meaning "draw an <code>&</code> character", without modifying current color. Do not allow <code>&</code> to be typed or pasted into chat unless '''''ColorCodeControl''''' packet has been received with ''AllowColorCodes'' set to <code>1</code>.
:'''Server Behavior''': When this extension is mutually supported, server may send '''''ColorCodeControl''''' packet to allow client to type or paste color codes. Server should treat <code>&&</code> as described above.
<h4>ColorCodeControl packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" | ??
| class="col1 centeralign" | AllowColorCodes
| class="col2 centeralign" | byte
| class="col3 centeralign" | 0
| class="col4 centeralign" | 0 = disallow
1 = allow
|- class="row2"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 2 bytes
|}
===UnicodeChat===
:Proposed by [[User:F|F]] ([[User talk:F|talk]]) 22:48, 28 August 2014 (UTC)
:Expands character encoding beyond ASCII. There are three ways to go about this:
:# Expand charset to 256 characters using '''[http://en.wikipedia.org/wiki/Windows-1252 Win-1252]'''.
:#* <span style="color:#060">'''Pro'''</span>: Easiest to implement in clients (few changes to FontRenderer needed) and servers (no multibyte character support needed).
:#* <span style="color:#060">'''Pro'''</span>: No new packets needed.
:#* <span style="color:#060">'''Pro'''</span>: Easy to create custom fonts.
:#* <span style="color:#060">'''Pro'''</span>: Easy for servers to maintain compatibility with legacy clients, since only 128 characters need to be remapped, most of which have decent ASCII matches.
:#* <span style="color:#060">'''Pro'''</span>: Low resource use (low RAM and VRAM use, no additional CPU use, small font file).
:#* <span style="color:#c00">'''Con'''</span>: Still only 256 characters. Only covers Latin-derived (English and Western/Central European) languages and common symbols.
:# Expand charset to Unicode [http://en.wikipedia.org/wiki/Basic_Multilingual_Plane#Basic_Multilingual_Plane Basic Multilingual Plane] (BMP) with '''UCS-2''' fixed-length encoding.
:#* <span style="color:#060">'''Pro'''</span>: Lots of characters (~65k) covering most languages and symbols.
:#* <span style="color:#060">'''Pro'''</span>: Not too hard to implement (characters still fixed-width, native support in WinAPI / Java / C#).
:#* <span style="color:#060">'''Pro'''</span>: Free fonts available that covers all characters.
:#* <span style="color:#c00">'''Con'''</span>: New renderer (possibly third-party library) needed for rendering.
:#* <span style="color:#c00">'''Con'''</span>: Higher resource use (higher RAM and VRAM use, more CPU use, large font file).
:#* <span style="color:#c00">'''Con'''</span>: Very hard to create custom fonts.
:#* <span style="color:#c00">'''Con'''</span>: Still does not cover all characters.
:#* <span style="color:#c00">'''Con'''</span>: Hard for servers to maintain compatibility with legacy clients.
:#* <span style="color:#c00">'''Con'''</span>: Always uses 2 bytes per character for transmission (twice as much as ASCII/CP-1252).
:# Expand charset to Unicode [http://en.wikipedia.org/wiki/Basic_Multilingual_Plane#Basic_Multilingual_Plane Basic Multilingual Plane] (BMP) with '''UTF-8''' variable-length encoding.
:#* <span style="color:#060">'''Pro'''</span>: Lots of characters (~65k) covering most languages and symbols.
:#* <span style="color:#060">'''Pro'''</span>: Not too hard to implement (characters can be freely converted to/from UCS-2, which is natively support in WinAPI / Java / C#).
:#* <span style="color:#060">'''Pro'''</span>: Free fonts available that covers all characters.
:#* <span style="color:#060">'''Pro'''</span>: Uses 1 byte per character for transmission, most of the time.
:#* <span style="color:#c00">'''Con'''</span>: New renderer (possibly third-party library) needed for rendering.
:#* <span style="color:#c00">'''Con'''</span>: Higher resource use (higher RAM and VRAM use, more CPU use, large font file).
:#* <span style="color:#c00">'''Con'''</span>: Very hard to create custom fonts.
:#* <span style="color:#c00">'''Con'''</span>: Still does not cover all characters.
:#* <span style="color:#c00">'''Con'''</span>: Hard for servers to maintain compatibility with legacy clients.
:# Expand charset to full Unicode with '''UTF-8''' variable-length encoding. Includes all the supplemental Unicode planes.
:#* <span style="color:#060">'''Pro'''</span>: Widely used in other software.
:#* <span style="color:#060">'''Pro'''</span>: Theoretically covers all languages and symbols.
:#* <span style="color:#060">'''Pro'''</span>: Uses 1 byte per character for transmission, most of the time.
:#* <span style="color:#c00">'''Con'''</span>: Does not ''actually'' cover all languages and symbols due to non-existence of 100% fonts.
:#* <span style="color:#c00">'''Con'''</span>: Hard to find free fonts that extend beyond the BMP.
:#* <span style="color:#c00">'''Con'''</span>: Harder to work with strings (due to variable-width characters).
:#* <span style="color:#c00">'''Con'''</span>: Third-party library needed for rendering.
:#* <span style="color:#c00">'''Con'''</span>: Highest resource use (highest RAM and VRAM use, most CPU use, largest font files).
:#* <span style="color:#c00">'''Con'''</span>: Harder to implement (no native support in WinAPI / Java / C#).
:#* <span style="color:#c00">'''Con'''</span>: Impossible to create custom fonts.
:#* <span style="color:#c00">'''Con'''</span>: Very hard for servers to maintain compatibility with legacy clients.

===ColorControl===
:Proposed by !!!WARLOCK!!!
:Changes the color alpha (A) of Messagetypes to a custom number.
:'''Motivation''': Allows servers to make gradient/glass like text messages at Message Type's IDs.
:'''Client Behavior''': If this packet is received, Client should directly change the alpha color of the specified chat message into a custom number. If the default message ID `0` is received, client should be changing the alpha code of the all incoming and received chat lines into the specified number. The alpha code remains until the client disconnects from the server, and should be functional with all incoming and already received messages. Client should be able to receive this message after the Initial map load.
:'''Server Behavior''': Server can send this packet to clients right after client finished loading the initial map. Message type can be any of stated/defined numbers on the packet (Message Type).
<h4>ColorControl packet</h4>
:''Server to Client''
:{| class="wikitable"
|- class="row0"
! class="col0" | Packet ID
! class="col1" | Field Name
! class="col2" | Field Type
! class="col3" | Example
! class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x??
(??)
| class="col1 centeralign" | Message Type
| class="col2 centeralign" | byte
| class="col3 centeralign" | 11
| class="col4 centeralign" | Message Type ID.
|- class="row2"
| class="col1 centeralign" | Alpha Code
| class="col2 centeralign" | byte
| class="col3 centeralign" | 154
| class="col4 centeralign" | Alpha code of color (From 0 - 255).
|- class="row3"
! class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 3 bytes
|}

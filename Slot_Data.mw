The '''slot''' data structure is how minecraft represents an item and its associated data in the [[Protocol|minecraft protocol]]

== Packets ==

* [[Protocol#Entity_Equipment_.280x05.29|0x05 Entity Equipment]]
* [[Protocol#Player_Block_Placement_.280x0F.29|0x0F Player Block Placement]]
* [[Protocol#Window_click_.280x66.29|0x66 Window Click]]
* [[Protocol#Set_slot_.280x67.29|0x67 Set Slot]]
* [[Protocol#Window_items_.280x68.29|0x68 Window Items]] (as an array)
* [[Protocol#Creative_inventory_action_.280x6B.29|0x6B Creative Inventory Action]]

== Format ==

The structure consists of at least a short, which gives the item/block ID [http://www.minecraftwiki.net/wiki/Block_ids#Block_IDs_.28Minecraft_Beta.29]. A value of <code>-1</code> signifies that the slot is empty, and no further data follows.

If the block ID is not <code>-1</code>, two more fields follow. These fields are a byte (item count) and a short (length of item metadata).

If the short (length of item metadata) is <code>-1</code>, there is no item metadata, and no further data follows. Otherwise, a byte array will follow.

The byte array contains gzipped (that is RFC 1952 rather than RFC 1950) [[NBT]] data. The format of this data is as follows:

<code>
  COMPOUND: <nowiki>''</nowiki>
    LIST: 'ench'
      COMPOUND
        SHORT: 'id'
        SHORT: 'lvl'
      END
      COMPOUND
        ...etc
      END
  END
</code>

Each of the inner, untagged COMPOUNDs represents an enchantment, with its ID[http://www.minecraftwiki.net/wiki/Enchantment#Enchantment_Types] and level given as child SHORT elements.

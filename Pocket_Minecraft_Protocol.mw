Unlike the Minecraft protocol, this protocol uses UDP with (so far observed, at least) one message per packet. This makes the protocol easier to work with when it comes to packet serialization, and might offer latency improvements, but will inevitably have the usual UDP issues (packets lost, truncated, duplicated, out-of-order, etc.).

'''Servers listen on UDP port 19132.'''

Clients don't pick any specific port to listen on.


Please note that even where packet field names are written in this page, these are still largely hypothetical and could well be incorrect guesses. Some packets are fixed to the RakNet protocol, and will be marked as "RakNet Packet", which means that these packets will not change on future versions.

It has been determined that PM uses RakNet for its networking library, [http://www.jenkinssoftware.com/raknet/manual/networkmessages.html some documentation that seems relevant].


== Terminology ==

;PM:Pocket Minecraft (aka Minecraft PE or Minecraft Pocket Edition)

== Types ==

{| class="wikitable"
|- class="row0"
| class="col0" |
! class="col1" | Size
! class="col2" | Range
! class="col3" | Notes
|- class="row1"
! class="col0 centeralign" | byte
| class="col1 centeralign" | 1
| class="col2" | -128 to 127
| class="col3" | Signed, two's complement
|- class="row2"
! class="col0 centeralign" | short
| class="col1 centeralign" | 2
| class="col2" | -32768 to 32767
| class="col3" | Signed, two's complement
|- class="row3"
! class="col0 centeralign" | int32
| class="col1 centeralign" | 4
| class="col2" | -2147483648 to 2147483647
| class="col3" | Signed, two's complement
|- class="row4"
! class="col0 centeralign" | int64
| class="col1 centeralign" | 8
| class="col2" | 
| class="col3" | Maybe a double?
|- class="row5"
! class="col0 centeralign" | MAGIC
| class="col1 centeralign" | 16
| class="col2" | <code>0x00ffff00fefefefefdfdfdfd12345678</code>
| class="col3" | always hex bytes <code>0x00ffff00fefefefefdfdfdfd12345678</code>, corresponding to RakNet's default OFFLINE_MESSAGE_DATA_ID
|- class="row6"
! class="col0 centeralign" | string
| class="col1 centeralign" | â‰¥ 1
| class="col2" | N/A
| class="col3" | Prefixed by a short containing the length of the string in characters. It appears that only the following ASCII characters can be displayed: !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
|}

== Packets ==

All packets start with a single byte that identifies the packet type, the rest of the packet follows it.

{{anchor|0x02}}
=== ID_UNCONNECTED_PING_OPEN_CONNECTIONS (0x02) ===

''Client to Broadcast''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x02
| class="col1 centeralign" | Ping ID
| class="col2 centeralign" | int64
| class="col3 centeralign" | <code>0x00000000003c6d0d</code>
| class="col4" | Time since start in Milliseconds
|- class="row2"
| class="col0 centeralign" | MAGIC
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | 
| class="col3" |
|- class="row3"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 25 Bytes
|}

Clients start out by sending this packet to the IP broadcast address on port 19132 repeatedly (approx once per second) when joining a server was chosen on the main screen, and stops when the user selects a server (or leaves the screen). The ping ID from the client increases over time, and appears to be the number of milliseconds since the client program was started (might be used to measure server response latency).


{{anchor|0x05}}
=== ID_OPEN_CONNECTION_REQUEST_1 (0x05) ===

''Client to Server''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x05
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | MAGIC
| class="col3 centeralign" | 
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | Protocol Version
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>5</code>
| class="col3" | Currently 5
|- class="row2"
| class="col0 centeralign" | Null Payload
| class="col1 centeralign" | many 0x00 bytes
| class="col2 centeralign" | <code>0x00 * 1447</code>
| class="col3" | MTU (Maximum Transport Unit)
|- class="row4"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 18 Bytes + lenght of Null Payload
|}
If the version is different than yours, reply with a 
[[#0x1A|ID_INCOMPATIBLE_PROTOCOL_VERSION (0x1A)]]

Sent from client after it receives packet 0x1d. The client will repeatedly send this with reducing sizes until it successfully receives a reply. Observed behaviour is that the client will send packets ~0.5s apart in the following way, until it gets a 0x06 response packet, or reaches the end of these:
* 4 packets of Null Payload lenght of 1447
* 4 packets of Null Payload lenght of 1155
* 5 packets of Null Payload lenght of 531
If the server doesnt't reply the client, the client will display a "Connect Error" window


{{anchor|0x06}}

=== ID_OPEN_CONNECTION_REPLY_1 (0x06) ===

''Server to Client''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x06
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | MAGIC
| class="col3 centeralign" | 
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | Server ID
| class="col1 centeralign" | int64
| class="col2 centeralign" | <code>0x00000000372cdc9e</code>
| class="col3" | This value seems to be constant for an installation of PM, or differs between the demo and full version.
|- class="row3"
| class="col0 centeralign" | Server Security
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | Always 0
|- class="row4"
| class="col0 centeralign" | MTU Size
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>1447</code>
| class="col3" | Lenght of 0x05. Used to determine packet loss and max UDP packet size (MTU)
|- class="row5"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 28 Bytes
|}

Sent from server after it receives packet 0x05.


{{anchor|0x07}}

=== ID_OPEN_CONNECTION_REQUEST_2 (0x07) ===

''Client to Server''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x07
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | MAGIC
| class="col3 centeralign" | 
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | Security + Cookie
| class="col1 centeralign" | 1 + 4 bytes
| class="col2 centeralign" | <code>0x043f57fefd</code>
| class="col3" | Unused, constant value
|- class="row3"
| class="col0 centeralign" | Server UDP Port
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>19132</code>
| class="col3" | 
|- class="row4"
| class="col0 centeralign" | MTU Size
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>1464</code>
| class="col3" | 
|- class="row5"
| class="col0 centeralign" | Client ID
| class="col1 centeralign" | int64
| class="col2 centeralign" | <code>0x00000000372cdc9e</code>
| class="col3" | The Client / Server ID will be the same for a given device
|- class="row6"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 34 Bytes
|}

Sent from client in response to packet 0x06.


{{anchor|0x08}}
=== ID_OPEN_CONNECTION_REPLY_2 (0x08) ===

''Server to Client''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="6" | 0x08
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | MAGIC
| class="col3 centeralign" | 
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | Server ID
| class="col1 centeralign" | int64
| class="col2 centeralign" | <code>0x00000000372cdc9e</code>
| class="col3" |
|- class="row3"
| class="col0 centeralign" | Client UDP Port
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>46946</code>
| class="col3" | 
|- class="row4"
| class="col0 centeralign" | MTU Size
| class="col1 centeralign" | short
| class="col2 centeralign" | <code>1464</code>
| class="col3" |
|- class="row5"
| class="col0 centeralign" | Security
| class="col1 centeralign" | byte
| class="col2 centeralign" | <code>0</code>
| class="col3" | Always 0
|- class="row6"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 30 Bytes
|}

Sent from server in response to packet 0x07.


{{anchor|0x1A}}
=== ID_INCOMPATIBLE_PROTOCOL_VERSION (0x1A) ===

''Server to Client''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0x1A
| class="col1 centeralign" | Protocol Version
| class="col2 centeralign" | byte
| class="col3 centeralign" | <code>5</code>
| class="col4" | 
|- class="row2"
| class="col0 centeralign" | MAGIC
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | 
| class="col3" |
|- class="row2"
| class="col0 centeralign" | Server ID
| class="col1 centeralign" | int64
| class="col2 centeralign" | <code>0x00000000372cdc9e</code>
| class="col3" | 
|- class="row3"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 26 Bytes
|}


{{anchor|0x1C}}
=== ID_UNCONNECTED_PING_OPEN_CONNECTIONS (0x1C) ===

''Server to Client''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x1C
| class="col1 centeralign" | Ping ID
| class="col2 centeralign" | int64
| class="col3 centeralign" | <code>0x00000000003c6d0d</code>
| class="col4" | Time since start in Milliseconds
|- class="row2"
| class="col0 centeralign" | Server ID
| class="col1 centeralign" | int64
| class="col2 centeralign" | <code>0x00000000372cdc9e</code>
| class="col3" |
|- class="row4"
| class="col0 centeralign" | MAGIC
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | 
| class="col3" |
|- class="row2"
| class="col0 centeralign" | Data
| class="col1 centeralign" | string
| class="col2 centeralign" | <code>MCCPP;Demo;Steve</code>
| class="col3" | Used to send the username (MCCPP;Demo; + username)
|- class="row3"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 35 Bytes + lenght of string
|}

Server sends this packet in response to a 0x02 packet. Depends of the version to send a 0x1D or a 0x1C
If the Server is invisible, this packet will be sent without username


{{anchor|0x1D}}
=== ID_ADVERTISE_SYSTEM (0x1D) ===

''Server to Client''


'''RakNet Packet'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="5" | 0x1D
| class="col1 centeralign" | Ping ID
| class="col2 centeralign" | int64
| class="col3 centeralign" | <code>0x00000000003c6d0d</code>
| class="col4" | Time since start in Milliseconds
|- class="row2"
| class="col0 centeralign" | Server ID
| class="col1 centeralign" | int64
| class="col2 centeralign" | <code>0x00000000372cdc9e</code>
| class="col3" |
|- class="row4"
| class="col0 centeralign" | MAGIC
| class="col1 centeralign" | MAGIC
| class="col2 centeralign" | 
| class="col3" |
|- class="row2"
| class="col0 centeralign" | Data
| class="col1 centeralign" | string
| class="col2 centeralign" | <code>MCCPP;Demo;Steve</code>
| class="col3" | Used to send the username (MCCPP;Demo; + username)
|- class="row3"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 35 Bytes + lenght of string
|}

Same as [[#0x1C|ID_UNCONNECTED_PING_OPEN_CONNECTIONS (0x1C)]], but with the Packet ID changed. Depends of the version to send a 0x1D or a 0x1C


{{anchor|0x84}}

=== ID_RESERVED_7 (0x84) ===

''Two-Way''

'''This packet is part of the real Minecraft PE implementation. The structure can change anytime.'''


This packet has a partial unknown structure

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0x84
| class="col1 centeralign" | Packet number
| class="col2 centeralign" | 3 bytes
| class="col3 centeralign" | <code>0</code>
| class="col4" | Increments once every packet. 
|- class="row2"
| class="col2 centeralign" | Other ID?
| class="col1 centeralign" | 3 bytes
| class="col2 centeralign" | <code>0x400090</code>
| class="col3" | Looks like another ID, there are multiple ID's.
|- class="row4"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 7 Bytes
|}

Sent after 0x08. The receiver will use the Packet number in the 0xc0 packet and send it back.

[https://gist.github.com/3928516 Different 0x84 values sent in a session], use this to help understand this packet


{{anchor|0x8C}}

=== Unknown (0x8C) ===

''Server -> Client''

'''This packet is part of the real Minecraft PE implementation. The structure can change anytime.'''


This packet has a partial unknown structure, but it seems to complement the packet 0x84. Packet Order count continues from the last value of 0x84. Could be Chunk Data or AddEntityPacket.

It seems that it has a start field of unknown lenght that suggests that this packet is used as an multi-purpouse packet. The same happens with 0x84

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="3" | 0x8C
| class="col1 centeralign" | Packet Order ID
| class="col2 centeralign" | byte?
| class="col3 centeralign" | <code>57</code>
| class="col4" | Could be used to reorder packets
|- class="row2"
| class="col2 centeralign" | Unknown
| class="col1 centeralign" | variable
| class="col2 centeralign" | 
| class="col3" |
|- class="row3"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 1 + ? Bytes
|}

Sent after 0x84 by client.


{{anchor|0xA0}}

=== Unknown (0xA0) ===

''Two-Way''

'''This packet is part of the real Minecraft PE implementation. The structure can change anytime.'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="2" | 0xA0
| class="col1 centeralign" | Data
| class="col2 centeralign" | 6 bytes
| class="col3 centeralign" | <code>0x000101000000</code>
| class="col4" | 
|- class="row3"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 7 Bytes
|}

Sent after an invalid Packet Order ID.


{{anchor|0xC0}}
=== Unknown (0xC0) ===

''Two-Way''

'''This packet is part of the real Minecraft PE implementation. The structure can change anytime.'''

{| class="wikitable"
|- class="row0"
| class="col0" | Packet ID
| class="col1" | Field Name
| class="col2" | Field Type
| class="col3" | Example
| class="col4" | Notes
|- class="row1"
| class="col0 centeralign" rowspan="4" | 0xC0
| class="col1 centeralign" | Unknown
| class="col2 centeralign" | 2 bytes
| class="col3 centeralign" | <code>0x0001</code>
| class="col4" | 
|- class="row2"
| class="col1 centeralign" | bool
| class="col2 centeralign" | boolean
| class="col3 centeralign" | <code>''true''</code>
| class="col4" | ''true'' when there is only one packet received
|- class="row3"
| class="col1 centeralign" | Packet number
| class="col2 centeralign" | 3 bytes
| class="col3 centeralign" | <code>0x000000</code>
| class="col4" | Received packet number
|- class="row4"
| class="col1 centeralign" | Packet number
| class="col2 centeralign" | 3 bytes
| class="col3 centeralign" | <code>0x000004</code>
| class="col4" | Last received packet number (only when ''false'')
|- class="row5"
| class="col0" | Total Size:
| class="col1 rightalign" colspan="4" | 7 or 10 Bytes
|}

Sent after the first 0x84. Then, the peer replies with the same packet. Could be used to ACK recieval of packets.
The second packet number is optional and only there when bool is false.

==List of all packets==
All the information in this list is based on the RakNet and Minecraft ID for each packet. The RakNet ID is the first byte in each packet, while the Minecraft ID is the first byte after each RakNet header. All names for each packet are based on the Android assembly code. Each packet is in the format of RakNet ID first, Minecraft ID second, Name third. All packets are found by using the tutorial posted by Jocopa3 found [http://www.minecraftforum.net/topic/1446513-mcpeserver-and-server-modding-api-in-development/page__st__100#entry18330091 here].

{| class="wikitable"
|- class="row0"
| class="col0" | RakNet ID
| class="col1" | Minecraft ID
| class="col2" | Packet Name
|- class="row1"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xAF
| class="col2 centeralign" | ChatPacket
|- class="row2"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xAE
| class="col2 centeralign" | ContainerAckPacket
|- class="row3"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xAD
| class="col2 centeralign" | ContainerSetContentPacket
|- class="row4"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xAC
| class="col2 centeralign" | ContainerSetDataPacket
|- class="row5"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xAB
| class="col2 centeralign" | ContainerSetSlotPacket
|- class="row6"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xAA
| class="col2 centeralign" | ContainerClosePacket
|- class="row7"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA9
| class="col2 centeralign" | ContainerOpenPacket
|- class="row8"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA8
| class="col2 centeralign" | DropItemPacket
|- class="row9"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA7
| class="col2 centeralign" | Packet::Packet(void) â€ 
|- class="row10"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA6
| class="col2 centeralign" | RespawnPacket
|- class="row11"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA5
| class="col2 centeralign" | AnimatePacket
|- class="row12"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA4
| class="col2 centeralign" | SetHealthPacket
|- class="row13"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA3
| class="col2 centeralign" | SetEntityMotionPacket
|- class="row14"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA2
| class="col2 centeralign" | SetEntityDataPacket
|- class="row15"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA1
| class="col2 centeralign" | PlayerActionPacket
|- class="row16"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0xA0
| class="col2 centeralign" | UseItemPacket
|- class="row17"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x9F
| class="col2 centeralign" | Interactpacket
|- class="row18"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x9E
| class="col2 centeralign" | PlayerEquipmentPacket
|- class="row19"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x9D
| class="col2 centeralign" | ChunkDataPacket
|- class="row20"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x9C
| class="col2 centeralign" | RequestChunkPacket
|- class="row21"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x9B
| class="col2 centeralign" | EntityEventPacket
|- class="row22"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x99
| class="col2 centeralign" | LevelEventPacket
|- class="row23"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x98
| class="col2 centeralign" | ExplodePacket
|- class="row24"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x97
| class="col2 centeralign" | UpdateBlockPacket
|- class="row25"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x96
| class="col2 centeralign" | RemoveBlockPacket
|- class="row26"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x95
| class="col2 centeralign" | PlaceBlockPacket
|- class="row27"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x94
| class="col2 centeralign" | MovePlayerPacket
|- class="row28"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x93
| class="col2 centeralign" | MoveEntityPacket_PosRot
|- class="row29"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x90
| class="col2 centeralign" | MoveEntityPacket
|- class="row30"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x8F
| class="col2 centeralign" | TakeItemEntityPacket
|- class="row31"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x8E
| class="col2 centeralign" | AddItemEntityPacket
|- class="row32"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x8D
| class="col2 centeralign" | RemoveEntityPacket
|- class="row33"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x8C
| class="col2 centeralign" | AddEntityPacket
|- class="row34"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x8A
| class="col2 centeralign" | RemovePlayerPacket
|- class="row35"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x89
| class="col2 centeralign" | AddPlayerPacket
|- class="row36"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x88
| class="col2 centeralign" | AddMobPacket
|- class="row37"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x87
| class="col2 centeralign" | StartGamePacket
|- class="row38"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x86
| class="col2 centeralign" | SetTimePacket
|- class="row39"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x85
| class="col2 centeralign" | MessagePacket
|- class="row40"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x84
| class="col2 centeralign" | ReadyPacket
|- class="row41"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x83
| class="col2 centeralign" | LoginStatusPacket
|- class="row42"
| class="col0 centeralign" | 0x84
| class="col1 centeralign" | 0x82
| class="col2 centeralign" | LoginPacket
|- class="row43"
| class="col0 centeralign" colspan="4" | Total: 42 Packets
|}
â€  Packet exists but the Assembly shows no further code for it (Blank Packet?).

== Packet Dumps ==
Due to the lack of information about the protocol, packet dumps are welcome. You can also post here pcap files of Client <-> Server sessions

* [https://gist.github.com/3928612 Partial Custom Client server connection]
* [https://gist.github.com/3928624 Partial Custom Server client info + connection]
* [http://www.cloudshark.org/captures/5e9ee11bb05a Full Client / Server Communication]. PCAP, including server search. [http://www.mediafire.com/?768jwkj3orkp7tt download]


[[Category:Pocket Minecraft]]

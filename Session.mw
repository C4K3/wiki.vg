The minecraft client and server communicate with minecraft.net to validate player sessions. This page describes some of the operations.

== Login ==

To log the player in, the official launcher sends an HTTPS POST (GET appears to suffice as well) request to:
<pre>https://login.minecraft.net</pre>
with the postdata:
  user=<username>&password=<password>&version=<launcher version>
and a "application/x-www-form-urlencoded" Content-Type header.

The current launcher version is ''12'', sending a value lower than this will cause the server to return "Old Version", however you can send any large number and it will return as expected. If the login succeeded, it will return 4 ':' delimited values.
  1281688214000:deprecated:TkTech:8204407531530365141:
#'''current version''' of the game files (not the launcher itself). This is a unix timestamp which the launcher compares to the ~/.minecraft/bin/version file.
#Previously contained a '''download ticket''' for requesting new versions of minecraft.jar from the server. Now contains only "deprecated".
#'''case-correct username'''.
#'''sessionId''' - a unique ID for your current session.

== Updating ==

To update, the launcher downloads files from 
<pre>http://s3.amazonaws.com/MinecraftDownload/</pre>
It takes the unix timestamp from the login request and stores it in ~/.minecraft/bin/version<br />
The following files are downloaded from /MinecraftDownload/ in this exact order:<br />
*lwjgl.jar
*jinput.jar
*lwjgl_util.jar
*minecraft.jar
And then the natives.jar appropriate for the following operating systems: windows, linux, macosx, and solaris
*<os-from-list-above>_natives.jar.lzma

When downloading minecraft.jar, GET variables are set as follows: ?user=foo&ticket=deprecated, although they seem unnecessary to successfully downloading the file. <br />
Furthermore, the downloaded files are all verified via MD5 which is sent via ETag by the server on the page for each file.

Further resources are stored in /MinecraftResources. Loading /MinecraftResources provides an XML formatted list of resources, some of which are downloaded by Minecraft and not the launcher.

== Keep-alive ==

Every 6000 ticks, the client sends an HTTPS request to
<pre>https://login.minecraft.net/session?name=<username>&session=<session id></pre>
The client discards the server's response.

== Snoop ==

Currently partially implemented in the official client. Every 10 minutes, the client sends a HTTP POST request to:
<pre>http://snoop.minecraft.net</pre>
With the postdata:
<pre>fName=???&lName=???</pre>
These parameters are expected to change (and contain non-dummy values). Indeed, the official client has code for at least one variable: "mode", containing one of: title, single_creative, single_demo, single_survival, multiplayer.

Currently the server only returns a 503

== Joining a Server ==

=== Client operation ===

# Client connects to server
# Client sends a [[Protocol#Handshake_.280x02.29|0x02 handshake]] containing the current player name
# Client receives a 0x02 handshake from the server containing a randomly generated hash, which it saves as serverId
# Client sends a HTTP request to 
#:<pre>http://session.minecraft.net/game/joinserver.jsp?user=<username>&sessionId=<session id>&serverId=<server hash></pre>
#:If the response is '''OK''' then continue, otherwise stop
# Client sends [[Protocol#Login_Request_.280x01.29|0x01 login request]]
# Client receives a 0x01 login response
# ... receive map chunks, etc...

=== Server operation ===

# Server answers tcp connection request
# Server receives a [[Protocol#Handshake_.280x02.29|0x02 handshake]] containing the client's player name
# Server generates a hash for this client
# Server sends a 0x02 handshake to the client containing the hash
# Server receives a [[Protocol#Login_Request_.280x01.29|0x01 login request]] from the client
# Server sends a HTTP request to
#:<pre>http://session.minecraft.net/game/checkserver.jsp?user=<username>&serverId=<server hash></pre>
#:If it returns '''YES''' then the client is authenticated and allowed to join. Otherwise the client will/should be [[Protocol#Disconnect.2FKick_.280xFF.29|kicked]] with “Failed to verify username!”
# Server sends a 0x01 login response to the client
# ... send map chunks, etc...


[[Category:Protocol Details]]
[[Category:Minecraft Beta]]

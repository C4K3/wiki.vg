'''Plugin channels''' allow client mods and server plugins to communicate without cluttering up chat. [http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/ This post by Dinnerbone] is a good introduction and basic documentation.
{{anchor|Internal}}
== Reserved channels ==
=== <code>REGISTER</code> ===
''Two-way''

Allows the client or server to register for one or more custom channels, indicating that data should be sent on those channels if the receiving end supports it too. Payload is a null (<code>0x00</code>) separated list of strings.

=== <code>UNREGISTER</code> ===
''Two-way''

Allows the client or server to unregister from one or more custom channels, indicating that the receiving end should stop sending data on those channels. Payload is a null-separated list of strings. This is only useful if plugins are disabled/unloaded while the client is connected.

== Channels internal to Minecraft ==
As of 1.3, Minecraft itself started using plugin channels to implement new features. These internal channel names are prefixed by <code>MC|</code>. They are not formally registered using the REGISTER channel. The vanilla Minecraft server will send these packets regardless, and the vanilla client will accept them.

=== <code>MC|AdvCdm</code> ===
''Client to Server''

Adventure mode command block. 

The first byte is ''type'' which is followed by either:

{| class="wikitable"
! Type !! Field Name !! Field Type !! Notes
|-
| rowspan=5 | 0x00
| X || Int || 
|-
| Y || Int || 
|-
| Z || Int || 
|-
| Command || String ||
|-
| Track Output || Boolean ||
|}

or

{| class="wikitable"
! Type !! Field Name !! Field Type !! Notes
|-
| rowspan=5 | 0x01
| Entity ID || Int ||  
|-
| Command || String ||
|-
| Track Output || Boolean ||
|}

depending on the ''mode''

=== <code>MC|Beacon</code> ===
''Client to server''

Two integers corresponding to the 2 effects a user wishes to have active.

=== <code>MC|BEdit</code> ===
''Client to server''

When a player edits an unsigned book.

This payload is simply a set of bytes corresponding to a [[Slot Data|Slot]].

The [[NBT]] section of the Slot contains
<code>
  TAG_Compound(<nowiki>''</nowiki>): 1 entry
  {
    TAG_List('pages'): 2 entries
    {
      TAG_String(0): 'Something on Page 1'
      TAG_String(1): 'Something on Page 2'
    }
  }
</code>

=== <code>MC|BSign</code> ===
''Client to server''

When a player signs a book.

This payload is simply a set of bytes corresponding to a [[Slot Data|Slot]].

The Item ID in the Slot should be a Written Book

The [[NBT]] section of the Slot contains
<code>
  TAG_Compound(<nowiki>''</nowiki>): 3 entires
  {
    TAG_String('author'): 'Steve'
    TAG_String('title'): 'A Wonderful Book'
    TAG_List('pages'): 2 entries
    {
      TAG_String(0): 'Something on Page 1'
      TAG_String(1): 'Something on Page 2'
    }
  }
</code>

=== <code>MC|BOpen</code> ===
''Server to client''

When a player right clicks with a signed book. This tells the client to open the book GUI.
This payload is empty.

=== <code>MC|ItemName</code> ===
''Two-way''

When a player uses an anvil to name an item. The payload is just a string: the item's new name.

=== <code>MC|RPack</code> ===
''Server to client''

Remote resource packs. This contains a string representing the url to get the resource pack from. This channel has been replaced by the [[Protocol#Resource Pack Send|Resource Pack Send]] ([[Protocol#Play|Play]], 0x48, clientbound) and [[Protocol#Resource Pack Status|Resource Pack Status]] ([[Protocol#Play|Play]], 0x19, serverbound) packets.

===  <code>MC|TrList</code> ===
''Server to client''

The list of trades a villager NPC is offering.

=== <code>MC|TrSel</code> ===
''Client to server''
	
When a player selects a specific trade offered by a villager NPC.
It contains a single int id corresponding to the selected slot int the players current (trading) inventory.

=== <code>MC|PingHost</code> ===
''Client to server''

Sent ''after'' a Server list ping in Minecraft 1.6. More information on [[Server List Ping#1.6]]. In 1.7 and above, the [[Protocol#Request|Request]] ([[Protocol#Status|Status]], 0x00, serverbound) packet is instead sent ''before'' the ping.

=== <code>MC|Brand</code> ===
''Two-way''

Announces the server and client implementation name right after a player has logged in. For Minecraft and the standard Minecraft server, this is "vanilla" (encoded as a UTF-8 string).

== Notable community plugin channels ==
Channels listed in this section are not Mojang-sanctioned. This is just a likely-incomplete list of channels used by mods/plugins popular within the Minecraft community.

=== <code>BungeeCord</code> ===

[http://www.spigotmc.org/wiki/bukkit-bungee-plugin-messaging-channel/ See here]

=== <code>FML|HS</code>, <code>FML</code> ===
''Two-way''

Used by [http://www.minecraftforge.net/forum/index.php Minecraft Forge] to negotiate required mods, among other things.
[https://github.com/MinecraftForge/MinecraftForge/blob/master/src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeMessage.java <code>FML|HS</code>]
[https://github.com/MinecraftForge/MinecraftForge/blob/master/src/main/java/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java <code>FML</code>]

=== <code>ML|OpenTE</code> ===
''Server to client''

Used by [http://www.minecraftforum.net/topic/75440-modloader/ ModLoader] to support custom GUI windows. Does not use the REGISTER channel.

=== <code>WECUI</code> ===
''Two-way''

Used by the server-side [http://www.enginehub.org/worldedit/ WorldEdit] and the client-side [http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1292886-worldeditcui/ WorldEditCUI] to coordinate selections.

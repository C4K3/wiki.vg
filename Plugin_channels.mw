'''Plugin channels''' allow client mods and server plugins to communicate without cluttering up chat. [http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/ This post by Dinnerbone] is a good introduction and basic documentation.
{{anchor|Internal}}
== Reserved channels ==
=== <code>REGISTER</code> ===
''Two-way''

Allows the client or server to register for one or more custom channels, indicating that data should be sent on those channels if the receiving end supports it too. Payload is a null (<code>0x00</code>) separated list of strings.

=== <code>UNREGISTER</code> ===
''Two-way''

Allows the client or server to unregister from one or more custom channels, indicating that the receiving end should stop sending data on those channels. Payload is a null-separated list of strings. This is only useful if plugins are disabled/unloaded while the client is connected.

== Channels internal to Minecraft ==
As of 1.3, Minecraft itself started using plugin channels to implement new features. These internal channel names are prefixed by <code>MC|</code>. They are not formally registered using the REGISTER channel. The vanilla Minecraft server will send these packets regardless, and the vanilla client will accept them.

=== <code>MC|AdvCdm</code> ===
''Client to Server''

Adventure mode command block. 

The first byte is ''type'' which is followed by either:

{| class="wikitable"
! Type !! Field Name !! Field Type !! Notes
|-
| rowspan=5 | 0x00
| X || Int || 
|-
| Y || Int || 
|-
| Z || Int || 
|-
| Command || String ||
|-
| Track Output || Boolean ||
|}

or

{| class="wikitable"
! Type !! Field Name !! Field Type !! Notes
|-
| rowspan=5 | 0x01
| Entity ID || Int ||  
|-
| Command || String ||
|-
| Track Output || Boolean ||
|}

depending on the ''mode''

=== <code>MC|AutoCmd</code> ===
''Client to server''

Sets command block data; this seems to be a newer version of <code>MC|AdvCmd</code> but the older version still works.

{| class="wikitable"
! Field Name !! Field Type !! Notes
|-
| X || Int || 
|-
| Y || Int || 
|-
| Z || Int || 
|-
| Command || String ||
|-
| Track output || Boolean || If false, the output of the previous command will not be stored within the command block.
|-
| Mode || String enum || One of "SEQUENCE", "AUTO", and "REDSTONE"
|-
| Is conditional || Boolean ||
|-
| Automatic || Boolean ||
|}

=== <code>MC|Beacon</code> ===
''Client to server''

Two integers corresponding to the 2 effects a user wishes to have active.

=== <code>MC|BEdit</code> ===
''Client to server''

When a player edits an unsigned book.

This payload is simply a set of bytes corresponding to a [[Slot Data|Slot]].

The [[NBT]] section of the Slot contains
<code>
  TAG_Compound(<nowiki>''</nowiki>): 1 entry
  {
    TAG_List('pages'): 2 entries
    {
      TAG_String(0): 'Something on Page 1'
      TAG_String(1): 'Something on Page 2'
    }
  }
</code>

=== <code>MC|BSign</code> ===
''Client to server''

When a player signs a book.

This payload is simply a set of bytes corresponding to a [[Slot Data|Slot]].

The Item ID in the Slot should be a Written Book

The [[NBT]] section of the Slot contains
<code>
  TAG_Compound(<nowiki>''</nowiki>): 3 entires
  {
    TAG_String('author'): 'Steve'
    TAG_String('title'): 'A Wonderful Book'
    TAG_List('pages'): 2 entries
    {
      TAG_String(0): 'Something on Page 1'
      TAG_String(1): 'Something on Page 2'
    }
  }
</code>

=== <code>MC|BOpen</code> ===
''Server to client''

When a player right clicks with a signed book. This tells the client to open the book GUI.
This payload is empty.

=== <code>MC|ItemName</code> ===
''Client to server''

When a player uses an anvil to name an item. The payload is just a string: the item's new name.

=== <code>MC|Struct</code> ===
''Client to server''

Does something with the (inaccessible) {{Minecraft Wiki|Structure block}}.

{| class="wikitable"
 ! Field Name
 ! Field Type
 ! Notes
 |-
 | X || Int || Tile entity location
 |-
 | Y || Int || Tile entity location
 |-
 | Z || Int || Tile entity location
 |-
 | Action
 | Byte
 | See below
 |-
 | Mode
 | String enum
 | One of "SAVE", "LOAD", "CORNER", "DATA".
 |-
 | Name
 | String
 |
 |-
 | Position X || Int || ?
 |-
 | Position Y || Int || ?
 |-
 | Position Z || Int || ?
 |-
 | Size X || Int || ?
 |-
 | Size Y || Int || ?
 |-
 | Size Z || Int || ?x
 |-
 | Mirror
 | String enum
 | One of "NONE", "LEFT_RIGHT", "FRONT_BACK".
 |-
 | Rotation
 | String enum
 | One of "NONE", "CLOCKWISE_90", "CLOCKWISE_180", "COUNTERCLOCKWISE_90".
 |-
 | Metadata
 | String
 | ?
 |-
 | Ignore entities
 | Boolean
 |
 |}

Possible modes:

* 2 - Save the structure
* 3 - Load the structure
* 4 - Detect size

=== <code>MC|PickItem</code> ===
''Client to server''

Swaps out an item at the given inventory index(?) with an item on the hotbar.  The server sends back several packets.  TODO: Document them.

Payload is a single varint.

=== <code>MC|TrList</code> ===
''Server to client''

The list of trades a villager NPC is offering.

{| class="wikitable"
 ! colspan="2" | Field Name
 ! colspan="2" | Field Type
 ! Notes
 |-
 | colspan="2" | Window ID
 | colspan="2" | Int
 | The ID of the window that is open; this is an int rather than a byte.
 |-
 | colspan="2" | Size
 | colspan="2" | Byte
 | The number of trades in the following array
 |-
 | rowspan="7" | Trades
 | Input item 1
 | rowspan="7" | Array
 | Slot
 | The first item the villager is buying
 |-
 | Output item
 | Slot
 | The item the villager is selling
 |-
 | Has second item
 | Boolean
 | Whether there is a second item
 |-
 | Input item 2
 | Optional slot
 | The second item the villager is buying; only present if they have a second item.
 |-
 | Trade disabled
 | Boolean
 | True if the trade is disabled; false if the trade is enabled.
 |-
 | Number of tool uses
 | Int
 | May actually be the number of times this trade has been used; MCP may be misleading me
 |-
 | Maximum number of trade uses
 | Int
 | Number of times this trade can be used
 |}

=== <code>MC|TrSel</code> ===
''Client to server''
	
When a player selects a specific trade offered by a villager NPC.
It contains a single int id corresponding to the selected slot int the players current (trading) inventory.

=== <code>MC|PingHost</code> ===
''Client to server''

Sent ''after'' a Server list ping in Minecraft 1.6. More information on [[Server List Ping#1.6]]. In 1.7 and above, the [[Protocol#Request|Request]] ([[Protocol#Status|Status]], 0x00, serverbound) packet is instead sent ''before'' the ping.

=== <code>MC|Brand</code> ===
''Two-way''

Announces the server and client implementation name right after a player has logged in. For Minecraft and the standard Minecraft server, this is "vanilla" (encoded as a UTF-8 string).

=== <code>MC|DebugPath</code> ===
''Server to client''

Never sent, but does something with pathfinding debugging.  The client reads the data and stores it, but does not render anything with it.

{|class="wikitable"
 ! Name
 ! Type
 ! Notes
 |-
 | ?
 | Int
 | 
 |-
 | ?
 | Float
 | ?
 |-
 | Entity
 | PathEntity
 | See below
 |}

PathEntity structure:

{| class="wikitable"
 ! Name
 ! Type
 ! Notes
 |-
 | Path index
 | Int
 |
 |-
 | ?
 | PathPoint
 |
 |-

PathPoint structure:

{| class="wikitable"
 ! Name
 ! Type
 ! Notes
 |-
 | ?
 | Float
 | 
 |-
 | ?
 | Float
 | 
 |-
 | ?
 | Float
 | 
 |-
 | Has been visited
 | Boolean
 | 
 |-
 | Node type
 | Int enum
 | See below
 |-
 | Distance to target
 | Float
 |
 |}

Values for node type:

* 0: BLOCKED
* 1: OPEN
* 2: WALKABLE
* 3: TRAPDOOR
* 4: FENCE
* 5: LAVA
* 6: WATER
* 7: RAIL
* 8: DANGER_FIRE
* 9: DAMAGE_FIRE
* 10: DANGER_CACTUS
* 11: DAMAGE_CACTUS
* 12: DANGER_OTHER
* 13: DAMAGE_OTHER
* 14: DOOR_OPEN
* 15: DOOR_WOOD_CLOSED
* 16: DOOR_IRON_CLOSED

== Notable community plugin channels ==
Channels listed in this section are not used by the vanilla Minecraft client or server. This is just a likely-incomplete list of channels used by mods/plugins popular within the Minecraft community.

=== <code>BungeeCord</code> ===

[http://www.spigotmc.org/wiki/bukkit-bungee-plugin-messaging-channel/ See here]

=== <code>FML|HS</code>, <code>FML</code> ===
''Two-way''

Used by [http://www.minecraftforge.net/forum/index.php Minecraft Forge] to negotiate required mods, among other things.
[https://github.com/MinecraftForge/MinecraftForge/blob/master/src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeMessage.java <code>FML|HS</code>]
[https://github.com/MinecraftForge/MinecraftForge/blob/master/src/main/java/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java <code>FML</code>]

For more information, see [[Minecraft Forge Handshake]].

=== <code>ML|OpenTE</code> ===
''Server to client''

Used by [http://www.minecraftforum.net/topic/75440-modloader/ ModLoader] to support custom GUI windows. Does not use the REGISTER channel.

=== <code>WECUI</code> ===
''Two-way''

Used by the server-side [http://www.enginehub.org/worldedit/ WorldEdit] and the client-side [http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1292886-worldeditcui/ WorldEditCUI] to coordinate selections.

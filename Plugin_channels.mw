'''Plugin channels''' allow client mods and server plugins to communicate without cluttering up chat. [http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/ This post by Dinnerbone] is a good introduction and basic documentation.
{{anchor|Internal}}
== Reserved channels ==
=== <code>REGISTER</code> ===
''Two-way''

Allows the client or server to register for one or more custom channels, indicating that data should be sent on those channels if the receiving end supports it too. Payload is a null (<code>0x00</code>) separated list of strings.

=== <code>UNREGISTER</code> ===
''Two-way''

Allows the client or server to unregister from one or more custom channels, indicating that the receiving end should stop sending data on those channels. Payload is a null-separated list of strings. This is only useful if plugins are disabled/unloaded while the client is connected.

== Channels internal to Minecraft ==
Since 1.3, Minecraft itself uses several plugin channels to implement new features. These internal channel names are prefixed by <code>MC|</code>. They are '''not''' formally registered using the REGISTER channel. The vanilla Minecraft server will send these packets regardless, and the vanilla client will accept them.

=== <code>MC|AdvCmd</code> ===
{{anchor|MC.7CAdvCdm}}''Client to server''

Sets the contents of a command block or command block Minecart.  The Notchain client only uses this for command block minecarts and uses [[#MC.7CAutoCmd|<code>MC|AutoCmd</code>]] for blocks, but the Notchian server still accepts it for either.

In 1.8 and earlier the name of this channel was incorrectly spelled as <code>MC|AdvCdm</code>.  This was fixed in snapshot {{Minecraft Wiki|15w34a}}.

The packet starts with a single byte, which determines the type of thing being edited (block or minecart).  If it is 0, then it is a block and the location is 3 ints; if it is 1, then it is a minecart and the location is the entity's EID as an int.

; type = 0

{| class="wikitable"
 ! Type !! Field Name !! Field Type !! Notes
 |-
 | rowspan=6 | 0x00
 | X || Int || 
 |-
 | Y || Int || 
 |-
 | Z || Int || 
 |-
 | Command || String ||
 |-
 | Track Output || Boolean ||
 |}

; type = 1

{| class="wikitable"
 ! Type !! Field Name !! Field Type !! Notes
 |-
 | rowspan=3 | 0x01
 | Entity ID || Int ||  
 |-
 | Command || String ||
 |-
 | Track Output || Boolean ||
 |}

=== <code>MC|AutoCmd</code> ===
''Client to server''

Sets command block contents.  This can only be used to edit command blocks; command block minecarts cannot be used with it.  To edit a command block minecart, use [[#MC.7CAdvCmd|<code>MC|AdvCmd</code>]].

{| class="wikitable"
! Field Name !! Field Type !! Notes
|-
| X || Int || 
|-
| Y || Int || 
|-
| Z || Int || 
|-
| Command || String ||
|-
| Track output || Boolean || If false, the output of the previous command will not be stored within the command block.
|-
| Mode || String enum || One of "SEQUENCE", "AUTO", and "REDSTONE"
|-
| Is conditional || Boolean ||
|-
| Automatic || Boolean ||
|}

=== <code>MC|BEdit</code> ===
''Client to server''

When a player edits an unsigned book.

This payload is simply a set of bytes corresponding to a [[Slot Data|Slot]].

The [[NBT]] section of the Slot contains

<pre>
TAG_Compound(<nowiki>''</nowiki>): 1 entry
{
  TAG_List('pages'): 2 entries
  {
    TAG_String(0): 'Something on Page 1'
    TAG_String(1): 'Something on Page 2'
  }
}
</pre>

=== <code>MC|BOpen</code> ===
''Server to client''

When a player right clicks with a signed book. This tells the client to open the book GUI.
This payload is empty.

=== <code>MC|BSign</code> ===
''Client to server''

When a player signs a book.

This payload is simply a set of bytes corresponding to a [[Slot Data|Slot]].

The Item ID in the Slot should be a Written Book

The [[NBT]] section of the Slot contains

<pre>
TAG_Compound(<nowiki>''</nowiki>): 3 entires
{
  TAG_String('author'): 'Steve'
  TAG_String('title'): 'A Wonderful Book'
  TAG_List('pages'): 2 entries
  {
    TAG_String(0): 'Something on Page 1'
    TAG_String(1): 'Something on Page 2'
  }
}
</pre>

=== <code>MC|Beacon</code> ===
''Client to server''

Two integers corresponding to the 2 effects a user wishes to have active.

=== <code>MC|Brand</code> ===
''Two-way''

Announces the server and client implementation name right after a player has logged in. For the Notchian client and server server, this is "vanilla" (encoded as a [[Data Types|protocol string]]: a UTF-8 string with the length prefixed as a VarInt).

These brands are used in crash reports and a few other locations; it's recommended that custom clients and servers use changed brands for the purpose of identification (for the Notchian client, the class used to get the brand is one of the few non-obfuscated classes).  The brand is not processed in any other way, and Notchian clients will connect to servers with changed brands with no issue (the brand is not used to validate).

The Notchian server sends a <code>MC|Brand</code> packet right after it sends a [[#Join_Game|Join Game]] packet, and the Notchian client sends it right after receiving a Join Game packet.  However, some modified clients and servers will not send this packet (or will take longer to send it than normal), so it is important to not crash if the brand has not been sent.  Additionally, the brand may change at any time (for instance, if connected through a BungeeCord instance, you may switch from a server with one brand to a server with another brand without receiving a Join Game packet).

=== <code>MC|DebugPath</code> ===
''Server to client''

[[File:MC-DebugPath_in_16w14a.png|thumb|What appears to be the purpose of <code><nowiki>MC|DebugPath</nowiki></code> as seen in the [http://mojang.com/2016/04/minecraft-snapshot-16w14a/ snapshot 16w14a announcement].  This is ''not'' found in the normal game.]]

Never sent, but does something with pathfinding debugging.  The client reads the data and stores it, but does not render anything with it.

{|class="wikitable"
 ! Name
 ! Type
 ! Notes
 |-
 | ?
 | Int
 | 
 |-
 | ?
 | Float
 | ?
 |-
 | Entity
 | PathEntity
 | See below
 |}

PathEntity structure:

{| class="wikitable"
 ! Name
 ! Type
 ! Notes
 |-
 | Path index
 | Int
 |
 |-
 | ?
 | PathPoint
 |
 |-
 |}

PathPoint structure:

{| class="wikitable"
 ! Name
 ! Type
 ! Notes
 |-
 | ?
 | Float
 | 
 |-
 | ?
 | Float
 | 
 |-
 | ?
 | Float
 | 
 |-
 | Has been visited
 | Boolean
 | 
 |-
 | Node type
 | Int enum
 | See below
 |-
 | Distance to target
 | Float
 |
 |}

Values for node type:

* 0: BLOCKED
* 1: OPEN
* 2: WALKABLE
* 3: TRAPDOOR
* 4: FENCE
* 5: LAVA
* 6: WATER
* 7: RAIL
* 8: DANGER_FIRE
* 9: DAMAGE_FIRE
* 10: DANGER_CACTUS
* 11: DAMAGE_CACTUS
* 12: DANGER_OTHER
* 13: DAMAGE_OTHER
* 14: DOOR_OPEN
* 15: DOOR_WOOD_CLOSED
* 16: DOOR_IRON_CLOSED

=== <code>MC|ItemName</code> ===
''Client to server''

When a player uses an anvil to name an item. The payload is just a string: the item's new name.

=== <code>MC|PickItem</code> ===
''Client to server''

Used to swap out an empty space on the hotbar with the item in the given inventory slot.  The Notchain client uses this for pick block functionality (middle click) to retrieve items from the inventory.

Payload is a single varint, which is the slot in the inventory to grab from.

The server will first search the player's hotbar for an empty slot, starting from the current slot and looping around to the slot before it.  If there are no empty slots, it will start a second search from the current slot and find the first slot that does not contain an enchanted item.  If there still are no slots that meet that criteria, then the server will use the currently selected slot.

After finding the appropriate slot, the server swaps the items and then send 3 packets:

* [[Protocol#Set slot|Set Slot]], with window ID set to -2 and slot set to the newly chosen slot and the item set to the item that is now in that slot (which was previously at the slot the client requested)
* Set Slot, with window ID set to -2 and slot set to the slot the player requested, with the item that is now in that slot and was previously on the hotbar slot
* [[Protocol#Held_Item_Change_.28clientbound.29|Held Item Change]], with the slot set to the newly chosen slot.

=== <code>MC|PingHost</code> ===
''Client to server''

Sent ''after'' a Server list ping in Minecraft 1.6. More information on [[Server List Ping#1.6]]. In 1.7 and above, the [[Protocol#Request|Request]] ([[Protocol#Status|Status]], 0x00, serverbound) packet is instead sent ''before'' the ping.

{{Warning|Since this plugin channel is only sent for the legacy server list ping, it uses the older packet structure.}}}

=== <code>MC|Struct</code> ===
''Client to server''

Does something with the (inaccessible) {{Minecraft Wiki|Structure block}}.

{| class="wikitable"
 ! Field Name
 ! Field Type
 ! Notes
 |-
 | X || Int || Tile entity location
 |-
 | Y || Int || Tile entity location
 |-
 | Z || Int || Tile entity location
 |-
 | Action
 | Byte
 | See below
 |-
 | Mode
 | String enum
 | One of "SAVE", "LOAD", "CORNER", "DATA".
 |-
 | Name
 | String
 |
 |-
 | Position X || Int || ?
 |-
 | Position Y || Int || ?
 |-
 | Position Z || Int || ?
 |-
 | Size X || Int || ?
 |-
 | Size Y || Int || ?
 |-
 | Size Z || Int || ?x
 |-
 | Mirror
 | String enum
 | One of "NONE", "LEFT_RIGHT", "FRONT_BACK".
 |-
 | Rotation
 | String enum
 | One of "NONE", "CLOCKWISE_90", "CLOCKWISE_180", "COUNTERCLOCKWISE_90".
 |-
 | Metadata
 | String
 | ?
 |-
 | Ignore entities
 | Boolean
 |
 |}

Possible modes:

* 2 - Save the structure
* 3 - Load the structure
* 4 - Detect size

=== <code>MC|TrList</code> ===
''Server to client''

The list of trades a villager NPC is offering.

{| class="wikitable"
 ! colspan="2" | Field Name
 ! colspan="2" | Field Type
 ! Notes
 |-
 | colspan="2" | Window ID
 | colspan="2" | Int
 | The ID of the window that is open; this is an int rather than a byte.
 |-
 | colspan="2" | Size
 | colspan="2" | Byte
 | The number of trades in the following array
 |-
 | rowspan="7" | Trades
 | Input item 1
 | rowspan="7" | Array
 | Slot
 | The first item the villager is buying
 |-
 | Output item
 | Slot
 | The item the villager is selling
 |-
 | Has second item
 | Boolean
 | Whether there is a second item
 |-
 | Input item 2
 | Optional slot
 | The second item the villager is buying; only present if they have a second item.
 |-
 | Trade disabled
 | Boolean
 | True if the trade is disabled; false if the trade is enabled.
 |-
 | Number of tool uses
 | Int
 | May actually be the number of times this trade has been used; MCP may be misleading me
 |-
 | Maximum number of trade uses
 | Int
 | Number of times this trade can be used
 |}

=== <code>MC|TrSel</code> ===
''Client to server''

When a player selects a specific trade offered by a villager NPC.
It contains a single int id corresponding to the selected slot int the players current (trading) inventory.

== Notable community plugin channels ==
Channels listed in this section are not used by the vanilla Minecraft client or server. This is just a likely-incomplete list of channels used by mods/plugins popular within the Minecraft community.

=== <code>BungeeCord</code> ===

[http://www.spigotmc.org/wiki/bukkit-bungee-plugin-messaging-channel/ See here]

=== <code>FML|HS</code>, <code>FML</code> ===

{{Main|Minecraft Forge Handshake}}

Used by [http://www.minecraftforge.net/forum/index.php Minecraft Forge] to negotiate required mods, among other things.
[https://github.com/MinecraftForge/MinecraftForge/blob/master/src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeMessage.java <code>FML|HS</code>]
[https://github.com/MinecraftForge/MinecraftForge/blob/master/src/main/java/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java <code>FML</code>]

=== <code>ML|OpenTE</code> ===
''Server to client''

Used by [http://www.minecraftforum.net/topic/75440-modloader/ ModLoader] to support custom GUI windows. Does not use the REGISTER channel.

=== <code>WECUI</code> ===
{{Main|/WorldEditCUI}}

Used by the server-side [http://www.enginehub.org/worldedit/ WorldEdit] and the client-side [http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1292886-worldeditcui/ WorldEditCUI] to coordinate selections.

=== <code>WDL|INIT</code>, <code>WDL|CONTROL</code>, <code>WDL|REQUEST</code> ===

{{Main|/World downloader}}

Used by the client-side [http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/2520465 World Downloader mod] to get permission information and perform permission requests.

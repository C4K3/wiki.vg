All data sent over the network is [http://en.wikipedia.org/wiki/Endianness#Big-endian big-endian], that is the bytes are sent from most significant byte to least significant byte. The majority of everyday computers are little-endian, therefore it may be necessary to change the endianness before sending data over the network.

Other than 'String' and 'Metadata', which are decoded with a custom function, these data formats are identical to those provided by the Java classes [http://download.oracle.com/javase/1.4.2/docs/api/java/io/DataInputStream.html DataInputStream] and [http://download.oracle.com/javase/1.4.2/docs/api/java/io/DataOutputStream.html DataOutputStream].

{| class="wikitable"
 |-
 ! Name
 ! Size (bytes)
 ! Encodes
 ! Notes
 |-
 ! bool
 | 1
 | false or true
 | Value can be either true (<code>0x01</code>) or false (<code>0x00</code>)
 |-
 ! byte
 | 1
 | -128 to 127
 | Signed 8-bit integer, [[wikipedia:Two's complement|two's complement]]
 |-
 ! short
 | 2
 | -32768 to 32767
 | Signed 16-bit integer, two's complement
 |-
 ! int
 | 4
 | -2147483648 to 2147483647
 | Signed 32-bit integer, two's complement
 |-
 ! long
 | 8
 | -9223372036854775808 to 9223372036854775807
 | Signed 64-bit integer, two's complement
 |-
 ! float
 | 4
 | 
 | Single-precision 32-bit IEEE 754 floating point
 |-
 ! double
 | 8
 | 
 | Double-precision 64-bit IEEE 754 floating point
 |-
 ! string
 | ≥ 1 <br />≤ 2147483652
 | A sequence of [[wikipedia:Unicode|Unicode]] code points
 | [[wikipedia:UTF-8|UTF-8]] string prefixed with its length as a VarInt
 |- 
 ! VarInt
 | ≥ 1 <br />≤ 5
 | -2147483648 to 2147483647
 | [http://developers.google.com/protocol-buffers/docs/encoding#varints Protocol Buffer Varint], encoding a two's complement signed 32-bit integer
 |-
 ! VarLong
 | ≥ 1 <br />≤ 10
 | -9223372036854775808 to 9223372036854775807
 | [http://developers.google.com/protocol-buffers/docs/encoding#varints Protocol Buffer Varint], encoding a two's complement signed 64-bit integer
 |-
 ! metadata
 | Varies
 | See [[Entities#Entity_Metadata_Format|this]]
 | 
 |- 
 ! Slot Data
 | Varies
 | See [[Slot_Data|slot data]]
 | 
 |-
 ! Position 
 | 8
 | 
 | See below
 |-
 ! UUID
 | 16
 | A [[wikipedia:Universally_unique_identifier|UUID]]
 | The vanilla Minecraft server internally sends this as two longs.

<pre>this.writeLong(uuid.getMostSignificantBits());
this.writeLong(uuid.getLeastSignificantBits());</pre>
 |}

=== Position ===

64-bit long split in to three parts

x: 26 MSBs

z: 26 LSBs

y: 12 bits between them

Encoded as followed:

  ((x & 0x3FFFFFF) << 38) | ((y & 0xFFF) << 26) | (z & 0x3FFFFFF)
 

And decoded as:

  long val; // Encoded value
  x = val >> 38;
  y = (val >> 26) & 0xFFF
  z = val << 38 >> 38

=== Fixed-point numbers ===

Some fields may be stored as [https://en.wikipedia.org/wiki/Fixed-point_arithmetic fixed-point numbers], where a certain number of bits represents the signed integer part (number to the left of the decimal point) and the rest represents the fractional part (to the right). Floating points (float and double), in contrast, keep the number itself (mantissa) in one chunk, while the location of the decimal point (exponent) is stored beside it. 

Essentially, while fixed-point numbers have lower range than floating points, their fractional precision is greater for higher values. This makes them ideal for representing global coordinates of an entity in Minecraft, as it's more important to store the integer part accurately than position them more precisely within a single block (or meter). 

Coordinates are often represented as a 32-bit integer, where 5 of the least-significant bits are dedicated to the fractional part, and the rest store the integer part.

Java lacks support for fractional integers directly, but you can represent them as integers. To convert from a double to this integer representation, use the following formulas:
  abs_int = (int)double * 32;
And back again:

  double = (double)abs_int / 32;

[[Category:Protocol Details]]
[[Category:Minecraft Modern]]

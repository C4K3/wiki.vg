Minecraft supports querying the MOTD, player count, max players and server version via the usual port. Unlike [[Query]], the server list ping interface is always enabled.

== 1.6 - ==

=== Client -> Server ===

The client initiates a TCP connection to the minecraft server on the standard port. Instead of doing auth and logging in (as detailed in [[Protocol Encryption]]), it sends the following data, expressed in hexadecimal:

# <code>FE</code> - packet identifier for a [[Protocol#0xFE|server list ping]]
# <code>01</code> - server list ping's payload (always 1)
# <code>FA</code> - packet identifier for a [[Protocol#0xFA|plugin message]]
# <code>00 0B</code> - length of following string, in characters, as a short (always 11)
# <code>00 4D 00 43 00 7C 00 50 00 69 00 6E 00 67 00 48 00 6F 00 73 00 74</code> - the string "MC|PingHost" encoded as a big-endian [http://en.wikipedia.org/wiki/UTF-16/UCS-2 UCS-2] string
# <code>XX XX</code> - length of the rest of the data, as a short. Compute as <code>7 + 2*len(hostname)</code>
# <code>XX</code> - protocol version - currently 73 (decimal)
# <code>XX XX</code> - length of following string, in characters, as a short
# <code>...</code> - hostname the client is connecting to, encoded the same way as "MC|PingHost"
# <code>XX XX XX XX</code> - port the client is connecting to, as an int.

All [[Data_Types|data types]] are big-endian.

Packet dump:

    0000000: fe01 fa00 0b00 4d00 4300 7c00 5000 6900  ......M.C.|.P.i.
    0000010: 6e00 6700 4800 6f00 7300 7400 1949 0009  n.g.H.o.s.t..I..
    0000020: 006c 006f 0063 0061 006c 0068 006f 0073  .l.o.c.a.l.h.o.s
    0000030: 0074 0000 63dd                           .t..c.

=== Server -> Client ===

The server responds with a [[Protocol#Disconnect.2FKick_.280xFF.29|0xFF kick]] packet. The packet begins with a single byte identifier <code>ff</code>, then a two-byte big endian short giving the length of the proceeding string in characters. You can actually ignore the length because the server closes the connection after the response is sent.

After the first 3 bytes, the packet is a big-endian UCS-2 string. It begins with two characters: <code>§1</code>, followed by a null character. On the wire these look like <code>00 a7 00 31 00 00</code>.

The remainder is null character (that is <code>00 00</code>) delimited fields:

# Protocol version (e.g. <code>47</code>)
# Minecraft server version (e.g. <code>1.4.2</code>)
# Message of the day (e.g. <code>A Minecraft Server</code>)
# Current player count
# Max players

The entire packet looks something like this:

                    <---> first character
    0000000: ff00 2300 a700 3100 0000 3400 3700 0000  ....§.1...4.7...
    0000010: 3100 2e00 3400 2e00 3200 0000 4100 2000  1...4...2...A. .
    0000020: 4d00 6900 6e00 6500 6300 7200 6100 6600  M.i.n.e.c.r.a.f.
    0000030: 7400 2000 5300 6500 7200 7600 6500 7200  t. .S.e.r.v.e.r.
    0000040: 0000 3000 0000 3200 30                   ..0...2.0

== 1.4 - 1.5 ==

Prior to the Minecraft 1.6, the client -> server operation is much simpler, and only sends <code>FE 01</code>, with none of the following data beginning <code>FA ...</code>

== Beta 1.8 - 1.3 ==

Prior to Minecraft 1.6, the client only sends <code>FE</code>. 

Additionally, the response from the server only contains 3 fields delimited by <code>§</code>:

# Message of the day (e.g. <code>A Minecraft Server</code>)
# Current player count
# Max players

The entire packet looks something like this:

                    <---> first character
    0000000: ff00 1700 4100 2000 4d00 6900 6e00 6500  ....A. .M.i.n.e.
    0000010: 6300 7200 6100 6600 7400 2000 5300 6500  c.r.a.f.t. .S.e.
    0000020: 7200 7600 6500 7200 a700 3000 a700 3100  r.v.e.r.§.0.§.1.
    0000030: 30                                       0


== Sample code ==

* [https://gist.github.com/1209061 Python]
* [https://gist.github.com/5795159 PHP]
* [https://gist.github.com/4574114 Java]
